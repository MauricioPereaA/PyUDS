            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2E'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_002(self, name='Pyrotechnic'):
        # test.preconditions(
        #     step_info=info(),

        # )
        # test.step(
        #     step_title=name,
        #     custom=''
        # )
        pass

    def test_003(self, name='Pyrotechnic'):
        # test.preconditions(
        #     step_info=info(),

        # )
        # test.step(
        #     step_title=name,
        #     custom=''
        # )
        pass

    def test_004(self, name='incorrectMessageLengthOrInvalidFormat - 0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_005(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_006(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_2'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0 F4',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_008(self, name='conditionsNotCorrect - 0x22'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN',
            transmit_in_off=False,
            signal=[
                'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 10,
                'TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 2
            ]

        )
        test.step(
            step_title=name,
            custom='2E F1 DB 00 00',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_009(self, name='requestOutOfRange - 0x31'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E 01 00 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_010(self, name='requestOutOfRange - 0x31_1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E 01 01 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_011(self, name='requestOutOfRange - 0x31_2'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E 01 02 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_013(self, name='securityAccessDenied - 0x33'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            extended_session_control=True, # $F1 90 will get NRC 31 in default session. In previous version, we will enter extended session.
            custom='2E F1 90' + '01'*17,
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_015(self, name='generalProgrammingFailure - 0x72'):
        # test.preconditions(
        #     step_info=info(),

        # )
        # test.step(
        #     step_title=name,
        #     custom=''
        # )
        pass
