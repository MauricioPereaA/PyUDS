
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import tools        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        tools.popup.warning(
            title='MEC > 0 required',
            description='Attention !!! MEC needs to be greater than 0 for this test'
        )
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2E'
        )
        self.all_FFs_byte_seed = ' '.join(('FF '*31).split())

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_021(self, name='Transition to extended session'):
        test.preconditions(
            step_info=info(),
            mec_zero=False,
            sbat=False
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_022(self, name='activate tester present'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_024(self, name='Write to secured DID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0 F4 ' + '00'*822,
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_025(self, name='Seed security level 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_026(self, name='Send key to enter security level 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_027(self, name='Write to secured DID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0 F4 ' + '01'*822,
            expected={
                'response': 'Positive'
            }
        )

    def test_028(self, name='Read secured DID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 F4',
            expected={
                'response': 'Positive',
                'data'    : '01'*822
            }
        )

