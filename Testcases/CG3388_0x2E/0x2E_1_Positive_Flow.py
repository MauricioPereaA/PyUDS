'''
Author : Manuel Medina
Modified by Mauricio Perea
High Level CG 3388 2019 Complete all test steps
05 March 2020 

Modified by Mauricio Perea
Date: 10-July-2020
It have been updated implemented the validation (00,FF)
Modified by: Mauricio Perea        Date: 30-Sep-20

This script is intended to validate positive response of service 0x2E which main function is request data record values from the server identified by one or more dataIdentifiers.

'''


from framework.shared_functions import write_supported_dids
from framework.shared_functions import tools, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        ECU_without_TrnsEstGr_Prtctd_PDU = [
            'PTM',
            'TCP'
        ]

        self.rationality_off=0
        if device_under_test in ECU_without_TrnsEstGr_Prtctd_PDU:
            self.rationality_off=1  
    
    
    
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2E'
        )
        self.supported_dids = write_supported_dids
        
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'EXAMPLE_1', # This can be replaced
            'EXAMPLE_2'  # This can be replaced
        ]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='Service 0x2E - Positive Flow'):
        self.mec_value = tools.popup.ask(
            title='Validate MEC', 
            description='Â¿Do you have MEC>0?',
            timeout=2, default = False )
           
             
        self.validate='MEC=0'
        if self.mec_value==1:
            self.validate='MEC>0'
        
        
        self.current_step = 0


        def step_preconditions_rationality_off():
            test.canoe.set_envVariable(TransmitInOFFInfinite=0)
            time.sleep(2)
            test.canoe.set_signal('TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 0)
        
        def step_preconditions_rationality_rcip():
            
            test.preconditions(                          
                signal=['RCIP_RrClsrMtnCtlParmEnblAuth','RrClsrInfo_Prtctd_PDU',1],
                envVariable={'TransmitInOFFInfinite':1}
                )
                
        def step_preconditions_rationality_pm_accesory():
            test.preconditions(
                power_mode='ACC'
                )
                
        def state_power_mode_off():
             test.preconditions(
                power_mode='OFF'
                )
                       
        def step_preconditions_rationality_park():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',1],
                envVariable={'TransmitInOFFInfinite':1}
                )
            
        def step_preconditions_rationality_reverse():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',2],
                envVariable={'TransmitInOFFInfinite':1}
            )
            

        def step_preconditions_rationality_neutral():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',3],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_a():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',4],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_b():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',5],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_c():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',6],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_d():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',7],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_e():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',8],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_f():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',9],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_g():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',10],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_h():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',11],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_i():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',12],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_j():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',13],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_unknown():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',14],
                envVariable={'TransmitInOFFInfinite':1}
            )
            
        def step_preconditions():
            test.preconditions(
                current_step='test_%s'%str(self.current_step).rjust(3, '0')
            )
        
        
        def state_power_mode_off():
             test.preconditions(
                power_mode='OFF'
                )
        
        
        def default_session():
            #step_preconditions()
            test.step(
                step_title='Transition to default Session ',
                custom='10 01',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )
        
        def extended_session():
            step_preconditions()
            test.step(
                step_title='Transition to Extended Session ',
                custom='10 03',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )
        
        def tester_present():
            step_preconditions()
            test.step(
                step_title='Start Tester present',
                start_tester_present=True,
                expected = {
                    'response': 'No response'
                }
            )
              
        def enter_security_level(level):
            step_preconditions()
            test.step(
                step_title='Security Level %s - Req Seed'%level,
                request_seed=level,
                expected={
                    'response' : 'Positive',
                    'dataLength'          : 31,
                    'unexpected_response' : True, # Make sure 'data' is not in Response received
                    'partialData'         : ('00', 'FF')
                }
            )

            self.current_step += 1
            step_preconditions()
            test.step(
                step_title='Security Level %s - Send Key'%level,
                send_key=level,
                expected={
                    'response' : 'Positive'
                }
            )
            
            
        def enter_security_level_mec_greater_than_zero(level):
            step_preconditions()
            test.step(
                step_title='Security Level %s - Req Seed'%level,
                request_seed=level,
                expected={
                    'response' : 'Positive',
              
                }
            )

            self.current_step += 1
            step_preconditions()
            test.step(
                step_title='Security Level %s - Send Key'%level,
                send_key=level,
                expected={
                    'response' : 'Positive'
                }
            )    
        
        def write_did(did, data):
            step_preconditions()
            test.step(
                step_title='write DID %s'%did,
                custom='2E {} {}'.format(did, data),
                expected={
                    'response': 'Positive'
                }
            )
            
        def write_did_default_session(did, data):
            step_preconditions()             
            
            test.step(
                default_session_control=True,
                step_title='write DID %s'%did,
                custom='2E {} {}'.format(did, data),
                expected={
                    'response': 'Positive'
                }
            )
        
        for did in self.supported_dids.keys():
            if did in self.custom_exclutions:
                # Skip exclutions
                continue

            self.current_step = 0
            default_session()
            state_power_mode_off()
            
            if self.validate in self.supported_dids[did][0]:
            
                if 'locked' in self.supported_dids[did][0]:
                    
                    if 'RATIONALITY' in self.supported_dids[did][0]:
                        if 'PARK' in self.supported_dids[did][0]:
                            step_preconditions_rationality_park()
                        
                        if 'REVERSE' in self.supported_dids[did][0]:
                            step_preconditions_rationality_reverse()
                        
                        if 'NEUTRAL' in self.supported_dids[did][0]:
                            step_preconditions_rationality_neutral()
                        
                        if 'FORWARD_A' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_a()
                        
                        if 'FORWARD_B' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_b()
                        
                        if 'FORWARD_C' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_c()
                        
                        if 'FORWARD_D' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_d()

                        if 'FORWARD_E' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_e()

                        if 'FORWARD_F' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_f()

                        if 'FORWARD_G' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_g()

                        if 'FORWARD_H' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_h()

                        if 'FORWARD_I' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_i()

                        if 'FORWARD_J' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_j()

                        if 'UNKNOWN' in self.supported_dids[did][0]:
                            step_preconditions_rationality_unknown()
                            
                        if 'RCIP' in self.supported_dids[did][0]:
                            step_preconditions_rationality_rcip()

                        if 'POWER_MODE_ACCESSORY' in self.supported_dids[did][0]:
                            step_preconditions_rationality_pm_accesory()                    
                            
                    if 'DEFAULT' in self.supported_dids[did][0]:
                        self.current_step = 3
                        write_did_default_session(did, self.supported_dids[did][1])
                        

                    if 'EXTENDED' in self.supported_dids[did][0]:
                        self.current_step = 4
                        extended_session()

                        self.current_step = 5
                        tester_present()

                        self.current_step = 6
                        write_did(did, self.supported_dids[did][1])   #LOCKED = 10 03
                        
                    if '01' in self.supported_dids[did][0]:
                        self.current_step = 7
                        if self.mec_value ==1:
                            enter_security_level_mec_greater_than_zero('01')
                        else:
                            enter_security_level('01')
                            self.current_step = 9
                            write_did(did, self.supported_dids[did][1])

                        if '03' in self.supported_dids[did][0]:
                            self.current_step = 10

                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('03')
                            else:
                               enter_security_level('03')                        
                           

                            self.current_step = 12
                            write_did(did, self.supported_dids[did][1])
                        
                        if '05' in self.supported_dids[did][0]:
                            self.current_step = 13         
                            
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('05')
                            else:
                                enter_security_level('05')

                            self.current_step = 15
                            write_did(did, self.supported_dids[did][1])
                        
                        if '09' in self.supported_dids[did][0]:
                            self.current_step = 16      
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('09')
                            else:
                                enter_security_level('09')

                            self.current_step = 18
                            write_did(did, self.supported_dids[did][1])

                        if '0B' in self.supported_dids[did][0]:
                            self.current_step = 19      
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('0B')
                            else:
                                enter_security_level('0B')

                            self.current_step = 21
                            write_did(did, self.supported_dids[did][1])

                        if '0D' in self.supported_dids[did][0]:
                            self.current_step = 22  
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('0D')
                            else:
                                enter_security_level('0D')

                            self.current_step = 24
                            write_did(did, self.supported_dids[did][1])
                        
                        if '11' in self.supported_dids[did][0]:
                            self.current_step = 25 
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('11')
                            else:
                                enter_security_level('11')

                            self.current_step = 27
                            write_did(did, self.supported_dids[did][1])

                        if '13' in self.supported_dids[did][0]:
                            self.current_step = 28
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('13')
                            else:
                                enter_security_level('13')

                            self.current_step = 30
                            write_did(did, self.supported_dids[did][1])
                        
                        if '15' in self.supported_dids[did][0]:
                            self.current_step = 31
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('15')
                            else:
                                enter_security_level('15')

                            self.current_step = 33
                            write_did(did, self.supported_dids[did][1])
                        

                    
                    if self.rationality_off==0:
                       step_preconditions_rationality_off()


                if 'locked' not in self.supported_dids[did][0]:
                   
                    if 'RATIONALITY' in self.supported_dids[did][0]:
                        if 'PARK' in self.supported_dids[did]:
                            step_preconditions_rationality_park()
                        
                        if 'REVERSE' in self.supported_dids[did][0]:
                            step_preconditions_rationality_reverse()
                        
                        if 'NEUTRAL' in self.supported_dids[did][0]:
                            step_preconditions_rationality_neutral()
                        
                        if 'FORWARD_A' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_a()
                        
                        if 'FORWARD_B' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_b()
                        
                        if 'FORWARD_C' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_c()
                        
                        if 'FORWARD_D' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_d()

                        if 'FORWARD_E' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_e()

                        if 'FORWARD_F' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_f()

                        if 'FORWARD_G' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_g()

                        if 'FORWARD_H' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_h()

                        if 'FORWARD_I' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_i()

                        if 'FORWARD_J' in self.supported_dids[did][0]:
                            step_preconditions_rationality_forward_j()

                        if 'UNKNOWN' in self.supported_dids[did][0]:
                            step_preconditions_rationality_unknown()
                            
                        if 'RCIP' in self.supported_dids[did][0]:
                            step_preconditions_rationality_rcip()

                        if 'POWER_MODE_ACCESSORY' in self.supported_dids[did][0]:
                            step_preconditions_rationality_pm_accesory()                    
                            
                    if 'DEFAULT' in self.supported_dids[did][0]:
                        
                        self.current_step = 3
                        write_did_default_session(did, self.supported_dids[did][1])
                        

                    if 'EXTENDED' in self.supported_dids[did][0]:
                        self.current_step = 4
                        extended_session()

                        self.current_step = 5
                        tester_present()

                        #self.current_step = 6
                        #write_did(did, self.supported_dids[did][1])   
                        
                        if '01' in self.supported_dids[did][0]:
                            self.current_step = 7
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('01')
                            else:
                                enter_security_level('01')

                            self.current_step = 9
                            write_did(did, self.supported_dids[did][1])

                        if '03' in self.supported_dids[did][0]:
                            self.current_step = 10    
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('03')                        
                            else:
                                enter_security_level('03')

                            self.current_step = 12
                            write_did(did, self.supported_dids[did][1])
                        
                        if '05' in self.supported_dids[did][0]:
                            self.current_step = 13 
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('05')                        
                            else:
                                enter_security_level('05')

                            self.current_step = 15
                            write_did(did, self.supported_dids[did][1])
                        
                        if '09' in self.supported_dids[did][0]:
                            self.current_step = 16      
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('09')
                            else:
                                enter_security_level('09')

                            self.current_step = 18
                            write_did(did, self.supported_dids[did][1])

                        if '0B' in self.supported_dids[did][0]:
                            self.current_step = 19      
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('0B')
                            else:
                                enter_security_level('0B')

                            self.current_step = 21
                            write_did(did, self.supported_dids[did][1])

                        if '0D' in self.supported_dids[did][0]:
                            self.current_step = 22  
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('0D')
                            else:
                                enter_security_level('0D')

                            self.current_step = 24
                            write_did(did, self.supported_dids[did][1])
                        
                        if '11' in self.supported_dids[did][0]:
                            self.current_step = 25 
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('11')
                            else:
                                enter_security_level('11')

                            self.current_step = 27
                            write_did(did, self.supported_dids[did][1])

                        if '13' in self.supported_dids[did][0]:
                            self.current_step = 28
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('13')
                            else:
                                enter_security_level('13')
                            

                            self.current_step = 30
                            write_did(did, self.supported_dids[did][1])
                        
                        if '15' in self.supported_dids[did][0]:
                            self.current_step = 31
                            if self.mec_value ==1:
                                enter_security_level_mec_greater_than_zero('15')
                            else:
                                enter_security_level('15')

                            self.current_step = 33
                            write_did(did, self.supported_dids[did][1])
                    
                    
                    if self.rationality_off==0:
                       step_preconditions_rationality_off()


# Steps from 'test_034' to 'test_038' are not Applicable for MSM, ARB, PTM & ESCL

    def test_039(self, name='<Transition Server to the defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',

            expected={
                'response': 'Positive'
            }            
        )
    
    def test_040(self, name='Write Data By Identifier - defaultSession - Functional Messaging'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='2E F0 9A 00 00',        #F0 80 --> F0 9A

            expected={
                'response': 'Positive'
            }            
        )
    
    def test_041(self, name='<Transition Server to the ExtendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',

            expected={
                'response': 'Positive'
            } 
        )

    def test_042(self, name='<Tester Present>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,

            expected={
                'response': 'No response'
            }            
        )

    def test_043(self, name='Write Data By Identifier - defaultSession - Functional Messaging'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='2E F0 9A 00 00',        #F0 80 --> F0 9A

            expected={
                'response': 'Positive'
            }            
        )