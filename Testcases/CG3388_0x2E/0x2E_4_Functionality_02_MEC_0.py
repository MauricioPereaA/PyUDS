
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2E'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_012(self, name='Transition to defaultSession'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=False
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )
    
    def test_013(self, name='Transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )
    
    def test_014(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )


    def test_016(self, name='Write to secured DID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0 F4 ' + '00 '*822,
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_017(self, name='Seed security level 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_018(self, name='Send key to enter security level 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_019(self, name='Write to secured DID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0 F4 ' + '00'*822,
            expected={
                'response': 'Positive'
            }
        )

    def test_020(self, name='Read secured DID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 F4',
            expected={
                'response': 'Positive',
                'data'    : '00'*822
            }
        )