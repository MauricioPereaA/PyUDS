
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test      
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2E'
        )
        self.test_data = {
            'MSM': ('F1 29', '00 00 00 00 00'),
            'SCL': ('F0 80','00'),
            'ARB': ('F0 80','00'),
            'PTM': ('F0 80','00'),
            'TCP': ('F0 80','00'),
        }
        self.did, self.did_data = self.test_data[device_under_test]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Transition to default session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='Write to valid data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E '+ self.did + self.did_data,
            expected={
                'response': 'Positive'
            }
        )

    def test_003(self, name='Read the previously used data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+ self.did,
            expected={
                'response': 'Positive',
                'data'    : self.did_data
            }
        )

    def test_004(self, name='Write to valid data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E ' + self.did + self.did_data,
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='Read the previously used data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+ self.did,
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='Transition to extended session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_007(self, name='Activate tester present'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_008(self, name='Write to valid data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E '+ self.did + self.did_data,
            expected={
                'response': 'Positive'
            }
        )

    def test_009(self, name='Read the previously used data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 ' + self.did,
            expected={
                'response': 'Positive'
            }
        )

    def test_010(self, name='Write to valid data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E ' + self.did + self.did_data,
            expected={
                'response': 'Positive'
            }
        )

    def test_011(self, name='Read the previously used data identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+ self.did,
            expected={
                'response': 'Positive'
            }
        )
