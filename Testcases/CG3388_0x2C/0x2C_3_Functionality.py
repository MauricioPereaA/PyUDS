'''
    TestScript intended to perform CG3388 Tab 0x2C -- 3. Functionality
'''
''' High Level Script CG2019
Author: Manuel Medina

Modified by : Mauricio Perea

Modified by : Ricardo Montes   Date: 17-Jun-20
Modified by: Mauricio Perea        Date: 30-Sep-20

This script is intended to validate functionality of service 0x2C which main function is o dynamically define in a server a data identifier that can be read via ReadDataByIdentifier or ReadDataByPeriodicIdentifier service.


'''

            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
from framework.shared_functions import tools, device_under_test        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest
import time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2C'
        )

        self.srcDID = {
            'ARB': '50 03',
            'PTM': '50 03',
            'MSM': 'F0 F4',#44 6A-->F0 F4
            'TCP': '43 AE'
        }

        self.secured_DID = {
            'ARB': 'XX XX',
            'PTM': 'XX XX',
            'MSM': '48 F6', #add this 
            'TCP': '45 DA'
        }

        self.dids_tuple = ('F0 80', 'F1 A0', self.srcDID[device_under_test])
        self.source_memory_addrs = ('XX XX')  # Place holder at the moment, no information for memory addresses to use on subfunction $02 of $2C

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Transition to extended session'):
        test.preconditions(
            step_info=info(),
            sbat=False, # Clear SBAT
            mec_zero=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='Activate Tester Present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='While Server is in extendedSession Send a valid 29 bit Normal fixed addressing,'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 ',
            expected={
                'response': 'Positive'
            }
        )

    def test_004(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF '+self.srcDID[device_under_test]+' 01 01',#01 04 -->01 01
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='Read Defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_007(self, name='Read cleared DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_008(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FE '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_009(self, name='Read Defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_010(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_011(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_012(self, name='Read defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )   

    def test_013(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FD '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )
          
    def test_014(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_015(self, name='Read Defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_016(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_017(self, name='Read cleared DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_018(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FE '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_019(self, name='Read Defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_020(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_021(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_022(self, name='Read defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )   

    def test_023(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF '+self.srcDID[device_under_test]+' 01 08', #F2 FD --> F2 FF   08
            expected={
                'response': 'Negative',#positive --> negative
                'data': '31'
            }
        )



    def test_024(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF' + self.secured_DID[device_under_test] + '01 01',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_025(self, name='While Server is locked and in extendedSession, Send a valid 29 bit Normal fixed addressing, N_TAtype=physical address request for the Security Level required for the secured sourceDataIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_026(self, name='Unlock the Server via Security access service'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_027(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF' + self.secured_DID[device_under_test] + '01 01',
            expected={
                'response': 'Positive'
            }
        )
        
    def test_028(self, name='Read defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_029(self, name='Transition to extended session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response': 'Positive'
            }
        )

    def test_030(self, name='Read defined DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
				'data': '33'
            }
        )

    def test_031(self, name='Clear DynamicallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 ',
            expected={
                'response': 'Positive'
            }
        )

    def test_032(self, name='Dynamically Define Data Identifier, definebyIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF '+self.srcDID[device_under_test]+' 01 07',#01 04 -->01 07
            expected={
                'response': 'Positive'
            }
        )
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FE F0 80 01 01',
            expected={
                'response': 'Positive'
            }
        )
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FD F0 81 01 06',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FC F1 A0 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FB '+self.srcDID[device_under_test]+' 01 04',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FA F0 80 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F9 F0 81 01 06',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F8 F1 A0 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F7 '+self.srcDID[device_under_test]+' 01 04',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F6 F0 80 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F5 F0 81 01 06',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F4 F1 A0 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F3 '+self.srcDID[device_under_test]+' 01 04',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F2 F0 80 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F1 F0 81 01 06',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F0 F1 A0 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_033(self, name='Read previously created DDIDs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF F2 FE F2 FD F2 FC F2 FB F2 FA F2 F9 F2 F8 F2 F7 F2 F6 F2 F5 F2 F4 F2 F3 F2 F2 F2 F1 F2 F0',
            expected={
                'response': 'Positive'
            }
        )

    def test_034(self, name='Clear ONE dynamicallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_035(self, name='Read cleared DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_036(self, name='Read previously created DDIDs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE F2 FD F2 FC F2 FB F2 FA F2 F9 F2 F8 F2 F7 F2 F6 F2 F5 F2 F4 F2 F3 F2 F2 F2 F1 F2 F0',
            expected={
                'response': 'Positive'
            }
        )

    def test_037(self, name='Clear all dynamicallyDefinedDataIdentifiers'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_038(self, name='Read DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_039(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_040(self, name='Read defined DDIDs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_042(self, name='<hardreset -extendedSession>Preconditionns'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_043(self, name='Read cleared DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_044(self, name='Transition to extended session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response'            : 'Positive'
            }
        )

    def test_045(self, name='Activate Tester Present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_046(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_047(self, name='Read defined DDIDs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_050(self, name='Read cleared DDID'):
        if hasattr(test.power_supply, 'output'): 
            test.power_supply.output(False)
        else:
            tools.popup.info('Power supply action required',
                'Please Turn OFF the power supply and click OK.')
        time.sleep(2)
        if hasattr(test.power_supply, 'output'): 
            test.power_supply.output(True)
        else:
            tools.popup.info('Power supply action required',
                'Please Turn OFF the power supply and click OK.')
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_051(self, name='Transition to extended session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response'            : 'Positive'
            }
        )

    def test_052(self, name='Activate Tester Present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_053(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_054(self, name='Read DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_055(self, name='Transition server to default session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_056(self, name='Read DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_057(self, name='Transition server to extended session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_058(self, name='Activate Tester Present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_059(self, name='Clear DDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_060(self, name='on-hold'): # From here to test step xx is about subfunction 02 of 2C, which is pending
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FF XX XX XX XX',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
    def test_061(self, name='<Unlock the Server via security access service> -- seed for sec lvl 9'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_062(self, name='<Unlock the Server via security access service> -- send key for sec lvl 9'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_063(self, name='on-hold'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FF XX XX XX XX',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_064(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_065(self, name='Clear DDID'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_066(self, name='Read DDID'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_067(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP'] #add
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FE '+self.srcDID[device_under_test]+' 01 04',#2C 01 F2 FE-->2C 02 F2 FE
            expected={
                'response': 'Positive'
            }
        )

    def test_068(self, name='Read Defined DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP'] #add
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_069(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_070(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_071(self, name='Read defined DDID'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )   

    def test_072(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FD '+self.srcDID[device_under_test]+' 01 04',
            expected={
                'response': 'Positive'
            }
        )

    def test_073(self, name='on-hold'):
        for memory_addr in self.source_memory_addrs:
            self.step_counter=55
            unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
            if device_under_test in unsupported_ecu:
                print('Test step from {} is not supported / is on hold by {}'.format(
                        __name__, ','.join(unsupported_ecu)))
                return 0
            pass

            test.preconditions(
                current_step='test_%s'%str(self.step_counter).rjust(3, '0')
            )

            test.step(
                step_title=name,
                custom='2C 02 F2 FF' + memory_addr,
                expected={
                    'response': 'Positive'
                }
            )
            if device_under_test in unsupported_ecu:
                print('Test step from {} is not supported / is on hold by {}'.format(
                        __name__, ','.join(unsupported_ecu)))
                return 0
            pass

            self.step_counter += 1
            test.preconditions(
                current_step='test_%s'%str(self.step_counter).rjust(3, '0')
            )
            test.step(
                step_title=name,
                custom='22 F2 FF',
                expected={
                    'response': 'Positive'
                    }
                )

            if device_under_test in unsupported_ecu:
                print('Test step from {} is not supported / is on hold by {}'.format(
                        __name__, ','.join(unsupported_ecu)))
                return 0
            pass
            self.step_counter += 1
            test.preconditions(
                current_step='test_%s'%str(self.step_counter).rjust(3, '0')
            )
            test.step(
                step_title=name,
                custom='2C 03 F2 FF',
                expected={
                    'response': 'Positive'
                }
            )
            if device_under_test in unsupported_ecu:
                print('Test step from {} is not supported / is on hold by {}'.format(
                        __name__, ','.join(unsupported_ecu)))
                return 0
            pass

            self.step_counter += 1
            test.preconditions(
                current_step='test_%s'%str(self.step_counter).rjust(3, '0')
            )
            test.step(
                step_title=name,
                custom='22 F2 FF',
                expected={
                    'response': 'Negative',
                    'data'    : '31'
                    }
                )

    def test_077(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FE '+self.srcDID[device_under_test]+' 01 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_078(self, name='Read Defined DDID'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_079(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_080(self, name='Clear DinamycallyDefinedDataIdentifiers'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_081(self, name='Read defined DDID'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )   

    def test_082(self, name='DinamicallyDefineDataIdentifier, defineByIdentifier'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FD '+self.srcDID[device_under_test]+' 01 04',
            expected={
                'response': 'Positive'
            }
        )

    def test_083(self, name='Create several DDID with different sourcememory addresses'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FF XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FE XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FD XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FC XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FB XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FA XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F9 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F8 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F7 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F6 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F5 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F4 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F3 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F2 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F1 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 F0 XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

    def test_084(self, name='Read previously created DDIDs'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF F2 FE F2 FD F2 FC F2 FB F2 FA F2 F9 F2 F8 F2 F7 F2 F6 F2 F5 F2 F4 F2 F3 F2 F2 F2 F1 F2 F0',
            expected={
                'response': 'Positive'
            }
        )

    def test_085(self, name='Clear ONE dynamicallyDefinedDataIdentifiers'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_086(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_087(self, name='Read previously created DDIDs'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE F2 FD F2 FC F2 FB F2 FA F2 F9 F2 F8 F2 F7 F2 F6 F2 F5 F2 F4 F2 F3 F2 F2 F2 F1 F2 F0',
            expected={
                'response': 'Positive'
            }
        )

    def test_088(self, name='Clear all dynamicallyDefinedDataIdentifiers'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_089(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FE',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_090(self, name='Create a DDID with one source memory address'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FF XX XX XX XX',
            expected={
                'response': 'Positive'
            }
        )

    def test_091(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_093(self, name='<hardreset -extendedSession>Preconditionns'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_094(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        time.sleep(6)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_095(self, name='extendedSession'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response'            : 'Positive'
            }
        )

    def test_096(self, name='Activate Tester Present'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_097(self, name='<Unlock the Server via security access service> -- seed for sec lvl 9'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_098(self, name='<Unlock the Server via security access service> -- send key for sec lvl 9'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_099(self, name='on-hold'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FF XX XX XX XX',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_100(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_103(self, name='Read DDID'):
        if hasattr(test.power_supply, 'output'): 
            test.power_supply.output(False)
        else:
            tools.popup.info('Power supply action required',
                'Please Turn OFF the power supply and click OK.')
        time.sleep(2)
        if hasattr(test.power_supply, 'output'): 
            test.power_supply.output(True)
        else:
            tools.popup.info('Power supply action required',
                'Please Turn OFF the power supply and click OK.')
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )

    def test_104(self, name='Transition to extended session'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_105(self, name='Activate Tester Present'):
        if device_under_test in ['MSM']:#add
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_106(self, name='<Unlock the Server via security access service> -- send key for sec lvl 9'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_107(self, name='on-hold'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_108(self, name='on-hold'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FF XX XX XX XX',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_109(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_110(self, name='Transition to default session'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_111(self, name='Read DDID'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported / is on hold by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data'    : '31'
            }
        )
