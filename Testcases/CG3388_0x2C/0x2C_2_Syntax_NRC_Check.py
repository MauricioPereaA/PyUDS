
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
            #Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2C'
        )

        self.secured_DID = {
            'ARB': '48 F9',
            'PTM': '48 F9',
            'MSM': '48 F9',
            'TCP': '45 DA'
        }
        
        self.exceed_data_DID = {
            'MSM': '47 A8',
            'PTM': '50 05',
            'ARB': '50 05',
            'TCP': '51 D1'
        }

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
# F2 XX -> F2 FF ['F2 F0', 'F2 F1', 'F2 F2', 'F2 F3', 'F2 F4', 'F2 F5', 'F2 F6', 'F2 F7', 'F2 F8', 'F2 F9', 'F2 FA', 'F2 FB', 'F2 FC', 'F2 FD', 'F2 FE', 'F2 FF'] are 16 combinations

    def test_002(self, name='on-hold'):
        pass

    def test_003(self, name='on-hold'):
        pass

    def test_004(self, name='on-hold'):
        pass

    def test_005(self, name='transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='<Activate TesterPresent-DefaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present='true',
            expected={
                'response': 'No response'
            }
        )

    def test_007(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_008(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_009(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_010(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF ',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_011(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF 50',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_012(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF 50 03',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_013(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF 50 03 01',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_014(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 F2 FF 50',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_015(self, name='on-hold'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control = True,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_016(self, name='on-hold'):
        test.preconditions(
        step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_017(self, name='on-hold'):
        unsupported_ecu = ['MSM']                                          #add
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_018(self, name='on-hold'):										#add
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_019(self, name='on-hold'):										#add
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 00 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_020(self, name='on-hold'):										#add
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 00 00 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_021(self, name='on-hold'):
        unsupported_ecu = ['MSM']#add
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_022(self, name='on-hold'):
        unsupported_ecu = ['MSM']#add
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_024(self, name='on-hold'): # From here to test step 30 is about incorrect conditions to execute $22 but dont know which ones are
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        pass

    def test_025(self, name='on-hold'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_026(self, name='<Unlock the Server via security access service> -- seed for sec lvl 9'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_027(self, name='<Unlock the Server via security access service> -- send key for sec lvl 9'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_028(self, name='on-hold'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM', 'TCP']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FC 00 00 02',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_029(self, name='requestOutOfRange -0x31'):#invalid DDID
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F1 FF F0 80 01 01', #2C 01 F2 FF 00 00 02 01-->2C 01 F1 FF F0 80 01 01
            expected={                         #we need to find an invalid DDID
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_030(self, name='requestOutOfRange -0x31'):#invalid sourceDataIdentifier
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom=' 2C 01 F2 FB 4B 61 01 01', #2C 01 F2 FB 4B 61 00 01-->2C 01 F2 FB 4B 61 01 01
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_031(self, name='requestOutOfRange -0x31'):#invalid positionSourceDataRecord
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FB F0 80 00 01',#2C 01 F2 FB 00 00 02 01-->2C 01 F2 FB F0 80 00 01
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_032(self, name='requestOutOfRange -0x31'):# invalid memorySize
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FB F0 80 01 00',#2C 01 F2 FB 4B 61 00 01-->2C 01 F2 FB F0 80 01 00
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_033(self, name='requestOutOfRange -0x31'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FB {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A {0} 01 0A \
                {0} 01 0A {0} 01 0A {0} 01 0A'.format(
                    self.exceed_data_DID[device_under_test]
                ),
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_034(self, name='requestOutOfRange -0x31'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FB {} 01 0A'.format(
                self.exceed_data_DID[device_under_test]),
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )
    def test_035(self, name='requestOutOfRange -0x31'):
        if device_under_test in ['MSM']:
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 F2 FB {} 01 0A'.format(
                self.exceed_data_DID[device_under_test]),
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )        

    def test_036(self, name='requestOutOfRange -0x31'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03 00 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )
    def test_037(self, name='Security Level 09 - Req Seed - Functional'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True, #add
            start_tester_present=True      #add
        )
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_038(self, name='<Unlock the Server via security access service> - Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )
    def test_039(self, name='requestOutOfRange -0x31'):
        if device_under_test in ['MSM']:
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,#not sure
            custom='2C 02 F2 FB {} 01 0A'.format(
                self.exceed_data_DID[device_under_test]),
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )  

    def test_040(self, name='pyrotechnic ECU Test'):
        if device_under_test in ['MSM']:
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,#not sure
            custom='2C 02 F2 FB {} 01 0A'.format(
                self.exceed_data_DID[device_under_test]),
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_041(self, name='pyrotechnic ECU Test'):
        if device_under_test in ['MSM']:
            print('Skipping test .. Subfunction 02 not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,#not sure
            custom='2C 02 F2 FB {} 01 0A'.format(
                self.exceed_data_DID[device_under_test]),
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_042(self, name='transition to defaultSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_044(self, name='securityAccessDenied -0x33'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FA %s 01 01'%self.secured_DID[device_under_test],
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )