'''
    TestScript intended to perform CG3388 Tab 0x27 -- 1. Positive Flow
'''
'''
Author: Manuel Medina

Modified by: Ricardo Montes       Date: 17-Jun-20
Modified by: Mauricio Perea        Date: 5-Nov-20





'''

            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
from framework.shared_functions import device_under_test, tools          
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Manufac Pre Prog Validation'
        )
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
  
    def test_003(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info(),
            mec_zero=True, 
            power_mode='off'    
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_004(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_005(self, name='Security Level 03 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    
    def test_006(self, name='Check Programming Dependencies'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF 01',
            expected={
                'response': 'Positive'
            }
        )
    def test_007(self, name='Disable DTCs'):

        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            dtc_settings='off',

            expected={
                'response'   : 'Positive'
            }
        )

    def test_008(self, name='Disable Normal Communication'):

        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            communication_control=False,

            expected={
                'response'   : 'Positive'
            }
        )
        
        
    def test_009(self, name='Access Security Send Key'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            send_key='03',

            expected={
                'response'   : 'Positive'
            }
        )    
    def test_010(self, name='Transition to programmingSession, Boot Mode'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            programming_session_control=True,

            expected={
                'response'   : 'Positive',
                'dataLength':  4
            },

        )


    def test_011(self, name='Transition to defaultSession, Application Mode'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            default_session_control=True,

            expected={
                'response'   : 'Positive',
                'dataLength':  4
            },

        )
   