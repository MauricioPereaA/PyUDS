            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Read Multiple DID and Functional Messaging Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x22'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='Transition Server to defaultSession'):
        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            start_tester_present=True,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='Request more than one DID with at least one being supported and at least one being not supported - 1'):

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 80 E0 10',
            expected={
                'response'   : 'Positive',
                'dataLength': 1
            }
        )

    def test_003(self, name='Request more than one DID with at least one being supported and at least one being not supported - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F0 80 E0 10',
            expected={
                'response'   : 'Positive',
                'dataLength': 1
            }
        )

    def test_004(self, name='Request more than one DID with at least one being supported and at least one being not supported - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 80 F0 80',
            expected={
                'response'   : 'Positive',
                'dataLength': 4
            }
        )

    def test_005(self, name='Request more than one DID with at least one being supported and at least one being not supported - 4'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F0 80 F0 80',
            expected={
                'response'   : 'Positive',
                'dataLength': 4
            }
        )

    def test_006(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_007(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_008(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_009(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_010(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_011(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': 17 # F1 90 Data Length
            }
        )

    def test_012(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2 # F1 90 Data Length twice + DID Bytes (F1 90)
                                       # Response should be: 62 F1 90 *17 Bytes* F1 90 *17 Bytes*
            }
        )

    def test_013(self, name='Request a secured DID - Security Level 01 serviceProgrammingandConfiguration - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2
            }
        )

    def test_014(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_015(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_016(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_017(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_018(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': 17
            }
        )

    def test_019(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': 17
            }
        )

    def test_020(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2
            }
        )

    def test_021(self, name='Request a secured DID - Security Level 03 assemblyPlantProgrammingandConfiguration - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2
            }
        )

    def test_022(self, name='Request a secured DID - Security Level 09 Engineering - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_023(self, name='Request a secured DID - Security Level 09 Engineering - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_024(self, name='Request a secured DID - Security Level 09 Engineering - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_025(self, name='Request a secured DID - Security Level 09 Engineering - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_026(self, name='Request a secured DID - Security Level 09 Engineering - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': 17
            }
        )

    def test_027(self, name='Request a secured DID - Security Level 09 Engineering - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': 17
            }
        )

    def test_028(self, name='Request a secured DID - Security Level 09 Engineering - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2
            }
        )

    def test_029(self, name='Request a secured DID - Security Level 09 Engineering - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2
            }
        )

    def test_030(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_031(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_032(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_033(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_034(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': 17
            }
        )

    def test_035(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': 17
            }
        )

    def test_036(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2
            }
        )

    def test_037(self, name='Request a secured DID - Security Level 0B RemoteDiagnostics - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength': (17*2)+2
            }
        )

    def test_038(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_039(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_040(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_041(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_042(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_043(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_044(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_045(self, name='Request a secured DID - Security Level 0D SupplierSecurityAccess - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_046(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_047(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_048(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_049(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_050(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_051(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_052(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_053(self, name='Request a secured DID - Security Level 11 ExtendedReflash - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_054(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_055(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_056(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_057(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_058(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_059(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_060(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_061(self, name='Request a secured DID - Security Level 05 OverTheAirReflash - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_062(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_063(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_064(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_065(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_066(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_067(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_068(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_069(self, name='Request a secured DID - Security Level 13 ExtendedReflashAssemblyPlantProgrammingConfiguration - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_070(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 1'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_071(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response'   : 'No response'
            }
        )

    def test_072(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_073(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 4'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response'   : 'Positive'
            }
        )

    def test_074(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_075(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 6'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : 17
            }
        )

    def test_076(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_077(self, name='Request a secured DID - Security Level 15 ExtendedReflashOverTheAirReflash - 8'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 90 F1 90',
            expected={
                'response'   : 'Positive',
                'dataLength' : (17*2)+2
            }
        )

    def test_078(self, name='Pyrotechnic ECU Test'):
        pass

    def test_079(self, name='Pyrotechnic ECU Test'):
        pass

    def test_080(self, name='Pyrotechnic ECU Test'):
        pass

    def test_081(self, name='Pyrotechnic ECU Test'):
        pass

    def test_082(self, name='Pyrotechnic ECU Test'):
        pass

    def test_083(self, name='Pyrotechnic ECU Test'):
        pass