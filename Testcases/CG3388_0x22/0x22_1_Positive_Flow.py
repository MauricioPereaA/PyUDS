'''
Author : Manuel Medina
Modified by Mauricio Perea
High Level CG 3388 2019 Complete all test steps
05 March 2020 
27 May 2020 '

Modified by Ricardo Montes    17-Jun-20
Modified by Mauricio Perea
Date: 10-July-2020
It have been updated implemented the validation (00,FF)
Modified by: Mauricio Perea        Date: 30-Sep-20

This script is intended to validate positive response of service 0x22 which main function is request data record values from the server identified by one or more dataIdentifiers.

'''

            
from framework.shared_functions import read_supported_dids  
from framework.shared_functions import device_under_test       
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        ECU_without_TrnsEstGr_Prtctd_PDU = [
            'PTM',
            'TCP'
        ]

        self.rationality_off=0
        if device_under_test in ECU_without_TrnsEstGr_Prtctd_PDU:
            self.rationality_off=1  
        
        
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x22'
        )
        
       
        
        self.supported_dids = read_supported_dids
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'F0F0',  # ARB&PTM&MSM Boot
            'F0F1',  # ARB&PTM&MSM Boot
            'F0F2'   # ARB&PTM&MSM Boot
        ]
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='Service 0x22 - Positive Flow'):
        test.preconditions(
            step_info=info(),
            sbat=False, # Clear SBAT
            mec_zero=True
        )
        self.current_step = 0

        def step_preconditions():
            test.preconditions(
                current_step='test_%s'%str(self.current_step).rjust(3, '0'),
                functionalAddr=False
            )

        def step_preconditions_rationality_off():
            test.canoe.set_envVariable(TransmitInOFFInfinite=0)
            time.sleep(2)
            test.canoe.set_signal('TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 0)
        
        def step_preconditions_rationality_rcip():
            
            test.preconditions(                          
                signal=['RCIP_RrClsrMtnCtlParmEnblAuth','RrClsrInfo_Prtctd_PDU',1],
                envVariable={'TransmitInOFFInfinite':1}
                )
                
        def step_preconditions_rationality_pm_accesory():
            test.preconditions(
                power_mode='ACC'
                )
                
        def state_power_mode_off():
             test.preconditions(
                power_mode='OFF'
                )
                       
        def step_preconditions_rationality_park():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',1],
                envVariable={'TransmitInOFFInfinite':1}
                )
            
        def step_preconditions_rationality_reverse():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',2],
                envVariable={'TransmitInOFFInfinite':1}
            )
            

        def step_preconditions_rationality_neutral():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',3],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_a():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',4],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_b():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',5],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_c():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',6],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_d():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',7],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_e():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',8],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_f():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',9],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_g():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',10],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_h():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',11],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_i():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',12],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_j():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',13],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_unknown():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',14],
                envVariable={'TransmitInOFFInfinite':1}
            )


        def step_preconditions_tester_present():
            test.preconditions(
                current_step='test_%s'%str(self.current_step).rjust(3, '0'),
                functionalAddr=True
            )
        
        def extended_session():
            step_preconditions()
            test.step(
                step_title='Transition to Extended Session ',
                custom='10 03',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )

        def default_session():
            step_preconditions()
            test.step(
                step_title='Transition to default Session ',
                custom='10 01',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )
        
        def tester_present():
            step_preconditions_tester_present()
           
           
            test.step(
                step_title='Start Tester present',
                start_tester_present=True,
                expected = {
                    'response': 'No response'
                }
            )
              
        def enter_security_level(level):
            step_preconditions()
            test.step(
                step_title='Security Level %s - Req Seed'%level,
                request_seed=level,
                expected={
                    'response'            : 'Positive',
                    'dataLength'          : 31,
                    'unexpected_response' : True,
                    'partialData'         : ('00', 'FF')   
                }
            )

            self.current_step += 1
            step_preconditions()
            test.step(
                step_title='Security Level %s - Send Key'%level,
                send_key=level,
                expected={
                    'response' : 'Positive'
                }
            )
        
        def read_did(did):
            step_preconditions()
            test.step(
                step_title='Read DID %s'%did,
                custom='22 %s'%did,
                expected={
                    'response': 'Positive'
                }
            )
        
        for did in self.supported_dids.keys():
            
            if did in self.custom_exclutions:
                # Skip exclutions
                continue
            self.current_step = 0
            default_session()
            state_power_mode_off()
            
            if 'locked'in self.supported_dids[did]:
                
                if 'RATIONALITY' in self.supported_dids[did]:
                    if 'PARK' in self.supported_dids[did]:
                        step_preconditions_rationality_park()
                    
                    if 'REVERSE' in self.supported_dids[did]:
                        step_preconditions_rationality_reverse()
                    
                    if 'NEUTRAL' in self.supported_dids[did]:
                        step_preconditions_rationality_neutral()
                    
                    if 'FORWARD_A' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_a()
                    
                    if 'FORWARD_B' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_b()
                    
                    if 'FORWARD_C' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_c()
                    
                    if 'FORWARD_D' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_d()

                    if 'FORWARD_E' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_e()

                    if 'FORWARD_F' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_f()

                    if 'FORWARD_G' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_g()

                    if 'FORWARD_H' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_h()

                    if 'FORWARD_I' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_i()

                    if 'FORWARD_J' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_j()

                    if 'UNKNOWN' in self.supported_dids[did]:
                        step_preconditions_rationality_unknown()
                        
                    if 'RCIP' in self.supported_dids[did]:
                        step_preconditions_rationality_rcip()

                    if 'POWER_MODE_ACCESSORY' in self.supported_dids[did]:
                        step_preconditions_rationality_pm_accesory()                    
                        
                if 'DEFAULT' in self.supported_dids[did]:

                    self.current_step = 3
                    default_session()
                    
                    self.current_step = 4
                    read_did(did)

                if 'EXTENDED' in self.supported_dids[did]:
                    self.current_step = 5
                    extended_session()

                    self.current_step = 6
                    tester_present()

                    self.current_step = 7
                    read_did(did)
                    
                    if '01' in self.supported_dids[did]:
                        self.current_step = 8
                        enter_security_level('01')

                        self.current_step = 10
                        read_did(did)

                    if '03' in self.supported_dids[did]:
                        self.current_step = 11               
                        enter_security_level('03')

                        self.current_step = 13
                        read_did(did)
                    
                    if '05' in self.supported_dids[did]:
                        self.current_step = 14         
                        enter_security_level('05')

                        self.current_step = 16
                        read_did(did)
                    
                    if '09' in self.supported_dids[did]:
                        self.current_step = 17      
                        enter_security_level('09')

                        self.current_step = 19
                        read_did(did)

                    if '0B' in self.supported_dids[did]:
                        self.current_step = 20      
                        enter_security_level('0B')

                        self.current_step = 22
                        read_did(did)

                    if '0D' in self.supported_dids[did]:
                        self.current_step = 23  
                        enter_security_level('0D')

                        self.current_step = 25
                        read_did(did)
                    
                    if '11' in self.supported_dids[did]:
                        state_power_mode_off()              #11 only execute in off mode
                        self.current_step = 26
                        enter_security_level('11')

                        self.current_step = 28
                        read_did(did)

                    if '13' in self.supported_dids[did]:
                        state_power_mode_off()              #13 only execute in off mode
                        self.current_step = 29
                        enter_security_level('13')

                        self.current_step = 31
                        read_did(did)
                    
                    if '15' in self.supported_dids[did]:
                        state_power_mode_off()              #15 only execute in off mode
                        self.current_step = 32
                        enter_security_level('15')

                        self.current_step = 34
                        read_did(did)
                    
                    
                
                
                if self.rationality_off==0:
                   step_preconditions_rationality_off()
            
            if 'locked'not in self.supported_dids[did]:
                
                if 'RATIONALITY' in self.supported_dids[did]:

                    if 'PARK' in self.supported_dids[did]:
                        step_preconditions_rationality_park()
                    
                    if 'REVERSE' in self.supported_dids[did]:
                        step_preconditions_rationality_reverse()
                    
                    if 'NEUTRAL' in self.supported_dids[did]:
                        step_preconditions_rationality_neutral()
                    
                    if 'FORWARD_A' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_a()
                    
                    if 'FORWARD_B' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_b()
                    
                    if 'FORWARD_C' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_c()
                    
                    if 'FORWARD_D' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_d()

                    if 'FORWARD_E' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_e()

                    if 'FORWARD_F' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_f()

                    if 'FORWARD_G' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_g()

                    if 'FORWARD_H' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_h()

                    if 'FORWARD_I' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_i()

                    if 'FORWARD_J' in self.supported_dids[did]:
                        step_preconditions_rationality_forward_j()

                    if 'UNKNOWN' in self.supported_dids[did]:
                        step_preconditions_rationality_unknown()
                        
                    if 'RCIP' in self.supported_dids[did]:
                        step_preconditions_rationality_rcip()   

                    if 'POWER_MODE_ACCESSORY' in self.supported_dids[did]:
                        step_preconditions_rationality_pm_accesory()                              
                        
                if 'DEFAULT' in self.supported_dids[did]:

                    self.current_step = 3
                    default_session()
                    
                    self.current_step = 4
                    read_did(did)
                
                if 'EXTENDED' in self.supported_dids[did]:
                    self.current_step = 5
                    extended_session()

                    self.current_step = 6
                    tester_present()
            
                    if '01' in self.supported_dids[did]:
                        self.current_step = 8
                        enter_security_level('01')

                        self.current_step = 10
                        read_did(did)

                    if '03' in self.supported_dids[did]:
                        self.current_step = 11               
                        enter_security_level('03')

                        self.current_step = 13
                        read_did(did)
                    
                    if '05' in self.supported_dids[did]:
                        self.current_step = 14         
                        enter_security_level('05')

                        self.current_step = 16
                        read_did(did)
                    
                    if '09' in self.supported_dids[did]:
                        self.current_step = 17      
                        enter_security_level('09')

                        self.current_step = 19
                        read_did(did)

                    if '0B' in self.supported_dids[did]:
                        self.current_step = 20      
                        enter_security_level('0B')

                        self.current_step = 22
                        read_did(did)

                    if '0D' in self.supported_dids[did]:
                        self.current_step = 23  
                        enter_security_level('0D')

                        self.current_step = 25
                        read_did(did)
                    
                    if '11' in self.supported_dids[did]:
                        state_power_mode_off()              #11 only execute in off mode
                        self.current_step = 26 
                        enter_security_level('11')

                        self.current_step = 28
                        read_did(did)

                    if '13' in self.supported_dids[did]:
                        state_power_mode_off()              #13 only execute in off mode
                        self.current_step = 29
                        enter_security_level('13')

                        self.current_step = 31
                        read_did(did)
                    
                    if '15' in self.supported_dids[did]:
                        state_power_mode_off()              #15 only execute in off mode
                        self.current_step = 32
                        enter_security_level('15')

                        self.current_step = 34
                        read_did(did)
                
                
                
                if self.rationality_off==0:
                   step_preconditions_rationality_off()
                
    
    def test_035(self, name='Pyrotechnic ECU Test'):
        pass

    def test_036(self, name='Pyrotechnic ECU Test'):
        pass

    def test_037(self, name='Pyrotechnic ECU Test'):
        pass

    def test_038(self, name='Pyrotechnic ECU Test'):
        pass
    
    def test_039(self, name='Pyrotechnic ECU Test'):
        pass
    
    
    def test_040(self, name='<Transition Server to defaultSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',

            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    
    def test_041(self, name='Read Data By Identifier - Multiple DIDs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 80 F1 A0',

            expected={
                'response': 'Positive',
                'dataLength': 4
            }
        )
    
    def test_042(self, name='Read Data By Identifier - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F0 80',

            expected={
                'response': 'Positive',
                'dataLength': 1
            }
        )
    
    def test_043(self, name='Read Data By Identifier - Multiple DIDs Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F0 80 F1 A0',

            expected={
                'response': 'Positive',
                'dataLength': 4
            }
        )
