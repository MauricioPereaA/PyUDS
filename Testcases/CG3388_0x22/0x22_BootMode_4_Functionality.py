
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 5-Nov-20
from framework.shared_functions import tools, device_under_test        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x22'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Request more than one DID with one  supported and one not - Physical'):
        # Begin -- Boot Mode preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            extended_session_control= True,
            start_tester_present= True,
            dtc_settings = False,
            communication_control= False,

            expected={
                'response'   : 'Positive'
            }
        )
        test.preconditions(current_step='test_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            request_seed='01',
            send_key='01'
        )
        test.step(
            step_title=name,
            custom='10 02'
        )
        # End -- Boot Mode preconditions
        if device_under_test in ['PTM','ARB']:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F0 FF',
                expected={
                    'response': 'Positive',
                    'dataLength': 4
                }
            )
        else:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F0 FF',
                expected={
                    'response': 'Positive',
                    'dataLength': 8         #4-->8
                }
            )


    def test_002(self, name='Request more than one DID with one  supported and one not - Functional'):
        if device_under_test  in ['PTM','ARB']: 
            test.preconditions(
                step_info=info(),
                functionalAddr=True
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F2 45',
                expected={
                    'response': 'Positive',
                    'dataLength': 4
                }
            )            
        else:
            test.preconditions(
                step_info=info(),
                functionalAddr=True
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F2 45',
                expected={
                    'response': 'Positive',
                    'dataLength': 8         #4-->8
                }
            )

    def test_003(self, name='Request same DID - Physical'):
        if device_under_test  in ['PTM','ARB']:         
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F0 F0',
                expected={
                    'response': 'Positive',
                    'dataLength': (4*2)+2
                }
            )
        else:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F0 F0',
                expected={
                    'response': 'Positive',
                    'dataLength': 8   #(4*2)+2-->8
                }
            )

    def test_004(self, name='Request same DID - Functional'):
        if device_under_test  in ['PTM','ARB']:         
            test.preconditions(
                step_info=info(),
                functionalAddr=True
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F0 F0',
                expected={
                    'response': 'Positive',
                    'dataLength': (4*2)+2
                }
            )
        else:
            test.preconditions(
                step_info=info(),
                functionalAddr=True
            )
            test.step(
                step_title=name,
                custom='22 F0 F0 F0 F0',
                expected={
                    'response': 'Positive',
                    'dataLength': 8      #(4*2)+2-->8
                }
            )

    def test_005(self, name='Request a secured DID - Single DID - Physical'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 81',

            expected={
                'response' : 'Positive'
            }
        )

    def test_006(self, name='Request a secured DID - Single DID - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 81',

            expected={
                'response' : 'Positive'
            }
        )

    def test_007(self, name='Request a secured DID - Two DID - Physical'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 81 F0 F6',

            expected={
                'response' : 'Positive'
            }
        )

    def test_008(self, name='Request a secured DID - Two DID - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='22 F1 81 F0 F6',

            expected={
                'response' : 'Positive'
            }
        )