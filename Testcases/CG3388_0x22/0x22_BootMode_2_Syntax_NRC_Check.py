
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x22'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='busyRepeatRequest - 0x21'):
        # Begin -- Boot Mode preconditions
        test.preconditions(current_step='BootMode_Precondition')
        test.step(
            step_title='BootMode Precondition',
            extended_session_control=True,
            dtc_settings=False,
            communication_control=False,
            request_seed='01',
            send_key='01'
        )
        
        test.step(
            step_title = 'Boot_Mode',
            custom = '10 02'
        )
        # End -- Boot Mode preconditions

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='22',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_002(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_DataLenghtExceeded_Physical'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 F0 F0 F1 F0 F2 F0 F3 F0 F4 F0 F6 F1 80 F1 81 F1 82 F1 B0 F1 CB F1 CC F1 DB F1 DC F0 F0 F0 F0 F0 F0',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_003(self, name='securityAccessDenied - 0x33'):
        print(__name__, "There's no DID that can achieve purpose of the test!", "Step 003 skipped")
        pass
    def test_004(self, name='securityAccessDenied - 0x33'):
        print(__name__, "There's no DID that can achieve purpose of the test!", "Step 004 skipped")
        pass

    def test_005(self, name='requestOutOfRange - 0x31_UnsopportedDataId'):
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            custom='22 00 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_006(self, name='requestOutOfRange - 0x31_TwoUnsopportedDataId'):
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            custom='22 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_007(self, name='requestOutOfRange - 0x31_NotSupportedInCurrentSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 A0',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_008(self, name='requestOutOfRange - 0x31_DIDNotYetBeenAssigned'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_010(self, name='responseTooLong - 0x14_Physical'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4 F0 F4',
            expected={
                'response': 'Negative',
                'data': '14'
            }
        )

