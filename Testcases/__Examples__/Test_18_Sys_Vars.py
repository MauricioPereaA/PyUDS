
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False,
            step_delay=0.005
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Test System Vars'):
    
        #Test Integer Variable
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='IntegerVar'
        )
        
        print('Integer Var Value: Expected = 0 and Result = ' + str(sysvar))

        test.canoe.set_system_variable(
            namespace='Demo',
            variable='IntegerVar',
            value=12
        )
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='IntegerVar'
        )
        
        print('Integer Var Value: Expected = 12 and Result = ' + str(sysvar))
        
        test.canoe.set_system_variable(
            namespace='Demo',
            variable='IntegerVar',
            value=0
        )
        
        #Test Float Variable
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='FloatVar'
        )
        
        print('Float Var Value: Expected = 0.0 and Result = ' + str(sysvar))

        test.canoe.set_system_variable(
            namespace='Demo',
            variable='FloatVar',
            value=134.15
        )
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='FloatVar'
        )
        
        print('Float Var Value: Expected = 134.15 and Result = ' + str(sysvar))
        
        test.canoe.set_system_variable(
            namespace='Demo',
            variable='FloatVar',
            value=0
        )
        
        #Test Integer Array Variable
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='IntegerArrVar'
        )
        
        print('Integer Array Value: Expected = [0, 0, 0] and Result = [%s]' % ', '.join(map(str, sysvar)))

        test.canoe.set_system_variable(
            namespace='Demo',
            variable='IntegerArrVar',
            value=[10,7,2]
        )
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='IntegerArrVar'
        )
        
        print('Integer Array Value: Expected = [10, 7, 2] and Result = [%s]' % ', '.join(map(str, sysvar)))
        
        test.canoe.set_system_variable(
            namespace='Demo',
            variable='FloatVar',
            value=[0,0,0]
        )
        
        #Test Float Array Variable
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='FloatArrVar'
        )
        
        print('Float Array Value: Expected = [0.0, 0.0, 0.0] and Result = [%s]' % ', '.join(map(str, sysvar)))

        test.canoe.set_system_variable(
            namespace='Demo',
            variable='FloatArrVar',
            value=[45.67,98.5,1.23]
        )
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='FloatArrVar'
        )
        
        print('Float Array Value: Expected = [45.67, 98.5, 1.23] and Result = [%s]' % ', '.join(map(str, sysvar)))
        
        test.canoe.set_system_variable(
            namespace='Demo',
            variable='FloatVar',
            value=[0,0,0]
        )
        
        #Test Long Variable
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='LongVar'
        )
        
        print('Long Var Value: Expected = 0.0 and Result = ' + str(sysvar))

        test.canoe.set_system_variable(
            namespace='Demo',
            variable='LongVar',
            value=62345
        )
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='LongVar'
        )
        
        print('Long Var Value: Expected = 62345.0 and Result = ' + str(sysvar))
        
        test.canoe.set_system_variable(
            namespace='Demo',
            variable='LongVar',
            value=0
        )
        
        #Test String Variable
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='StringVar'
        )
        
        print('String Var Value: Expected = and Result = ' + str(sysvar))

        test.canoe.set_system_variable(
            namespace='Demo',
            variable='StringVar',
            value='pyUDS On Fire'
        )
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='StringVar'
        )
        
        print('String Var Value: Expected = pyUDS On Fire and Result = ' + str(sysvar))
        
        test.canoe.set_system_variable(
            namespace='Demo',
            variable='StringVar',
            value=''
        )
        
        #Test Byte Array Variable
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='ByteArrVar'
        )
        
        print('Integer Array Value: Expected = [0, 0, 0] and Result = [%s]' % ', '.join(map(str, sysvar)))

        test.canoe.set_system_variable(
            namespace='Demo',
            variable='ByteArrVar',
            value=[255,8,345]
        )
        
        sysvar = test.canoe.get_system_variable(
            namespace='Demo',
            variable='ByteArrVar'
        )
        
        print('Integer Array Value: Expected = [10, 7, 2] and Result = [%s]' % ', '.join(map(str, sysvar)))
        
        test.canoe.set_system_variable(
            namespace='Demo',
            variable='ByteArrVar',
            value=[0,0,0]
        )
