
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False,
            step_delay=2    # 2 seconds delay after Diagnostic Request
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Transition to extendedSession, Application Mode'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            extended_session_control=True,
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_002(self, name='Request seed - Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_003(self, name='Send key - Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )
    def test_005(self, name='Start routine - Prpl Sys FALSE'):
        test.preconditions(
            step_info=info(),
            signal=[                
                'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0
            ]
        )
        test.step(
            step_title=name,
            custom='31 01 02 00 02000000000000000000000000000000551BAFA3B95A64DF9B40B8FD17A47433E1C944E918F22054B9E6B065A83E73283EC4F4B2F370F74352FFBDB683BE82DB49',
            expected={
                'response': 'Positive'
            }
        )

    def test_004(self, name='Start routine - Prpl Sys TRUE'):
        test.preconditions(
            step_info=info(),
            signal=[                
                'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1
            ]
        )
        test.step(
            step_title=name,
            custom='31 01 02 00 02000000000000000000000000000000551BAFA3B95A64DF9B40B8FD17A47433E1C944E918F22054B9E6B065A83E73283EC4F4B2F370F74352FFBDB683BE82DB49',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

#    def test_006(self, name='Start routine - Prpl Sys FALSE'):
#        test.preconditions(
#            step_info=info(),
#            signal=[                
#                'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0
#            ]
#        )
#        test.step(
#            step_title=name,
#            custom='31 01 02 00 02000000000000000000000000000000551BAFA3B95A64DF9B40B8FD17A47433E1C944E918F22054B9E6B065A83E73283EC4F4B2F370F74352FFBDB683BE82DB49',
#            expected={
#                'response': 'Positive'
#            }
#        )

