
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from Testcases.TestClass import TestCase
from framework.shared_libs.thread_timesync import cmd_Thread
from framework.shared_functions import tools, device_under_test
from inspect import stack as info
import unittest, time, os

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='Send 0x2A - Rate 01'):
        test.preconditions(
            step_info=info(),
            mec_zero=False
        )
        test.step(step_title='extendedSession',   
                    extended_session_control=True,
                    start_tester_present=True)
        test.step(
            step_title=name,
            # 0x2A function
            read_periodic_data_id=dict(
                DDDID='45', rate='01'),

            expected={
                # Response type expected
                'response' : 'Positive',

                # 0x2A Expected parameters
                'periodic_rate' : '01'

                # Supported rates: 
                #   01 => 1s
                #   02 => 200ms
                #   03 => 25ms
            }
        )

    def test_002(self, name='Stop send specifig periodic messages - 04'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            # 0x2A function
            stop_periodic_data='45',

            expected={
                # Response type expected
                'response' : 'Positive'
            }
        )

    def test_003(self, name='Send 0x2A - Rate 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            # 0x2A function
            read_periodic_data_id=dict(
                DDDID='46', rate='02'),
            # Supported rates: 
                #   01 => 1s
                #   02 => 200ms
                #   03 => 25ms

            expected={
                # Response type expected
                'response' : 'Positive',

                # 0x2A - Validate periodic DDDID rate & data
                'periodic_rate' : '02',
                'periodic_data' : '00 00 00 00 00 00 00'
            }  
        )
    
    def test_004(self, name='Stop send all periodic messages - 04'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            # 0x2A function
            stop_periodic_data=True,

            expected={
                # Response type expected
                'response' : 'Positive'
            }
        )