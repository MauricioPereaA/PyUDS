
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='read DID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 80',
            expected={
                'response': 'Positive',
                'data': '00',
                'dataLength': '1'
            }
        )

    def test_003(self, name='Access security Lvl 01 - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_004(self, name='Access security Lvl 01 - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='write SBAT'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

