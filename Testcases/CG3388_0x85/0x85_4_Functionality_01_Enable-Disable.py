
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, random, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x85'
        )
        
        self.protected_message_1 = list(pn_dict[device_under_test]['protected_messages'].keys())[0]
        self.protected_message_2 = list(pn_dict[device_under_test]['protected_messages'].keys())[1]

        # = DTCs to verify =
        self.DTC_1 = pn_dict[device_under_test]['protected_messages'][self.protected_message_1]['DTC']
        print(self.DTC_1)
        self.DTC_2 = pn_dict[device_under_test]['protected_messages'][self.protected_message_2]['DTC']
        print(self.DTC_2)
        
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='extendedSession'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='tester present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            default_session_control=True,#add
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'#No Response-->Positive
            }
        )

    def test_005(self, name='<Verify No DTCs are set>'):
        test.preconditions(
            step_info=info(),
            extended_session_control=True #add
        )
        test.step(
            step_title=name,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )

    def test_008(self, name='<Verify DTC is set>'):
        test.preconditions(
            step_info=info()
        )
        # Set DTC conditions
        print(self.protected_message_1)
        test.canoe.set_envVariable(**dict({self.protected_message_1:1}))
        tools.timer.input('Wait for ', timeout=10)#6-->10
        test.step(
            step_title=name,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'partialData': self.DTC_1
            }
        )
        # Remove DTC Conditions
        test.canoe.set_envVariable(**dict({self.protected_message_1:0}))

    def test_010(self, name='<Disable DTCs>'):
        print('Stop updating DTCs')
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 02',
            expected={
                'response': 'Positive'
            }
        )

    def test_012(self, name='Create Failure conditions DTC2 - <Read DTCs>'):
        test.preconditions(
            step_info=info()
        )
        # Set DTC2 conditions
        if device_under_test in 'ARB':
            test.set_dtc_condition(underVoltage=True)
            test.canoe.set_envVariable(underVoltageCondition=1)
            time.sleep(6)
            
            test.step(
                step_title=name,
                custom='19 02 01',
                expected={
                    'response': 'Positive',
                    'unexpected_response': True, # DTC 2 should not be in Response
                    'partialData': 'F0 03 16'
                }
            )

        else:    
            print(self.protected_message_2)
            test.canoe.set_envVariable(**dict({self.protected_message_2:1}))
            tools.timer.input('Wait for ', timeout=10)#6-->10

            test.step(
                step_title=name,
                custom='19 02 01',
                expected={
                    'response': 'Positive',
                    'unexpected_response': True, # DTC 2 should not be in Response
                    'partialData': self.DTC_2
                }
            )

    def test_014(self, name='<Enable DTCs>'):
        print(__name__, '-- Resume updating DTCs --')
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_015(self, name='<Verify appropriate DTCs are set> - DTC2'):
        time.sleep(10)
        test.preconditions(
            step_info=info()
        )
        
        if device_under_test in 'ARB':
            # Verify DTC 2 is set
            test.step(
                step_title=name,
                custom='19 02 01',
                expected={
                    'response': 'Positive',       # DTC 2 should be set
                    'partialData': 'F0 03 16 2F'
                }
            )
            # Remove DTC Conditions
            test.power_supply_reset_default()
            test.canoe.set_envVariable(underVoltageCondition=0)      
        else:
            # Verify DTC 2 is set
            test.step(
                step_title=name,
                custom='19 02 01',
                expected={
                    'response': 'Positive',       # DTC 2 should be set
                    'partialData': self.DTC_2
                }
            )
            # Remove DTC Conditions
            test.canoe.set_envVariable(**dict({self.protected_message_2:0}))