
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x85'
        )
        self.s3_timeout = 5 + 0.1 # S3 timeout + 100 msec
#         Add by YCC
        tools.popup.info(title='CAPL Implementation',
            description='Make sure you are running this test on PyUDS modified RBS'+\
                ' with CAPL implementation for Lost Communication DTCs.')
        
        ''' Device Under Test - Settings '''     # edit by YCC
#         self.protected_message = random.choice(     # Pick random message to be tested
#             list(pn_dict[device_under_test]['protected_messages'].keys())
#         )
        self.protected_message = list(pn_dict[device_under_test]['protected_messages'].keys())[1]
         
        # = DTCs to verify =
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']
        print(self.DTC)

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_017(self, name='extendedSession'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_018(self, name='tester present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_019(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            default_session_control=True,#add

        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_021(self, name='Read DTCs'):
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            extended_session_control=True #add
        )
        test.step(
            step_title=name,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )

    def test_022(self, name='Disable DTCs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 02',
            expected={
                'response': 'Positive'
            }
        )

    def test_024(self, name='Create failure'):
        test.preconditions(
            step_info=info()
        )
        # Set DTC Conditions
        print(self.protected_message)
        test.canoe.set_envVariable(**dict({self.protected_message:1}))
        #time.sleep(6)
        tools.timer.input('Wait for ', timeout=2)#add		
        test.step(
            step_title=name,
            dtc_settings=False,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'unexpected_response': True, # DTC below should not be in Response
                'partialData': self.DTC
            }
        )
        tools.timer.input('Keep the extendedSession alive for 2 minutes', timeout=120)

    def test_026(self, name='stop tester present'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Stop periodically transmitted TesterPresent and wait for S3 Timeout + '+\
            '100 msec, 5.1 seconds, for the Session Timing parameter to timeout', timeout=self.s3_timeout)

    def test_027(self, name='<Verify that the apprpriate DTC is set after Server transitioned back to defaultSession>'):
        #time.sleep(10) 
        tools.timer.input('Wait for ', timeout=10)   #add		       
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'partialData': self.DTC
            }
        )
        # Remove DTC Conditions     ---Add by YCC
        test.canoe.set_envVariable(**dict({self.protected_message:0}))

