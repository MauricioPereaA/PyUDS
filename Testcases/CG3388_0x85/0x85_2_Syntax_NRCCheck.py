
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
from framework.shared_functions import device_under_test        
from framework.shared_functions import tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x85'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()



    def test_001(self, name='serviceNotSupportedInActiveSession - 0x7F (defaultSession)'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_003(self, name='serviceNotSupportedInActiveSession - 0x7F (defaultSession)_Pyrotechnic'):
        # test.preconditions(
        #     step_info=info()
        # )
        # test.step(
        #     step_title=name,
        #     custom=''
        # )
        pass

    def test_004(self, name='serviceNotSupportedInActiveSession - 0x7F (safetySystemDiagnosticSession)_Pyrotechnic'):
        # test.preconditions(
        #     step_info=info()
        # )
        # test.step(
        #     step_title=name,
        #     custom=''
        # )
        pass

    def test_005(self, name='<Transition Server to defaultSession> '):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_007(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
    '''
    def test_008(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_009(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_2'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 01 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_010(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 02 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    '''
    def test_009(self, name='conditionsNotCorrect - 0x22_1'):
        if device_under_test in ['MSM','PTM','ARB']:
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.set_dtc_condition(overVoltage=True)
        test.step(
            step_title=name,
            custom='85 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_010(self, name='conditionsNotCorrect - 0x22_2'):
        if device_under_test in ['MSM','PTM','ARB']:
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 02',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
        test.power_supply_reset_default()

