
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test, tools, pn_dict        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x85'
        )
#         Add by YCC
        tools.popup.info(title='CAPL Implementation',
            description='Make sure you are running this test on PyUDS modified RBS'+\
                ' with CAPL implementation for Lost Communication DTCs.')
        
        ''' Device Under Test - Settings '''     # Edity by YCC
#         self.protected_message = random.choice(     # Pick random message to be tested
#             list(pn_dict[device_under_test]['protected_messages'].keys())
#         )
#         self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']


        self.protected_message = list(pn_dict[device_under_test]['protected_messages'].keys())[1]
         
        # = DTCs to verify =
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']
        print(self.DTC)     


    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_028(self, name='extendedSession'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_029(self, name='tester present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_030(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            default_session_control=True#add
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_032(self, name='Read DTCs'):
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            extended_session_control=True #add
        )
        test.step(
            step_title=name,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )

    def test_033(self, name='Disable DTCs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 02',
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Wait for ', timeout=10)

    def test_035(self, name='Create failure conditions - DTC should not be set'):
        test.preconditions(
            step_info=info()
        )
        # Set DTC Conditions
        test.canoe.set_envVariable(**dict({self.protected_message:1}))
        #time.sleep(6)
        tools.timer.input('Wait for ', timeout=6)
        test.step(
            step_title=name,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'unexpected_response': True, # DTC below should not be in Response
                'partialData': self.DTC
            }
        )

    def test_036(self, name='transition from Extended to Extended'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Wait for ', timeout=10)

    def test_037(self, name='Verify DTC is not set'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 01',
            expected={
                'response': 'Positive',
                'unexpected_response': True, # DTC below should not be in Response
                'partialData': self.DTC
            }
        )
        # Remove failure condition #delete
        # Remove DTC Conditions   -----Add by YCC
        test.canoe.set_envVariable(**dict({self.protected_message:0}))
