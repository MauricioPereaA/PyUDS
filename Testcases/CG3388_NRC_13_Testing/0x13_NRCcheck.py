
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
 #Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, write_supported_dids, supported_io_dids, supported_rids 
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='NRC 13 Testing'
        )
      
    @classmethod  #类方法
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    #service 0x10
    def test_001(self, name='incorrectMessageLengthOrInvalidFormat - 0x13'):
    
        test.preconditions(
            step_info=info()
        )
        
        test.step(
            step_title='Extended session',
            extended_session_control=True            
        )    
        
        test.preconditions(
            step_info=info(),

        )
        test.step(
            step_title=name,
            custom='10',
            expected={
                'response': 'Negative',
                'data'    : '13'
            }
        )

    def test_002(self, name='incorrectMessageLengthOrInvalidFormat - 0x13'):
        test.preconditions(
            step_info=info()
        )
        
        test.step(
            step_title='Extended session',
            extended_session_control=True            
        )            
        
        test.step(
            step_title=name,
            custom='10 01 00',
            expected={
                'response': 'Negative',
                'data'    : '13'
            }
        )
    #service 0x11
    def test_003(self, name='incorrectMessageLengthOrInvalidFormat - ox11'):
        test.preconditions(
            step_info=info()
        )
        
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            extended_session_control=True            
        )            
        
        test.step(
            step_title=name,
            custom='11',
            expected={
                'response': 'Negative',
                'data'    : '13'
            }
        )
    def test_004(self, name='incorrectMessageLengthOrInvalidFormat - 0x11'):
        test.preconditions(
            step_info=info()
        )
        
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            extended_session_control=True            
        ) 
        
        test.step(
            step_title=name,
            custom='11 01 00',
            expected={
                'response': 'Negative',
                'data'    : '13'
            }
        )
    #service 0x27
    def test_005(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- min'):
        test.preconditions(
            step_info=info()
        )
        
        test.step(
            step_title='Extended session',        
            extended_session_control=True            
        ) 
        
        test.step(
            step_title=name,
            custom='27',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_006(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 01 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_007(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            custom='27 02 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_008(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 03 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_009(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            custom='27 04 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_010(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 05 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_011(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            custom='27 06 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_012(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 9'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 09 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_013(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 9'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            custom='27 0A FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_014(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0B FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_015(self, name='while Seed is active for the requested securityAccessType - Sec Lvl B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            custom='27 0C FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_016(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0D FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_017(self, name='while Seed is active for the requested securityAccessType - Sec Lvl D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            custom='27 0E FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_019(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 11'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='27 11 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_020(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            custom='27 12 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_021(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 13 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_022(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            custom='27 14 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_023(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 15 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_024(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            custom='27 16 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
        
    #service 0x28

    def test_025(self, name='incorrectMessageLengthOrInvalidFormat'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            extended_session_control=True            
        ) 
        
        test.step(
            step_title=name,
            custom='28',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_026(self, name='incorrectMessageLengthOrInvalidFormat_2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='28 00 01 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_027(self, name='incorrectMessageLengthOrInvalidFormat_3'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            custom='28 03 01 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    #service 0x3E
    def test_028(self, name='transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            extended_session_control=True            
        )         
        test.step(
            step_title=name,
            custom='3E',
            expected={
                'response': 'Negative',
                'data'    : '13'
            }
        )

    def test_029(self, name='transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='3E 00 00',
            expected={
                'response': 'Negative',
                'data'    : '13'
            }
        )
    #service 0x85
    def test_030(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            extended_session_control=True            
        )         
        test.step(
            step_title=name,
            custom='85',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_031(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_2'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 01 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_032(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 02 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    #0x86
    def test_033(self, name='serviceNotSupportedInActiveSession - ox86'):
        
        pass
    def test_034(self, name='serviceNotSupportedInActiveSession - 0x86'):
        
        pass
    def test_035(self, name='serviceNotSupportedInActiveSession - ox86'):
        
        pass
    def test_036(self, name='serviceNotSupportedInActiveSession - 0x86'):
        
        pass
    #0x22
    def test_037(self, name='NRC_13_test by just sending service 22'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            default_session_control=True,
            custom='22',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    
    def test_038(self, name='NRC_13_test by exceeding the maximum number of valid DIDs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80 F0 80',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    #0x23
    def test_039(self, name='serviceNotSupportedInActiveSession - ox23'):
        
        pass
    def test_040(self, name='serviceNotSupportedInActiveSession - 0x23'):
        
        pass
    def test_041(self, name='serviceNotSupportedInActiveSession - ox23'):
        
        pass
    #0x2A

    def test_042(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- Min'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            extended_session_control=True            
        )         
        test.step(
            step_title=name,
            custom='2A',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_043(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- Min SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    def test_044(self, name='NRC 0x13 - 17 periodicDataIdentifiers -- SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF FF',
            expected={
                'response': 'Negative',
                'data'    : '13',
                'data_2'  : '31'
            }
        )
    #0x2C
    def test_045(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            extended_session_control=True            
        )         
        test.step(
            step_title=name,
            custom='2C',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    def test_046(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF 50 03 01',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    def test_047(self, name='incorrectMessageLengthOrInvalidFormat -0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='Extended session',
            start_tester_present=True,            
            default_session_control=True            
        )         
        test.step(
            step_title=name,
#             custom='2C 03 F2 FF 50',
            custom='2C 03 F2',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    def test_048(self, name='on-hold'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control = True,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_049(self, name='on-hold'):
        test.preconditions(
        step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_050(self, name='on-hold'):
        unsupported_ecu = ['MSM','PTM', 'ARB']                                          #add
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    def test_051(self, name='on-hold'):
        unsupported_ecu = ['MSM','PTM', 'ARB']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 02 00 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    #0x2E
    def test_052(self, name='incorrectMessageLengthOrInvalidFormat - 0x13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    
    def test_053(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_054(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_1'):    
    
        self.supported_dids = write_supported_dids 
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'EXAMPLE_1', # This can be replaced
            'EXAMPLE_2'  # This can be replaced
        ]          
        for did in self.supported_dids.keys():
            if did in self.custom_exclutions:
                # Skip exclutions
                continue
            test.preconditions(
                step_info=info()
            )           
            test.step(
                default_session_control=True,
                step_title='write DID %s'%did,
                custom='2E {}'.format(did),
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
                
    def test_055(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_2'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F0 F4',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
        
    def test_056(self, name='incorrectMessageLengthOrInvalidFormat - 0x13_1'):    
    
        self.supported_dids = write_supported_dids   
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'EXAMPLE_1', # This can be replaced
            'EXAMPLE_2'  # This can be replaced
        ]          
        for did in self.supported_dids.keys():
            data = self.supported_dids[did][1]
            if did in self.custom_exclutions:
                # Skip exclutions
                continue
            test.preconditions(
                step_info=info()
            )          
            test.step(
                default_session_control=True,
                step_title='write DID %s'%did,
                custom='2E {} {} FF'.format(did, data),
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            ) 
        
    #0x14
    def test_057(self, name='incorrectMessageLengthOrInvalidFormat - Service ID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_058(self, name='incorrectMessageLengthOrInvalidFormat -  FF FF FF FF'):
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    #0x19
    def test_059(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- min'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_060(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- min SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 01',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_061(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 01 FF FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_062(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- min SF 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_063(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 FF FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_064(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 03'):

        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 03 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_065(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 04'):
        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 04 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )


    def test_066(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- min_4 SF 06'):
        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 06 FF FF FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_067(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- min_4 SF 06'):
        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 06 FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_068(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 0A'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 0A FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_069(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- MIN SF 13'):
        print('Subfunction not supported for %s'%device_under_test)
        return 0

        # == THIS IS - PLACE HOLDER - ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT SUPPORTED'
        )

    def test_070(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 13'):
        print('Subfunction not supported for %s'%device_under_test)
        return 0

        # == THIS IS - PLACE HOLDER - ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT SUPPORTED'
        )

    def test_071(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 14'):
        if device_under_test in ['MSM']:    
            print('Subfunction not supported for %s'%device_under_test)
            return 0
    
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 14 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_072(self, name='IncorrectMessageLengthOrInvalidFormat - 0x13 -- max SF 15'):
        if device_under_test in ['MSM','ARB']:
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0

        # == THIS IS - PLACE HOLDER - ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT SUPPORTED'
        )
    #0x2F
    def test_073(self, name='serviceNotSupportedInActiveSession - ox2F'):
        if device_under_test in ['ARB']:    
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title='Extended session',
                start_tester_present=True,            
                extended_session_control=True            
            )            
            test.step(
                step_title=name,
                custom='2F',
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
        else: pass
    def test_074(self, name='serviceNotSupportedInActiveSession - 0x2F'):
        if device_under_test in ['ARB']:    
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='2F 4B 5C 03',
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
        else: pass
        
    def test_075(self, name='serviceNotSupportedInActiveSession - ox2F'):
    
        self.supported_dids = supported_io_dids
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'EXAMPLE_1', # This can be replaced
            'EXAMPLE_2'  # This can be replaced
        ]  
        for did in self.supported_dids.keys():       
            if did in self.custom_exclutions:
                # Skip exclutions
                continue
            test.preconditions(
                step_info=info(),
                start_tester_present=True,            
                extended_session_control=True   
            )          
            test.step(
                step_title='write 2F %s'%did,
                custom='2F {} 03'.format(did),
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
        
    def test_076(self, name='serviceNotSupportedInActiveSession - ox2F'):
        if device_under_test in ['ARB']:    
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='2F 4B 5C 03 06 FF',
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
        else: pass
        
    def test_077(self, name='serviceNotSupportedInActiveSession - 0x2F'):
    
        self.supported_dids = supported_io_dids
        
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'EXAMPLE_1', # This can be replaced
            'EXAMPLE_2'  # This can be replaced
        ]  
        for did in self.supported_dids.keys():
            data = self.supported_dids[did][1]        
            if did in self.custom_exclutions:
                # Skip exclutions
                continue
            test.preconditions(
                step_info=info(),
                start_tester_present=True,            
                extended_session_control=True   
            )          
            test.step(
                step_title='write 2F %s'%did,
                custom='2F {} 03 {} FF'.format(did, data),
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
            
    def test_078(self, name='serviceNotSupportedInActiveSession - ox2F'):
        if device_under_test in ['ARB']:    
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='2F 4B 5C 00 06 FF',
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
        else: pass
        
    def test_079(self, name='serviceNotSupportedInActiveSession - ox2F'):
    
        self.supported_dids = supported_io_dids
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'EXAMPLE_1', # This can be replaced
            'EXAMPLE_2'  # This can be replaced
        ] 
        for did in self.supported_dids.keys():        
            if did in self.custom_exclutions:
                # Skip exclutions
                continue
            test.preconditions(
                step_info=info(),
                start_tester_present=True,            
                extended_session_control=True   
            )            
            test.step(
                step_title='write 2F %s'%did,
                custom='2F {} 00 FF'.format(did),
                expected={
                    'response': 'Negative',
                    'data': '13'
                }
            )
            
    #0x31
    def test_080(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (minimum length check) -- 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_081(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (minimum length check) -- 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
        
    def test_082(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (minimum length check) -- 3'):        
        self.supported_rids = supported_rids  
        
        def enter_security_level(level):
            test.preconditions(
                step_info=info()           
            ) 
            test.step(
                step_title='Security Level %s - Req Seed'%level,
                request_seed=level,
                expected={
                    'response'            : 'Positive',
                    'dataLength'          : 31
                }
            )

            test.preconditions(
                step_info=info()            
            )
            test.step(
                step_title='Security Level %s - Send Key'%level,
                send_key=level,
                expected={
                    'response' : 'Positive'
                }
            )  
            
        for rid in self.supported_rids.keys():
            data = self.supported_rids[rid][1]
            test.preconditions(
                step_info=info()            
            )
            
            test.step(
                step_title='Preconditions',
                default_session_control=True,                 
                start_tester_present=True,                
                extended_session_control=True 
            )            
            
            
            if '03' in self.supported_rids[rid][0]:
                enter_security_level('03')
            elif '0B' in self.supported_rids[rid][0]:
                enter_security_level('0B')
            elif '0D' in self.supported_rids[rid][0]:
                enter_security_level('0D')
               
            if 'PROGRAMMING' in self.supported_rids[rid][0]:
            
                test.step(
                    step_title='bootMode Precondition',
                    dtc_settings = False,
                    communication_control= False,
                    custom= '10 02',
                    expected={
                        'response'   : 'Positive'
                    }                   
                )
                
            test.step(
                step_title='Read rid %s'%rid,
                   
                custom='31 01 {} {} FF'.format(rid, data),
                expected={
                    'response':  'Negative',
                    'data': '13'
                }
            )
            
            
    def test_083(self, name='serviceNotSupportedInActiveSession - ox38'):
        
        return 0
    
    def test_084(self, name='serviceNotSupportedInActiveSession - ox38'):
        
        return 0