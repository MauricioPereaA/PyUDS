
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import device_under_test, tools, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase() 
class PyUDS_TestCase(unittest.TestCase):

    #== CG3531 - Diagnostic Fault Detection ==# 
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False,
            excel_tab='Diagnostic Fault Detection'
        )

        self.bus_off_DTC = {
            'ARB': 'C0 75',
            'PTM': 'C0 79',
            'MSM': 'C0 79',
            'SCL': 'C0 75'
        }

        self.status_mask = '2E' if device_under_test in ['MSM', 'PTM', 'ARB'] else '28'

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    
    def test_001(self, name='Verify DTC Trigger message at Power On'):
    
        test.preconditions(
            step_info=info()
        )
        
        time.sleep(5)
        
        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Please verify DTC Trigger messasge 0x5D1 with default values 00 00 00 00 00 59 00 00')
            test.compare(True, prompt, step='test_001')
        
                    
    def test_002(self, name='Verify DTC Trigger message periodically'):
    
        test.preconditions(
            step_info=info()
        )
        
        time.sleep(5)
        
        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Please verify DTC Trigger messasge 0x5D1 with default values 00 00 00 00 00 59 00 00')
            test.compare(True, prompt, step='test_002')
        
        
    def test_003(self, name='%s :: Bus OFF DTC | '%device_under_test):
    
        test.preconditions(
            step_info=info()
        )
        
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(envBusOff=1)
        time.sleep(0.2)
        test.canoe.set_envVariable(envBusOff=0)
        time.sleep(1)
        
        #Remove BusOff condition:
        test.canoe.set_envVariable(envVNMFStop=1)
        test.canoe.set_envVariable(envVNMFSend=0)
        time.sleep(0.5)
        test.canoe.set_envVariable(envVNMFStop=0)
        test.canoe.set_envVariable(envVNMFSend=1)
        
        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Verify in trace that Warning Indicator Triggered=as required for DTC type, DTC Triggered=true, DTC code source=source id of ecu, DTC number= bus off dtc, DTC Status byte = status bit confirmed dtc=1')
            test.compare(True, prompt, step='test_003')    


    def test_004(self, name='Read DTCs'):
    
        test.preconditions(
            step_info=info()
        )
        
        time.sleep(5)
        
        test.step(
            step_title=name,
            custom='19 0A',
            expected={
                'response':     'Positive',
                'partialData':  '{0} 00 {1}'.format(
                    self.bus_off_DTC[device_under_test], self.status_mask
                )
            }
        )
        
        
    def test_005(self, name='Power cycle and inspect DTC trigger msg'):
    
        test.preconditions(
            step_info=info()
        )
        
        # Power Supply - Turn OFF
        test.power_supply.output(False)
        
        # Coutdown - Wait for 5 seconds
        for i in range(5):
            print(i, end='  ', flush=True)
            time.sleep(1)

        # Power Supply - Turn ON
        test.power_supply.output(True)        
        
        time.sleep(5)
        
        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Please verify DTC Trigger messasge 0x5D1 with default values 00 00 00 00 00 59 00 00')
            test.compare(True, prompt, step='test_005')
            
            
    def test_006(self, name='Read DTCs'):
        test.preconditions(
            step_info=info()
        )

        if device_under_test == 'ARB':
            #Generate vehicle conditions to set Type A or Type C DTC1
            #DTC 1 D61100 CAPL implementation stops message from being transmitted
            test.canoe.set_envVariable(VehSpdAvgDrvnAuth_StopSend = 1)
            time.sleep(6)

            prompt = tools.popup.ask(title=name, description='Verify in trace that Warning Indicator Triggered=as required for DTC type, DTC Triggered=true, DTC code source=source id of ecu, DTC number= D611, DTC Status byte = status bit confirmed dtc=1')
            test.compare(True, prompt, step='test_006')
 

    def test_008(self, name='Clear DTCs'):
    
        test.preconditions(
            step_info=info()
        )
        
        if device_under_test == 'ARB':
            #Generate vehicle conditions to CLEAR Type A or Type C DTC1
            test.canoe.set_envVariable(VehSpdAvgDrvnAuth_StopSend = 0)
            time.sleep(6)

        test.step(
            step_title=name,
            custom='14 FF FF FF', #clear DTCs
            expected={
                'response': 'Positive'
            }
        )
        
        
    def test_009(self, name='Disable DTC 1'):
    
        test.preconditions(
            step_info=info()
        )
        
        # Power Supply - Turn OFF
        test.power_supply.output(False)
        
        # Coutdown - Wait for 5 seconds
        for i in range(5):
            print(i, end='  ', flush=True)
            time.sleep(1)

        # Power Supply - Turn ON
        test.power_supply.output(True)        
        
        time.sleep(5)  
        
        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='CALIBRATION - DISABLE Rte_SUM_ERRH_k_LostCommunicationwithECM_DiagEnbl_Prm AND ...PCM_DiagEnbl_Prm (DTC D61100)')
            test.compare(True, prompt, step='test_009')
            

    def test_010(self, name='Attempt to trigger DTC1'):
    
        test.preconditions(
            step_info=info()
        )
        
        if device_under_test == 'ARB':
            #Generate vehicle conditions to set Type A or Type C DTC1
            #DTC 1 D61100 CAPL implementation stops message from being transmitted
            test.canoe.set_envVariable(VehSpdAvgDrvnAuth_StopSend = 1)
            time.sleep(6)

            prompt = tools.popup.ask(title=name, description='Please verify DTC Trigger messasge 0x5D1 with default values 00 00 00 00 00 59 00 00')
            test.compare(True, prompt, step='test_010')
            

    def test_011(self, name='Attempt to trigger DTC 1 - some additional time'):
    
        test.preconditions(
            step_info=info()
        )

        time.sleep(5)


        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Please verify DTC Trigger messasge 0x5D1 with default values 00 00 00 00 00 59 00 00')
            test.compare(True, prompt, step='test_011')
            
    def test_013_1(self, name='Trigger DTC2'):
    
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        )
        
        if device_under_test == 'ARB':        
            #Generate condition to set DTC 2
            # Power supply - Set underVoltage condition         
            test.set_dtc_condition(underVoltage=True)
            test.canoe.set_envVariable(underVoltageCondition=1)
            time.sleep(6)
            
            prompt = tools.popup.ask(title=name, description='Verify in trace that Warning Indicator Triggered=as required for DTC type, DTC Triggered=true, DTC code source=source id of ecu, DTC number=F003, DTC Status byte = status bit confirmed dtc=1 for one or two instances, Fail Type = 16')
            test.compare(True, prompt, step='test_013_1')
            

    def test_013_2(self, name='DTC 2 is confirmed'):
    
        test.preconditions(
            step_info=info()
        )

        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Verify in trace that Warning Indicator Triggered=as required for DTC type, DTC Triggered=False, DTC code source=source id of ecu, DTC number=F003, DTC Status byte = status bit confirmed dtc=1 for the remaining instances, Fail Type = 16')
            test.compare(True, prompt, step='test_013_2')
            
            
    def test_015_1(self, name='Trigger DTC3'):
        test.preconditions(
            step_info=info()
        )

        if device_under_test == 'ARB':
            #step 14 Generate vehicle conditions to set Type A or Type C DTC3
            # Power supply - Set overVoltage condition
            test.set_dtc_condition(overVoltage=True)
            test.canoe.set_envVariable(overVoltageCondition=1)
            time.sleep(6)
            
            prompt = tools.popup.ask(title=name, description='Verify in trace that Warning Indicator Triggered=as required for DTC type, DTC Triggered=true, DTC code source=source id of ecu, DTC number=F003, DTC Status byte = status bit confirmed dtc=1 for one or two instances, Fail Type = 17')
            test.compare(True, prompt, step='test_015_1')
            
    def test_015_2(self, name='DTC 3 is confirmed'):
    
        test.preconditions(
            step_info=info()
        )

        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Verify in trace that Warning Indicator Triggered=as required for DTC type, DTC Triggered=False, DTC code source=source id of ecu, DTC number=F003, DTC Status byte = status bit confirmed dtc=1 for the remaining instances, Fail Type = 17')
            test.compare(True, prompt, step='test_015_2')
            
            
    def test_016(self, name='Observe periodic rate of the DTC'):
    
        test.preconditions(
            step_info=info()
        )

        if device_under_test == 'ARB':
            prompt = tools.popup.ask(title=name, description='Verify the periodic rate of the DTC Trigger Message remained at 1000 ms throuhout testing DTC1 through DTC3')
            test.compare(True, prompt, step='test_016')
            
            
    def test_017(self, name='Clear DTCs'):
    
        test.preconditions(
            step_info=info(),
            power_mode='OFF' 
        )
        #Clear DTCs
        # Power supply - Return voltage to normal
        if device_under_test == 'ARB':        
            test.power_supply_reset_default()
       
            time.sleep(6)
            
        test.step(
            step_title=name,
            custom='14 FF FF FF', 
            expected={
                'response': 'Positive'
            }
        )

#    Test steps 18 and forward do not apply to ARB. Add for other ECUs as required: