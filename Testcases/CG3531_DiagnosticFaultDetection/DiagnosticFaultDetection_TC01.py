
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import device_under_test, tools, pn_dict
from framework.shared_libs.thread_timesync import cmd_Thread 
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase() 
after1 = after2 = before1 = before2 = ''
class PyUDS_TestCase(unittest.TestCase):

    #== CG3531 - Diagnostic Fault Detection ==# 
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Diagnostic Fault Detection',
            step_delay = 0.01
        )
        
        if device_under_test is 'SCL':
            raise Warning('%s is not applicable for ESCL'%__name__)

        print('\n'+'*'*37 + ' WARNING ' + '*'*37)
        tools.timer.input('*'*16 + ' This test requires ATTENTION during its execution ' + '*'*16)

        if device_under_test in ['MSM', 'PTM']:
            self.timesync_message = 'CGM_CAN4_PDU04'
        elif device_under_test in ['ARB']:
            self.timesync_message = 'CGM_CAN1_PDU06'

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    
    def time_sync(self):
        return test.canoe.get_signal(signal='TmSyncMsg', PDU=self.timesync_message)

    def test_025(self, name='%s :: No DTCs Set | '%device_under_test):
        test.preconditions(
            step_info=info()
        )
        test.canoe.power_panel('RUN')
        time.sleep(1)
        self.timesync_increment = cmd_Thread(
            'py "{0}\\framework\\shared_libs\\timesync.py" -d 1000 -i 100 -m {1}'.format(
                os.getcwd(), self.timesync_message))
        self.timesync_increment.start()
        time.sleep(10)
        prompt = tools.popup.ask(title=name, description='Time Sync signal increments by 1000 ms for each transmissin')
        test.compare(True, prompt, step='test_025')

    def test_026_1(self, name='%s :: No DTCs Set | '%device_under_test):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 29',
            expected={
                'response':     'Positive'
            }
        )

    def test_026_2(self, name='%s :: No DTCs Set | '%device_under_test):
        test.preconditions(
            step_info=info()
        )
        for _ in range (20):
            test.step(
                step_title=name,
                custom='22 F1 29',
                expected={
                    'response':     'Positive'
            }
        )

    def test_027(self, name='%s :: No DTCs Set | '%device_under_test):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 29',
            expected={
                'response':     'Positive'
            }
        )


    def test_030(self, name='%s :: Ignition Off for 60 seconds and then verify Time Sync signal | '%device_under_test):
        before1 = self.time_sync()
        test.canoe.power_panel('OFF')
        time.sleep(5)
        print('\n\n *** Time before ignition OFF: ', before1)
        tools.timer.input('\n\n Observe Time Sync signal does not increment')
        prompt = tools.popup.ask(title=name, description='Normal communication has stopped')
        test.compare(True, prompt, step='test_030')

    def test_032(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info()
        )
        test.canoe.power_panel('RUN')
        after1 = self.time_sync()
        print('\n\n *** Time after ignition OFF is removed: ', after1)

        test.step(
            step_title=name,
            custom='22 F1 29',
            expected={
                'response':     'Positive'
            }
        )

    def test_033(self, name='Observe normal communication message is disabled'):
        test.compare(
            before1, after1
        )
        prompt = tools.popup.ask(title=name, description='The difference between the Total Vehicle Operation Time  value read before Ignition OFF and the Total Vehicle Operation Time value read after Ignition ON is less than or equal to 1000 ms')
        test.compare(True, prompt, step='test_033')

    def test_034(self, name='%s :: No DTCs Set | '%device_under_test):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 29',
            expected={
                'response':     'Positive'
            }
        )                             

    def test_037(self, name='%s :: Disconnect battery power and verify Time Sync signal | '%device_under_test):
        before2 = self.time_sync()
        print('\n ** Time Sync Value just before battery loss: ', before2)
        test.power_supply.output(False)
        time.sleep(5)
        prompt = tools.popup.ask(title=name, description='Normal communication has stopped')
        test.compare(True, prompt, step='test_037')

    def test_039(self, name='Observe normal communication message is disabled'):
        test.power_supply.output(True)
        after2 = self.time_sync()
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F1 29',
            expected={
                'response':     'Positive'
            }
        )   

    def test_040(self, name='Observe normal communication message is disabled'):
        print('\n ** Time Sync Value just after battery reconection: ', after2)
        tools.timer.input('\n\n Observe Normal Communication has resumed and compare the Time Sync Signal values before loss of battery power and after return to battery power')
        print(before2, after2)
        test.compare(
            before2, after2
        )
        prompt = tools.popup.ask(title=name, description='The difference between the Total Vehicle Operation Time  value read before battery disconnect and the Total Vehicle Operation Time value read after battery reconnect is less than or equal to 1000 ms')
        test.compare(True, prompt, step='test_040')