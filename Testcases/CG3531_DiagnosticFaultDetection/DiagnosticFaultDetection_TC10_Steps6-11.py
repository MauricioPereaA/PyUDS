
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import device_under_test, tools, pn_dict, sleep_timeout
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase() 
class PyUDS_TestCase(unittest.TestCase):

    #== CG3531 - Diagnostic Fault Detection ==# 
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Diagnostic Fault Detection'
        )

        ''' Device Under Test - Settings '''
        self.protected_message = random.choice(     # Pick random message to be tested
            list(pn_dict[device_under_test]['protected_messages'].keys())
        )
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']

        self.status_mask = ['2F', '6D'] if device_under_test in ['MSM', 'ARB', 'PTM', 'TCP'] else ['29', '69']

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    
    # Extra step to ensure no DTC is set ..
    def test_006_1(self, name='%s :: 5s delay + Clear DTCs'%device_under_test):
        test.canoe.power_panel('RUN')
        time.sleep(5)
        test.preconditions(step_info=info())
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_006_2(self, name='%s :: stop message transmission + read DTC - DTC is not Set | '%device_under_test):
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1}))
        time.sleep(6)
        test.preconditions(
            step_info=info(),
                        
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 FF',
            expected={
                'response':     'Positive',                
                'partialData': '{0} {1}'.format(self.DTC, self.status_mask[0])
            }
        )  

    def test_007(self, name='%s :: read All supported DTCs'%device_under_test):
        test.canoe.power_panel('OFF')
        test.canoe.set_envVariable(envVNMFSend=0)
        test.canoe.set_envVariable(envVNMFStop=1)
        test.preconditions(
            step_info=info(),
        )
        time.sleep(sleep_timeout)
        test.canoe.set_envVariable(envVNMFSend=1)
        test.canoe.set_envVariable(envVNMFStop=0)
        test.canoe.power_panel('RUN')
        time.sleep(2)
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 FF',
            expected={
                'response': 'Positive',
                'partialData': '{0} {1}'.format(self.DTC, self.status_mask[1])
            }
        )

    def test_008_1(self, name='%s :: stop message transmission + read DTC - DTC is not Set | '%device_under_test):
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:0}))
        time.sleep(2)
        test.preconditions(
            step_info=info(),                        
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 FF',
            expected={
                'response':     'Positive',                
                'partialData': '%s 28'%self.DTC
            }
        )

    def test_008_2(self, name='%s :: 5s delay + Clear DTCs'%device_under_test):
        test.canoe.power_panel('RUN')
        time.sleep(5)
        test.preconditions(step_info=info())
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_008_3(self, name='%s :: stop message transmission + read DTC - DTC is not Set | '%device_under_test):
        time.sleep(2)
        test.preconditions(
            step_info=info(),                        
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 FF',
            expected={
                'response':     'Positive',                
                'partialData': '%s 28'%self.DTC
            }
        )

    def test_008_4(self, name='%s :: read All supported DTCs'%device_under_test):
        test.canoe.power_panel('OFF')
        test.canoe.set_envVariable(envVNMFSend=0)
        test.canoe.set_envVariable(envVNMFStop=1)
        test.preconditions(
            step_info=info(),
        )
        time.sleep(17)
        test.canoe.set_envVariable(envVNMFSend=1)
        test.canoe.set_envVariable(envVNMFStop=0)
        test.canoe.power_panel('RUN')
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 FF',
            expected={
                'response': 'Positive',
                'partialData': '%s 68'%self.DTC
            }
        )


    def test_009(self, name='%s :: 5s delay + Clear DTCs'%device_under_test):
        time.sleep(5)
        test.preconditions(step_info=info())
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )
  
