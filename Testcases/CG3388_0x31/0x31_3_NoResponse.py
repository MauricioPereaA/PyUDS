
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='<Transition Server to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_002(self, name='unsupported RID -- SF 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 01 00 00',
            expected={
                'response': 'No response'
            }
        )
    '''
    def test_003(self, name='unsupported RID for MSM-- SF 02'):
        if device_under_test in ['ARB', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 02 FF FF',
            expected={
                'response': 'No response'
            }
        )

    def test_004(self, name='unsupported RID -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:#add
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 03 FF FF',
            expected={
                'response': 'No response'
            }
        )

    def test_005(self, name='extendedSession - unsupported RID SF 01, 02 & 03'):
        # step preconditions
        test.preconditions(current_step='step preconditions')
        test.step(step_title='step preconditions',
                    extended_session_control=True)
        # step preconditions

        for subfunction in ['01', '03']:
            # SF 02 is not supported for ARB, PTM, SCL & MSM
            if device_under_test is not 'SCL':
                if subfunction == '03': continue
            test.preconditions(
                step_info=info(),
                functionalAddr=True
            )
            test.step(
                step_title=name,
                custom='31 %s 00 00'%subfunction,
                expected={
                    'response': 'No response'
                }
            )

    def test_006(self, name='safetySession - unsupported RID SF 01, 02 & 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_007(self, name='<Transition Server to defaultSession> -- subFunctionNotSupported Tests'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_008(self, name='subFunctionNotSupported SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:#add
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 02 FF 01',
            expected={
                'response': 'No response'
            }
        )

    def test_009(self, name='subFunctionNotSupported SF 03'):
        if device_under_test in ['ARB', 'SCL', 'MSM']:#add
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 03 01 00',
            expected={
                'response': 'No response'
            }
        )

    def test_010(self, name='subFunctionNotSupported SF Not supported'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 FF FF 01',
            expected={
                'response': 'No response'
            }
        )

    def test_011(self, name='extendedSession - subFunctionNotSupported SF 01, 02 & 03'):
        # step preconditions
        test.preconditions(current_step='step preconditions')
        test.step(step_title='step preconditions',
                    extended_session_control=True)
        # step preconditions

        for subfunction in ['02', '03', 'FF']:
            test.preconditions(
                step_info=info(),
                functionalAddr=True
            )
            test.step(
                step_title=name,
                custom='31 %s FF 01'%subfunction,
                expected={
                    'response': 'No response'
                }
            )

    def test_012(self, name='safetySession - subFunctionNotSupported SF 01, 02 & 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
        return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_013(self, name='<Transition Server to defaultSession> -- requestOutOfRange'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )
    '''
    #delect in new template
    '''
        if device_under_test in ['MSM', 'SCL', 'ARB', 'PTM']:
            print(name, 'Test is not supported for %s'%device_under_test)
            pass

        else:
    '''

# no suitable RID for MSM
    def test_014(self, name='requestOutOfRange -- SF 01'):
        if device_under_test in ['SCL', 'ARB','MSM']:
            print(name, 'Test is not supported for %s'%device_under_test)
            pass
        else:
            test.preconditions(
                step_info=info(),
                functionalAddr=True
            )
            test.step(
                step_title=name,
                custom='31 01 03 3D 03',
                expected={
                    'response': 'No response'
                }
            )

    '''
    def test_015(self, name='requestOutOfRange -- SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )


    def test_016(self, name='requestOutOfRange -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )


    def test_017(self, name='extendedSession - requestOutOfRange SF 01, 02 & 03'):
        # step preconditions
        test.preconditions(current_step='preconditions step')
        test.step(step_title='preconditions step',
                    extended_session_control=True,
                    request_seed='0D', send_key='0D')
        # step preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 01 02 72'+'00'*65,
            expected={
                'response': 'No response'
            }
        )

    def test_018(self, name='safetySession - requestOutOfRange SF 01, 02 & 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )
    '''
