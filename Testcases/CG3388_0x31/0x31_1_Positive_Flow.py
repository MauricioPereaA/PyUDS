'''G3388 Ver 2019.1
   
Author: Mauricio Perea
May 27, 2020
Modified by Mauricio Perea
Date: 10-July-2020
It have been updated implemented the validation (00,FF)
Modified by: Mauricio Perea        Date: 5-Nov-20
#Due to RID FD30 shall decrease current and make ECU off line, this RID shall be tested manuually


'''

from framework.shared_functions import supported_rids, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time
import misc as tools

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):
    
    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        

        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )
        self.supported_rids = supported_rids
        
#         self.To_Validate_rids_MY23 = [ # Please add the RIDs you want to include below
#              '0342',  # SpndlMtr2ControlServiceToolRoutineControl
#              '041A',  # ClearECUWakeupDetectionRecords
#              '046A'   # EraseReadDataInfomationServiceToolRoutineStrt
#             ]
        
# RID_027C_GoToSleep, Manually test 
#RID_027A/027B Manually test 
#=========seed 027A 01 first, then 027C and send 027B 01
#every command need go back to 10 01
#=========seed 027A 02 first, then 027C and  send 027B 02

#0209 FF00 only boot, don't need to test there
#0200 0272 test it without after-DPS, Manually test   

#0342 0342 0347 for PTM, only support subfunction 02  
#0300 for PTM, only boot,don't need to test there  
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_0x31_positive_flow(self, name='Service 0x31 - Positive Flow'):
        self.mec_value = tools.popup.ask(
            title='Validate MEC', 
            description='Do you have MEC>0?',
            timeout=2, default = False )
           
             
        self.validate='MEC=0'
        if self.mec_value==1:
            self.validate='MEC>0'

        
        self.current_step = 0

        def step_preconditions():
            test.preconditions(
                current_step='test_%s'%str(self.current_step).rjust(3, '0'),
                functionalAddr=False
            )
        
        def step_preconditions_tester_present():
            test.preconditions(
                current_step='test_%s'%str(self.current_step).rjust(3, '0'),
                functionalAddr=True
            )

        def extended_session():
            step_preconditions()
            test.step(
                step_title='Transition to Extended Session ',
                custom='10 03',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )
        
        def default_session():
            step_preconditions()
            test.step(
                step_title='Transition to default Session ',
                custom='10 01',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )

        def tester_present():
            step_preconditions()
            test.step(
                step_title='Start Tester present',
                start_tester_present=True,
                expected = {
                    'response': 'No response'
                }
            )
              
        def enter_security_level(level):
            step_preconditions()
            test.step(
                step_title='Security Level %s - Req Seed'%level,
                request_seed=level,
                expected={
                    'response'            : 'Positive',
                    'dataLength'          : 31,
                    'unexpected_response' : True,
                    'partialData'         : ('00', 'FF')
            }
            )

            self.current_step += 1
            step_preconditions()
            test.step(
                step_title='Security Level %s - Send Key'%level,
                send_key=level,
                expected={
                    'response' : 'Positive'
                }
            )

        def enter_security_level_mec_greater_than_zero(level):
            step_preconditions()
            test.step(
                step_title='Security Level %s - Req Seed'%level,
                request_seed=level,
                expected={
                    'response' : 'Positive',
                }
            )

            self.current_step += 1
            step_preconditions()
            test.step(
                step_title='Security Level %s - Send Key'%level,
                send_key=level,
                expected={
                    'response' : 'Positive'
                }
            )  
        
        def start_routine(rid, data):
            if rid == 'FF00':
                print('RID', rid, 'will erase SW memory, will not execute.')
                return 0
            step_preconditions()
            test.step(
                step_title='Read rid %s'%rid,
                custom='31 01 {} {}'.format(rid, data),
                expected={
                    'response': 'Positive'
                }
            )
            if rid == 'F000': # Reset is required       
                print('RID', rid, 'requires ECU to be reset.')
                test.restart_communication()
                test.step(step_title='extendedSession after reset',
                            extended_session_control=True)

        def stop_routine(rid):
            step_preconditions()
            unsupported_ecu = ['MSM', 'SCL', 'ARB', 'TCP']
            if device_under_test in unsupported_ecu:
                print('Test step from {} is not supported / is on hold by {}'.format(
                        __name__, ','.join(unsupported_ecu)))
                return 0
            elif rid in ['0347','0341','0342']:
                step_preconditions()
                test.step(
                    step_title='Read rid %s'%rid,
                    custom='31 02 {}'.format(rid),
                    expected={
                        'response': 'Positive'
                    }
                )
       
        def request_routine_results(rid):
            step_preconditions()
            unsupported_ecu = ['MSM', 'ARB', 'PTM', 'TCP']
            if device_under_test in unsupported_ecu:
                print(__name__, 'Subfunction 03 is only supported for SCL')
                return 0
            pass
            test.step(
                step_title='Read rid %s'%rid,
                custom='31 03 %s'%rid,
                expected={
                    'response': 'Positive'
                }
            )
        def disable_communication():
            step_preconditions()
            test.step(
                step_title='Disable to Communication',

                communication_control=False
        
            )
            
        def Restart_communication():
            step_preconditions()
            test.restart_communication(True)
        def enable_communication():
            test.preconditions(
                functionalAddr=True
            )
            test.step(
                step_title='Enable to Communication',
                communication_control=True

            )
        def step_preconditions_rationality_rcip():
            if device_under_test == 'MSM':         
                test.preconditions(                          
                    signal=['RCIP_RrClsrMtnCtlParmEnblAuth','RrClsrInfo_Prtctd_PDU',1],
                    ) 
            elif device_under_test == 'PTM':
                test.preconditions(
                    
                    step_info=info(),
                    power_mode='RUN',
                    signal=[
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                        'RCIP_RrClsrMtnCtlParmEnblAuth','SrlDat2_Prtctd_PDU',1
                    ],         
                )
    
        for rid in self.supported_rids.keys():
            
            #self.current_step = 1
            extended_session()
            tester_present()
            enable_communication()  #add
            if self.validate in self.supported_rids[rid][0]:            
                if 'RCIP' in self.supported_rids[rid][0]:
                    step_preconditions_rationality_rcip()
                if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]:#add
                    extended_session() 
                    disable_communication()
                if rid in ["0209","0300","027A","027B","027C"]:
                    continue  # RID_027C_GoToSleep,
                              #RID_027A/027B_Write_only_onetime, Manually test
                              #0209 0300 FF00 only boot, manually test
#                 if rid not in self.To_Validate_rids_MY23:
#                 # Skip exclutions
#                     continue
                
                if 'DEFAULT' in self.supported_rids[rid][0]:
                    self.current_step = 3
                    default_session()                 
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 4
                    stop_routine(rid)
                    
                    self.current_step = 5
                    request_routine_results('03 11')
                    
                    self.current_step = 6
                    extended_session()
    
                    self.current_step = 7
                    tester_present()
    
                if 'locked' in self.supported_rids[rid][0]:
                    self.current_step = 8
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 9
                    stop_routine(rid)
                    
                    self.current_step = 10
                    request_routine_results('03 11')
    
                    self.current_step = 11
                    default_session()
    
                    self.current_step = 12
                    extended_session()
    
                if '01' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 13
                    #enter_security_level('01')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('01')
                    else:
                        enter_security_level('01')
    
                    self.current_step = 15
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 16
                    stop_routine(rid)
                    
                    self.current_step = 17
                    request_routine_results('03 11')
    
                    self.current_step = 18
                    default_session()
    
                    self.current_step = 19
                    extended_session()
    
                if '03' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 20                
                    #enter_security_level('03')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('03')
                    else:
                        enter_security_level('03')
    
                    self.current_step = 22
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 23
                    stop_routine(rid)
                    
                    self.current_step = 24
                    request_routine_results('03 11')
                
                    self.current_step = 25
                    default_session()
    
                    self.current_step = 26
                    extended_session()
    
                if '05' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 27         
                    #enter_security_level('05')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('05')
                    else:
                        enter_security_level('05')
    
                    self.current_step = 29
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 30
                    stop_routine(rid)
                    
                    self.current_step = 31
                    request_routine_results('03 11')
    
                    self.current_step = 32
                    default_session()
    
                    self.current_step = 33
                    extended_session()
    
                if '09' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 34      
                    
                    #enter_security_level('09')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('09')
                    else:
                        enter_security_level('09')
    
                    self.current_step = 36
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 37
                    stop_routine(rid)
                    
                    self.current_step = 38
                    request_routine_results('03 11')
    
                    self.current_step = 39
                    default_session()
    
                    self.current_step = 40
                    extended_session()
    
                if '0B' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 41      
                    #enter_security_level('0B')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('0B')
                    else:
                        enter_security_level('0B')
    
                    self.current_step = 43
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 44
                    stop_routine(rid)
                    
                    self.current_step = 45
                    request_routine_results('03 11')
    
                    self.current_step = 46
                    default_session()
    
                    self.current_step = 47
                    extended_session()
    
                if '0D' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 48  
                    #enter_security_level('0D')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('0D')
                    else:
                        enter_security_level('0D')
    
                    self.current_step = 50
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 51
                    stop_routine(rid)
                    
                    self.current_step = 52
                    request_routine_results('03 11')
                
                    self.current_step = 53
                    default_session()
    
                    self.current_step = 54
                    extended_session()
                    
                if '11' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 55
                    #enter_security_level('11')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('11')
                    else:
                        enter_security_level('11')
    
                    self.current_step = 57
                    start_routine(rid, self.supported_rids[rid][1])
                   
                    self.current_step = 58
                    stop_routine(rid)
                    
                    self.current_step = 59
                    request_routine_results('03 11')
    
                    self.current_step = 60
                    default_session()
    
                    self.current_step = 61
                    extended_session()
                    
                if '13' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 62
                    #enter_security_level('13')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('13')
                    else:
                        enter_security_level('13')
    
                    self.current_step = 64
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 65
                    stop_routine(rid)
                    
                    self.current_step = 66
                    request_routine_results('03 11')
                
                    self.current_step = 67
                    default_session()
    
                    self.current_step = 68
                    extended_session()
                    
                if '15' in self.supported_rids[rid][0]:
                    if 'DISABLECOMMUNICATION' in self.supported_rids[rid][0]: #add
                        disable_communication()
                    self.current_step = 69
                    #enter_security_level('15')
                    if self.mec_value ==1:
                        enter_security_level_mec_greater_than_zero('15')
                    else:
                        enter_security_level('15')
    
                    self.current_step = 71
                    start_routine(rid, self.supported_rids[rid][1])
    
                    self.current_step = 72
                    stop_routine(rid)
                    
                    self.current_step = 73
                    request_routine_results('03 11')
    
                    self.current_step = 74
                    default_session()
        

        #   - Next steps will be skipped (117-149) since
        #     '03 11' is only supported on Sec Lvl 01 & 03

    # Steps from 75 to 79 are only applicable for Pyrotechnic ECUs

    #skip 80-82 safetySystemSession
    def test_080(self, name='startRoutine - Functional Messaging'):
        if device_under_test in ['MSM','PTM']:
            print(name, 'Safety System Session is not applicable for%s'%device_under_test)
            pass
        #    functionalAddr=True
        #    custom='31 01 FF 01',

        
    def test_081(self, name='stopRoutine - Functional Messaging'):
        if device_under_test in ['MSM','PTM']:
            print(name, 'Safety System Session is not applicable for%s'%device_under_test)
            pass
    
    def test_082(self, name='startRoutine - Functional Messaging'):
        if device_under_test is not 'SCL':
            print(name, 'is not applicable for %s'%device_under_test)
            return 0

        # Start - RID 03 11 - Preconditions 
        test.preconditions('RID 03 11 - Preconditions')
        test.step(step_title='RID 03 11 - Preconditions',
                    extended_session_control=True,
                    start_tester_present=True,
                    request_seed='01', send_key='01')
        # End   - RID 03 11 - Preconditions 
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 03 03 11',
            expected={
                'response': 'Positive'
            }
        )
    
    def test_083(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',

            expected={
                'response': 'Positive'
            }
        )
    
    def test_084(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,

            expected={
                'response': 'No response'
            }
        )


