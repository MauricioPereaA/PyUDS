
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 5-Nov-20
        
from framework.shared_functions import device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='ServiceNotSupported - 0x11'):
        # Begin -- Boot Mode preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            extended_session_control= True,
            start_tester_present= True,
            dtc_settings = False,
            communication_control= False,

            expected={
                'response'   : 'Positive'
            }
        )
        test.preconditions(current_step='test_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            request_seed='01',
            send_key='01'
        )
        test.step(
            step_title=name,
            custom='10 02'
        )
        # End -- Boot Mode preconditions
        
    def test_001_1(self, name='ServiceNotSupported - 0x11'):        
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_002(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (minimum length check)'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_003(self, name='requestOutOfRange - 0x31 -- SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_004(self, name='requestOutOfRange - 0x31 -- SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 FF FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_005(self, name='requestOutOfRange - 0x31 -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_006(self, name='subFunctionNotSupported - 0x12 -- SF 02'):
        #if device_under_test in ['MSM']:#add
        #    print('Test not applicable for %s'%device_under_test)
        #    return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 FF 01',
            expected={
                'response': 'Negative',
                'data': '12'#31-->12
            }
        )

    def test_007(self, name='subFunctionNotSupported - 0x12 -- SF 03'):
        #if device_under_test in ['MSM']:#add
        #    print('Test not applicable for %s'%device_under_test)
        #    return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 03 FF 01',
            expected={
                'response': 'Negative',
                'data': '12'#31-->12
            }
        )

    def test_008(self, name='subFunctionNotSupported - 0x12 -- unsupported SF'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 FF FF 01',
            expected={
                'response': 'Negative',
                'data': '12'#31-->12
            }
        )

    def test_009(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (full length check) -- SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 09 02 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )



    def test_010(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (full length check) -- SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 03 41 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )



    def test_011(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (full length check) -- SF 03'):
        if device_under_test in ['PTM','MSM']:#add for PTM
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 03 03 11 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_012(self, name='requestOutOfRange - 0x31 -- invalid data SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 09 FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_013(self, name='requestOutOfRange - 0x31 -- invalid data SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_014(self, name='requestOutOfRange - 0x31 -- invalid data SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )
# CAPL test
    '''
    def test_016(self, name='requestSequenceError - 0x24 -- SF 01'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_017(self, name='requestSequenceError - 0x24 -- SF 01 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_019(self, name='requestSequenceError - 0x24 -- SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_020(self, name='requestSequenceError - 0x24 -- SF 02 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_022(self, name='requestSequenceError - 0x24 -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_023(self, name='requestSequenceError - 0x24 -- SF 03 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_024(self, name='Erase memory invalid partition FF-- generalProgrammingFailure - 0x72 -- SF 01 -- Physicial'):
        if device_under_test in ['ARB', 'SCL', 'TCP']:#add for PTM
            print('Test not applicable for %s'%device_under_test)
            return 0        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF 00 FF',# "FF OO FF" Li Peng
            expected={
                'response': 'Negative',
                
                'data': '72'
            }
        )




# #test manually
#     def test_025(self, name='generalProgrammingFailure - 0x72 -- SF 01'):
#         if device_under_test in ['ARB', 'SCL', 'TCP']:#add for PTM
#             print('Test not applicable for %s'%device_under_test)
#             return 0        
#         test.preconditions(
#             step_info=info()
#         )
#         test.step(
#             step_title=name,
#             custom='31 01 02 09 02',
#             expected={
#                 'response': 'Negative',
#                 
#                 'data': '72'
#             }
#         )
# 
    def test_026(self, name='generalProgrammingFailure - 0x72 -- SF 01 -- functional'):
#test manually
        if device_under_test in ['ARB', 'SCL', 'TCP']:#add for PTM
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 01 FF 00 FF',
            expected={
                'response': 'Negative',
                'data': '72'
            }
        )
#=========no subitable RID in boot mode for PTM
    def test_027(self, name='generalProgrammingFailure - 0x72 -- SF 02'):
        if device_under_test in ['ARB', 'SCL', 'MSM', 'PTM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 03 42',
            expected={
                'response': 'Negative',
                
                'data': '72'
            }
        )
#=========no subitable RID in boot mode for PTM
    def test_028(self, name='generalProgrammingFailure - 0x72 -- SF 02 -- functional'):
        if device_under_test in ['ARB', 'SCL', 'MSM', 'PTM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 02 03 42',
            expected={
                'response': 'Negative',
                'data': '72'
            }
        )  
    def test_029(self, name='generalProgrammingFailure - 0x72 -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_030(self, name='generalProgrammingFailure - 0x72 -- SF 03 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )
    def test_035(self, name='defaultSession in extendedSession'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            default_session_control=True,

            expected={
                'response'   : 'Positive',
                'dataLength':  4
            }
        )
        test.restart_communication()
    '''
    #