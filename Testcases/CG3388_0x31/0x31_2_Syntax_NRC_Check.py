
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import tools, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    '''
    def test_001(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (minimum length check) -- 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_002(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (minimum length check) -- 2'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01',

            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_003(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (minimum length check) -- 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    '''
    def test_001(self, name='requestOutOfRange - 0x31 unsupported RID -- SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_002(self, name='requestOutOfRange - 0x31 unsupported RID -- SF 02'):

        if device_under_test in ['ARB', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 FF FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )
    
    def test_003(self, name='requestOutOfRange - 0x31 unsupported RID -- SF 03'):
        if device_under_test is not 'SCL':
            print('Test is not applicable for %s'%device_under_test)
            return 0

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='31 03 FF FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_005(self, name='securityAccessDenied - 0x33 -- SF 01'):
        # Step - Pre condition
        test.preconditions(current_step='extendedSession - Locked server')
        test.step(step_title='extendedSession',
                    extended_session_control=True)
        # Step - Pre condition
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )
    '''
    def test_009(self, name='securityAccessDenied - 0x33 -- SF 02'):
        # Step - Pre condition
        test.preconditions(current_step='extendedSession - Locked server')
        test.step(step_title='extendedSession',
                    extended_session_control=True)
        # Step - Pre condition
        if device_under_test in ['ARB', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 03 41',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_006(self, name='securityAccessDenied - 0x33 -- SF 03'):
        if device_under_test is not 'SCL':
            print('Test is not applicable for %s'%device_under_test)
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 03 03 11',
            expected={
                'response': 'Negative',
                'data': '33'
            }

    def test_011(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (full length check) -- SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF 01 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_012(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (full length check) -- SF 02'):
        if device_under_test in ['ARB', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
        # Step - Pre conditions
        test.preconditions(current_step='precondition - security lvl 0D')
        test.step(step_title='security level 0D',
                    extended_session_control=True,
                    request_seed='0D',
                    send_key='0D')
        # Step - Pre conditions
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 03 41 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_013(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 (full length check) -- SF 03'):
        if device_under_test is not 'SCL':
            print('Test is not applicable for %s'%device_under_test)
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 03 03 11 FF FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    '''
    def test_007(self, name='requestOutOfRange - 0x31 invalid RID -- SF 01'):
        # step preconditions
        test.preconditions(current_step='preconditions step')
        test.step(step_title='preconditions step',
                    extended_session_control=True,
                    request_seed='0D', send_key='0D')
        # step preconditions
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 72'+'00'*65,
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )
        # teardown step preconditions
        test.preconditions(current_step='teardown step')
        test.step(step_title='teardown step',
                    default_session_control=True)
        # teardown step preconditions

    def test_008(self, name='requestOutOfRange - 0x31 invalid RID data -- SF 02'):
        if device_under_test in ['ARB', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
		#no invalid data for subfuction 02
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_009(self, name='requestOutOfRange - 0x31 invalid RID data -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_011(self, name='conditionsNotCorrect - 0x22 -- SF 01'):
        # Step - Pre conditions
        test.preconditions(current_step='precondition - security lvl 01')
        test.step(step_title='security level 01', #03-->01
                    extended_session_control=True,
                    start_tester_present=True, #add
                    request_seed='01',
                    send_key='01')
        # Step - Pre conditions
        test.preconditions(
            step_info=info(),
            ignition_switch=['OFF', 'ACC', 'RUN']
        )
        #time delay add
        tools.timer.input('Wait for', timeout=5)
        #power mode cannot change in a short time
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
        # teardown step preconditions
        test.preconditions(current_step='teardown step')
        test.step(step_title='teardown step',
                    extended_session_control=True)
        # teardown step preconditions

    def test_012(self, name='conditionsNotCorrect - 0x22 -- SF 02'):
        if device_under_test in ['ARB', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
        # Step - Pre conditions
        test.preconditions(current_step='precondition - security lvl 0D',
                           signal=['RCIP_RrClsrMtnCtlParmEnblAuth','SrlDat2_Prtctd_PDU',0])
        test.step(step_title='security level 0D',
                    extended_session_control=True,
                    request_seed='0D',
                    send_key='0D')
        # Step - Pre conditions
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            custom='31 02 03 41',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_013(self, name='conditionsNotCorrect - 0x22 -- SF 03'):
        if device_under_test is not 'SCL':
            print('Test is not applicable for %s'%device_under_test)
            return 0

        # Step - Pre conditions
        test.preconditions(current_step='precondition - security lvl 03')
        test.step(step_title='security level 03',
                    extended_session_control=True,
                    request_seed='03',
                    send_key='03')
        # Step - Pre conditions

        test.preconditions(
            step_info=info(),
            ignition_switch=['OFF', 'ACC', 'RUN']
        )
        test.step(
            step_title=name,
            custom='31 03 03 11',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )


        test.canoe.power_panel('OFF')
# use CAPL to test NRC0x24, sending Rounting command,  transfer another rounting berfore the previous rounting response.
    def test_015(self, name='requestSequenceError - 0x24 -- SF 01'):
        if device_under_test in ['ARB', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 03 41 02 01',
            expected={
                'response': 'Positive'
            }
        )
        test.step(
            step_title=name,
            custom='31 01 03 41 02 01',
            expected={
                'response': 'Negative',
                'data': '24'
            }   
        )

    def test_017(self, name='requestSequenceError - 0x24 -- SF 02'):
        if device_under_test in ['ARB', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
#sending 31 02 without 31 01.
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 03 42',
            expected={
                'response': 'Negative',
                'data': '24'
            } 
        )

    def test_019(self, name='requestSequenceError - 0x24 -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )
    '''
#===============NRC72 can be got only in boot layer========================
    def test_028(self, name='generalProgrammingFailure - 0x72'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('White box TC for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_029(self, name='generalProgrammingFailure - 0x72'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('White box TC for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_030(self, name='generalProgrammingFailure - 0x72'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('White box TC for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )
    '''
