
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import tools        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_002(self, name='Start Routine Check Programming Dependencies'):
        # Begin -- Boot Mode preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            extended_session_control= True,
            start_tester_present= True,
            dtc_settings = False,
            communication_control= False,

            expected={
                'response'   : 'Positive'
            }
        )
        test.preconditions(current_step='test_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            request_seed='01',
            send_key='01'
        )
        test.step(
            step_title=name,
            custom='10 02'
        )
        # End -- Boot Mode preconditions
        test.step(
            step_title=name,
            custom='31 01 FF 00 01',
            expected={
                'response': 'Positive'
            }
        )                                    
        test.power_supply.output( False),#add
        tools.timer.input('Waiting 7 seconds while power supply is down', timeout=7),#add
        test.power_supply.output( True)#add
        """                                   
        tools.popup.info(title=name,
                description='Please power DOWN your Power supply now and click OK...')
        tools.timer.input('Waiting 7 seconds while power supply is down', timeout=7)
        tools.popup.info(title=name,
                description='Please power UP your Power supply now and click OK...')
        """
    def test_003(self, name='Verify return to defaultSession, in Boot'):
        test.restart_communication()#add
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data'    : '7F'
            }
        ) 
    def test_015(self, name='defaultSession in extendedSession'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            default_session_control=True,

            expected={
                'response'   : 'Positive',
                'dataLength':  4
            }
        )
        test.restart_communication()