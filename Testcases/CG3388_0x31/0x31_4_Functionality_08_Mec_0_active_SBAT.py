
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 5-Nov-20
        
from framework.shared_functions import tools, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )
#        print(
#            '\n\n * Attention! This Test case requires a MEC > 0. *\n\n'
#        )
        tools.timer.input('Test will start in ', timeout=5)
        
        self.all_FFs_byte_seed = ' '.join(('FF '*31).split())

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_292(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info(),
            mec_zero=True, 
            sbat=True   
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_293(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
    def test_295(self, name='<Start Routine> Physical Address Req'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=True
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_296(self, name='<Unlock Security Level 05, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_297(self, name='<Unlock the Server via security access 05 service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_298(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_299(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_301(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_302(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_303(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_305(self, name='<Start Routine> Physical Address Req'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  55 1B AF A3 B9 5A 64 DF 9B 40 B8 FD 17 A4 74 33 E1 C9 44 E9 18 F2 20 54 B9 E6 B0 65 A8 3E 73 28 3E C4 F4 B2 F3 70 F7 43 52 FF BD B6 83 BE 82 DB 49',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )
    def test_306(self, name='<Unlock Security Level 13, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            communication_control=False,  # updated by HC  add
            request_seed='13',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_307(self, name='<Unlock the Server via security access 13 service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_308(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  55 1B AF A3 B9 5A 64 DF 9B 40 B8 FD 17 A4 74 33 E1 C9 44 E9 18 F2 20 54 B9 E6 B0 65 A8 3E 73 28 3E C4 F4 B2 F3 70 F7 43 52 FF BD B6 83 BE 82 DB 49',
            expected={
                'response': 'Positive'
            }
        )

    def test_309(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_311(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_312(self, name='<Transition to extendedSession>'):
        test.restart_communication() #the formal step RID 0202 will effect security level
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_313(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_315(self, name='<Start Routine> Physical Address Req'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_316(self, name='<Unlock Security Level 15, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_317(self, name='<Unlock the Server via security access 15 service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_318(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE', #no suitable RID for MSM and PTM
            expected={
                'response': 'Positive'
            }
        )

    def test_319(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_321(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

