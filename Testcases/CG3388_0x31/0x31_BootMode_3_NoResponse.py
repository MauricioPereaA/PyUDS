
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='<Transition Server to programmingSession>'):
        # Begin -- Boot Mode preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            extended_session_control= True,
            start_tester_present= True,
            dtc_settings = False,
            communication_control= False,

            expected={
                'response'   : 'Positive'
            }
        )
        test.preconditions(current_step='test_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            request_seed='01',
            send_key='01'
        )
        test.step(
            step_title=name,
            custom='10 02'
        )
        # End -- Boot Mode preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True #add
        )
        test.step(
            step_title=name,
            custom='31 01 FF FF',
            expected={
                'response': 'No response'
            }
        )


    def test_002(self, name='requestOutOfRange -- SF 02'):
        if device_under_test in ['ARB', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info(),
            functionalAddr=True #add
        )
        test.step(
            step_title=name,
            custom='31 02 FF FF',
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='requestOutOfRange -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 C3',
            expected={
                'response': 'Negative',
                'data': '12'
            }
        )

    def test_004(self, name='subFunctionNotSupported -- SF 01'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:#delete
            print('Test not applicable for %s'%device_under_test)
            return 0  
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 01 FF 01',
            expected={
                'response': 'No response'
            }
        )

    def test_005(self, name='subFunctionNotSupported -- SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:#add
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 02 FF 01',
            expected={
                'response': 'No response'
            }
        )

    def test_006(self, name='subFunctionNotSupported -- SF 03'):
        if device_under_test in ['ARB', 'SCL', 'TCP']:#add
            print('Test not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 03 01 00',
            expected={
                'response': 'No response'
            }
        )

    def test_007(self, name='subFunctionNotSupported -- unsupported SF'):

        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 FF FF 01',
            expected={
                'response': 'No response'
            }
        )

    def test_008(self, name='requestOutOfRange -- SF 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='31 01 02 09 FF',
            expected={
                'response': 'No response'
            }
        )

    def test_009(self, name='requestOutOfRange -- SF 02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_010(self, name='requestOutOfRange -- SF 03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0
            
        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )
    def test_015(self, name='defaultSession in extendedSession'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            default_session_control=True,

            expected={
                'response'   : 'Positive',
                'dataLength':  4
            }
        )
        test.restart_communication()