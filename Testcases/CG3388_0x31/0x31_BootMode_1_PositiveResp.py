
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 5-Nov-20
        
from framework.shared_functions import device_under_test, supported_rids
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )
        self.bootmode_rids = [
            rid for rid in tuple(supported_rids.keys()) if 'PROGRAMMING' in supported_rids[rid][0]
        ]
        #0209/FF00 use 34 boot pos script to test with two different address
        print('%s bootmode_rids'%self.bootmode_rids)
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='programmingSession - startRoutine - 0x01'):
        if not any(self.bootmode_rids):
            print('%s does not support BOOTMODE RIDs'%device_under_test)
            return 0
        # Begin -- Boot Mode preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            extended_session_control= True,
            start_tester_present= True,
            dtc_settings = False,
            communication_control= False,

            expected={
                'response'   : 'Positive'
            }
        )
        test.preconditions(current_step='test_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            request_seed='01',
            send_key='01'
        )
        test.step(
            step_title=name,
            custom='10 02'
        )
        for rid in self.bootmode_rids:
            if rid in ['FF00', '0209']:
                print('RID', rid, 'will erase SW memory, will not execute.')
            # End -- Boot Mode preconditions
            else:
                test.preconditions(
                   step_info=info()
                )
                test.step(
                    step_title=name,
                    custom='31 01 {} {}'.format(
                        self.bootmode_rids[0],
                        supported_rids[self.bootmode_rids[0]][1]
                    ),
                    expected={
                        'response': 'Positive'
                    }
                )

    def test_001_2(self, name='repeat for all supported DIDs - startRoutine - 0x01'):
        if not any(self.bootmode_rids):
            print('%s does not support BOOTMODE RIDs'%device_under_test)
            return 0       
        for rid in self.bootmode_rids:
            if rid in ['FF00', '0209']:
                print('RID', rid, 'will erase SW memory, will not execute.')
            # End -- Boot Mode preconditions
            else:
                test.preconditions(
                    step_info=info()
                )
                test.step(
                    step_title=name,
                    custom='31 01 {} {}'.format(rid, supported_rids[rid][1]),
                    expected={
                        'response': 'Positive'
                    }
                )

    def test_002(self, name='programmingSession - startRoutine - 0x01 -- functional'):
        if not any(self.bootmode_rids):
            print('%s does not support BOOTMODE RIDs'%device_under_test)
            return 0
        for rid in self.bootmode_rids:
            if rid in ['FF00', '0209']:
                print('RID', rid, 'will erase SW memory, will not execute.')
            # End -- Boot Mode preconditions
            else:
                test.preconditions(
                    step_info=info(),
                    functionalAddr=True
                )
                test.step(
                    step_title=name,
                    custom='31 01 {} {}'.format(
                        self.bootmode_rids[0],
                        supported_rids[self.bootmode_rids[0]][1]
                    ),
                    expected={
                        'response': 'Positive'
                    }
                )

    def test_002_2(self, name='repeat for all supported DIDs - startRoutine - 0x01 -- functional'):
        if not any(self.bootmode_rids):
            print('%s does not support BOOTMODE RIDs'%device_under_test)
            return 0
        for rid in self.bootmode_rids:
            if rid in ['FF00', '0209']:
                print('RID', rid, 'will erase SW memory, will not execute.')
            # End -- Boot Mode preconditions
            else:
                test.preconditions(
                    step_info=info(),
                    functionalAddr=True
                )
                test.step(
                    step_title=name,
                    custom='31 01 {} {}'.format(rid, supported_rids[rid][1]),
                    expected={
                        'response': 'Positive'
                    }
                )
#====================== no rids for programming session for 0x02
    def test_003(self, name='programmingSession - stopRoutine - 0x02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_003_2(self, name='repeat for all supported DIDs - stopRoutine - 0x02'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_004(self, name='programmingSession - stopRoutine - 0x02 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_004_2(self, name='repeat for all supported DIDs - stopRoutine - 0x02 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_005(self, name='programmingSession - requestRoutineResults - 0x03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_005_2(self, name='repeat for all supported DIDs - requestRoutineResults - 0x03'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_006(self, name='programmingSession - requestRoutineResults - 0x03 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )

    def test_006_2(self, name='repeat for all supported DIDs - requestRoutineResults - 0x03 -- functional'):
        if device_under_test in ['ARB', 'PTM', 'SCL', 'MSM', 'TCP']:
            print('Test not applicable for %s'%device_under_test)
            return 0

        # -- PLACE HOLDER --
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE'
        )
    def test_015(self, name='defaultSession in extendedSession'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            default_session_control=True,

            expected={
                'response'   : 'Positive',
                'dataLength':  4
            }
        )
        test.restart_communication()