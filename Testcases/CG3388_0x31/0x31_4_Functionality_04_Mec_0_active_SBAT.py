#Modified by: Mauricio Perea        Date: 5-Nov-20

from framework.shared_functions import tools, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x31'
        )

        self.all_FFs_byte_seed = ' '.join(('FF '*31).split())
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_157(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info(),
            mec_zero=True, 
            sbat=True       
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_158(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
    def test_160(self, name='<Start Routine> Physical Address Req'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_161(self, name='<Unlock Security Level 01, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_162(self, name='<Unlock the Server via security access 01 service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_163(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_164(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)


    def test_166(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_167(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_168(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_170(self, name='<Start Routine> Physical Address Req'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 03 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_171(self, name='<Unlock Security Level 03, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_172(self, name='<Unlock the Server via security access 03 service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_173(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_174(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_176(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_177(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_178(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_180(self, name='<Start Routine> Physical Address Req'):
        if device_under_test is 'SCL':
            print('This test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 7A 02',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test in ['ARB','TCP']:
            test.step(
                step_title=name,
                custom='31 01 02 C0 00',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test == 'PTM':#no suitable rid
            test.step(
                step_title=name,
                custom='31 01 03 42 00 00',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )       
    def test_181(self, name='<Unlock Security Level 09, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_182(self, name='<Unlock the Server via security access 09 service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_183(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 7A 02',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test is 'SCL':
            test.step(
                step_title=name,
                custom='31 01 FF 01',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB','TCP']:
            test.step(
                step_title=name,
                custom='31 01 02 C0 00',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test == 'PTM': 
            test.preconditions(
                step_info=info(),
                signal=['RCIP_RrClsrMtnCtlParmEnblAuth','SrlDat2_Prtctd_PDU',1]                
                ) 
            time.sleep(5)           
            test.step(
                step_title=name,
                custom='31 01 03 42 00 00',
                expected={
                    'response': 'Positive'
                }
            )
    def test_184(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_186(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_187(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_188(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_190(self, name='<Start Routine> Physical Address Req'):
        if device_under_test is 'SCL':
            print(name, 'Test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APLICABLE', #no suitable RID for MSM and PTM
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_191(self, name='<Unlock Security Level 0B, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_192(self, name='<Unlock the Server via security access 0B service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_193(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='NOT APLICABLE', #no suitable RID for MSM and PTM
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test is 'SCL':
            test.step(
                step_title=name,
                custom='31 01 FF 01',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test == 'TCP':
            test.step(
                step_title=name,
                custom='31 01 02 C0 00',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['PTM','ARB']:
            test.step(
                step_title=name,
                custom='NOT APLICABLE', #no suitable RID for MSM and PTM
                expected={
                    'response': 'Positive'
                }
            )
    def test_194(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_196(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_197(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_198(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_200(self, name='<Start Routine> Physical Address Req'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 7B 02',#31 01 02 7A 01 --> 22 4B 4E
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test == 'TCP':
            test.step(
                step_title=name,
                custom='31 01 02 C0 00',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test in ['PTM','ARB']:
            test.step(
                step_title=name,
                custom='31 01 03 41 00 00',#no suitable rid
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test is 'SCL':
            print(name, 'Test is not supported by %s'%device_under_test)
    def test_201(self, name='<Unlock Security Level 0D, ServiceProgramming>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_202(self, name='<Unlock the Server via security access 0D service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_203(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 7B 02',#31 01 02 7A 01 --> 22 4B 4E
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test is 'SCL':
            test.step(
                step_title=name,
                custom='31 01 FF 01',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB','TCP']:
            test.step(
                step_title=name,
                custom='31 01 02 C0 00',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test == 'PTM': #no suitable rid
            test.preconditions(
                step_info=info(),
                signal=['RCIP_RrClsrMtnCtlParmEnblAuth','SrlDat2_Prtctd_PDU',1]                
                ) 
            time.sleep(8)    
            test.step(
                step_title=name,
                custom='31 01 03 41 00 00',
                expected={
                    'response': 'Positive'
                }
            )

    def test_204(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_206(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_207(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_208(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_210(self, name='<Start Routine> Physical Address Req'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  55 1B AF A3 B9 5A 64 DF 9B 40 B8 FD 17 A4 74 33 E1 C9 44 E9 18 F2 20 54 B9 E6 B0 65 A8 3E 73 28 3E C4 F4 B2 F3 70 F7 43 52 FF BD B6 83 BE 82 DB 49',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )
    def test_211(self, name='<Unlock Security Level 11, ServiceProgramming>'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            communication_control=False,  # updated by HC  add
            request_seed='11',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_212(self, name='<Unlock the Server via security access 11 service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_213(self, name='<Verify Server is enforcing ECU Service Programming Routine>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 00 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  55 1B AF A3 B9 5A 64 DF 9B 40 B8 FD 17 A4 74 33 E1 C9 44 E9 18 F2 20 54 B9 E6 B0 65 A8 3E 73 28 3E C4 F4 B2 F3 70 F7 43 52 FF BD B6 83 BE 82 DB 49',
            expected={
                'response': 'Positive'
            }
        )

    def test_214(self, name='Send valid testerPresent, service 3E, within P3 for 2 minutes + Stop periodically transmitted TesterPresent and wait for S3 Timeout + 100 msec, 5.1 seconds, for the Session Timing parameter to timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)
        test.preconditions(current_step='- Stop tester present -')
        test.step(step_title='- Stop tester present -',
                    stop_tester_present=True)
        tools.timer.input('Wait for S3 Timeout + 100ms', timeout=6)

    def test_216(self, name='<Verify return to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_217(self, name='Pyrotechnic ECU Test'):
        pass

    def test_218(self, name='Pyrotechnic ECU Test'):
        pass

    def test_220(self, name='Pyrotechnic ECU Test'):
        pass

    def test_221(self, name='Pyrotechnic ECU Test'):
        pass

    def test_222(self, name='Pyrotechnic ECU Test'):
        pass

    def test_223(self, name='Pyrotechnic ECU Test'):
        pass

    def test_224(self, name='Pyrotechnic ECU Test'):
        pass

    def test_226(self, name='Pyrotechnic ECU Test'):
        pass



