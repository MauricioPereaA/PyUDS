
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import device_under_test, tools, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False,
            excel_tab='Corp Standard DTCs',
            step_delay=0.002
        )
        self.under_voltage_DTC = 'F0 03 16'

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001_1(self, name='Clear DTCs after 5 seconds'):
        
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        )
        time.sleep(5)
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_001_2(self, name='read DTCs 1'):
        test.preconditions(
            step_info=info()
        )
        time.sleep(5)
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data'    : 'FF'
            }
        )

    def test_002_1(self, name='read DTC 2'):

        test.preconditions(
            step_info=info()
        )
        test.set_dtc_condition(underVoltage=True)
        test.canoe.set_envVariable(underVoltageCondition=1)        
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data'    : 'FF'
            }
        )

    def test_002_2(self, name='wait 5 seconds + read DTC 3 - LostComm DTC should be activated'):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialdata': '%s 2F'%self.under_voltage_DTC
            }
        )
        print(__name__, '== LostComm DTC should be active! ==')

    def test_003_1(self, name='Clear DTCs after 5 seconds - 2'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_003_2(self, name='read DTCs 1'):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialdata': '%s 2F'%self.under_voltage_DTC
            }
        )

    def test_004(self, name='normalVoltage Conditions + 4 seconds delay'):
#        test.set_dtc_condition(underVoltage=False)
        test.power_supply_reset_default()
        test.canoe.set_envVariable(underVoltageCondition=0)
        test.preconditions(
            step_info=info()
        )
        time.sleep(4)
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialdata': '%s 2E'%self.under_voltage_DTC
            }
        )
            # Step delay is set for 200ms already
        print(__name__, 'Verify No Lost Comm DTCs set')

    def test_005_1(self, name='delay 4 seconds + read DTCs - DTC should be set'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_005_2(self, name='read DTC 2'):
        test.preconditions(
            step_info=info()
        )
        time.sleep(5.1)
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data'    : 'FF'
            }
        )
