
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x14'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_002(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_004(self, name='<Transition Server to safetySystemDiagnosticSession> '):
        return 0 # PLACE HOLDER for ECUs supporting safetySystemDiagnosticSession

    def test_005(self, name='Send Clear DTCs request'):
        return 0 # PLACE HOLDER for ECUs supporting safetySystemDiagnosticSession

    def test_006(self, name='requestOutOfRange - 0x31'):
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            custom='14 00 00 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_008(self, name='conditionsNotCorrect - 0x22'):
        if device_under_test in 'ARB': #Add your ECU here if it is non-OBD Compliant
            #this step is not applicable
            return 0
        else: #OBD Compliant ECUs:
            test.preconditions(
                step_info=info()
            )
            test.set_dtc_condition(overVoltage=True),
            test.step(
                step_title=name,
                custom='14 FF FF FF',
                expected={
                    'response': 'Negative',
                    'data': '22'
                }
            )
