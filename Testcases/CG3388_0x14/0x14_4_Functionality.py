
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test, pn_dict, tools        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x14'
        )
#         Add by YCC
        tools.popup.info(title='CAPL Implementation',
            description='Make sure you are running this test on PyUDS modified RBS'+\
                ' with CAPL implementation for Lost Communication DTCs.')

        ''' Device Under Test - Settings '''      #   __________Edit by YCC 
#         self.protected_message = random.choice(     # Pick random message to be tested
#             list(pn_dict[device_under_test]['protected_messages'].keys())
#         )
#         self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']

        self.protected_message = list(pn_dict[device_under_test]['protected_messages'].keys())[1]
         
        # = DTCs to verify =
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']
        print(self.DTC)

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='<Transition Server to defaultSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Waiting 5 seconds', timeout=5)

    def test_002(self, name='<Clear All DTCs>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,      # functional address request    Add by YCC
            power_mode='RUN'
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )
    tools.timer.input('Wait for ', timeout=1)  #add
    def test_004(self, name='<Read status of DTCs> - <Verify No DTCs are set>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 0A',
            expected={
                'response': 'Positive',
                'partialData': '%s 00'%self.DTC
            }
        )

    def test_007(self, name='<Create fault conditions which would result in setting a DTC> - <Read status of DTCs> - <Verify DTC is set>'):
#        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
#        tools.timer.input('Waiting 5 seconds', timeout=5)
        test.preconditions(
            step_info=info()            
        )
        # Set DTC Conditions
        print(self.protected_message)
        test.canoe.set_envVariable(**dict({self.protected_message:1}))
        tools.timer.input('Wait for ', timeout=6)
        test.step(
            step_title=name,
            custom='19 0A',
            expected={
                'response': 'Positive',
                'partialData': '%s 2F'%self.DTC
            }
        )

    def test_009(self, name='<Clear All DTCs>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True     # functional address request   Add by YCC
        )
        
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False     -----Delete by YCC ,because there no this step in the test case
        time.sleep(6) 
        
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_011(self, name='<Read status of DTCs> - <Verify DTC has been cleared>'):
    
        test.preconditions(
            step_info=info()
        )
        
        time.sleep(1)
        
        test.step(
            step_title=name,
            custom='19 0A',
            expected={
                'response': 'Positive',
                'partialData': '%s 00'%self.DTC
            }
        )

