
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Start Routine Ethernet Cable Diagnostic Test'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 03 C2 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_002(self, name='Transition to extendedSession, Application Mode'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_003(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_004(self, name='Disable DTCs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            dtc_settings='off',
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='Disable Normal Communication'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            communication_control=False,
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='Access Security Request Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_007(self, name='Access Security Send Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_008(self, name='Transition to programmingSession, Installer'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            programming_session_control=True,
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_009(self, name='Start Routine Peripheral System Update'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 03 C2 00',
            expected={
                'response': 'Positive'
            }
        )

    def test_010(self, name='Request Routine Results Peripheral System Update'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 03 C2',
            expected={
                'response': 'Positive'
            }
        )

    def test_011(self, name='Transition to programmingSession, Installer'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            programming_session_control=True,
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_012(self, name='Start Routine Peripheral System Update'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 03 C2 00',
            expected={
                'response': 'Positive'
            }
        )

    def test_013(self, name='Request Routine Results Peripheral System Update'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 02 03 C2',
            expected={
                'response': 'Positive'
            }
        )

