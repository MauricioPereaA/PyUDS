

            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from Testcases.TestClass import TestCase
from inspect import stack as info
from framework.tools.misc import timer
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False,
            excel_tab = 'Security Access'
        )
        self.all_FFs_byte_seed = ' '.join(('FF '*31).split())
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    
    def press_key_to_continue(self):
        timer.input('\nPress ENTER to Continue...', timeout=5, default=False)
    

    def test_007(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
            }
        )

    def test_008(self, name='Write MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 A0 FE',
            expected={
                'response': 'Positive'
            }
        )

    def test_009(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FE',
                'dataLength': '1'
            }
        )

    def test_010(self, name='Transition ECU power mode  from Off to Run'): #step 10
        test.preconditions(
            step_info=info(),
            ignition_switch=['OFF','RUN']                        
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FE'                #step11
            }
        )

    def test_013(self, name='Transition ECU power mode from Run to Off'):
        test.preconditions(
            step_info=info(),
            ignition_switch=['RUN','OFF']                        
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FD'                #step14
            }
        )
        
    def test_015(self, name='Transition ECU power mode from Off to Acc to Run to Start to Propulsion to Start to Run to Acc to Off'):
        test.preconditions(
            step_info=info(),
            ignition_switch=['OFF','ACC', 'RUN','START', 'PROP', 'START', 'RUN', 'ACC', 'OFF']
            
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FC'                #step16
            }
        )

    def test_017(self, name='Transition ECU power mode from OFF to PROP'):
        test.preconditions(
            step_info=info(),
            ignition_switch=['OFF','PROP'] 
        )
        
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FC'                #step18
            }
        )

    def test_020(self, name='Transition ECU power mode from Propulsion to Off'):
        test.preconditions(
            step_info=info(),
            ignition_switch=['PROP','OFF'] 
        )
        
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FB'                #step21
            }
        )
        
    def test_022(self, name='Transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    def test_023(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_024(self, name='Access Security Request Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_025(self, name='Access Security Send Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_026(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FB'
            }
        )

    def test_027(self, name='Write MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 A0 FA',
            expected={
                'response': 'Positive'
            }
        )

    def test_028(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FA'
            }
        )

        test.restart_communication()  #steps 29, 30, 31, 32

    def test_033(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )
        test.restart_communication()
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': 'FA'
            }
        )


    def test_034(self, name='Write new MEC value = 00'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 A0 00',
            expected={
                'response': 'Positive'
            }
        )

    def test_035(self, name='Verify new MEC value has been written'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': '00'
            }
        )

    def test_036(self, name='Transition to extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_037(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_038(self, name='Access Security Request Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_039(self, name='Access Security Send Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )


    def test_040(self, name='Write MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 A0 FF',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_041(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': '00'
            }
        )
