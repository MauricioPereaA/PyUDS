
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import write_supported_dids, read_supported_dids
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Scanner',
            step_delay=0.025
        )

        self.supported_dids = read_supported_dids
        self.supported_write_dids = tuple(write_supported_dids.keys())

        ##  ========  REQUIRES CUSTOMIZATION  ========  ##
        ##      Please specify below Services which     ##
        ##        deviate from GB6000 if applies.       ##
        self.read_dids_deviate_from_ODX = (
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER'
        )
        self.write_dids_deviate_from_ODX = (
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER'
        )
        ## ====== REQUIRES CUSTOMIZATION ====== ##

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def format_hex(self, decimal):
        return hex(decimal).replace('0x','').upper().rjust(4,'0')

    def test_003(self, name='write all dids'):
        test.preconditions(step_info=info())
        #for i in range(65536):
        for i in range(6):
            supported = True if self.format_hex(i) in self.supported_write_dids else False
            if not supported:
                test.step(
                    step_title='Write ' + self.format_hex(i),
                    custom='2E ' + self.format_hex(i) + '00',
                    expected={
                        'response': 'Negative',
                        'data': '31'
                    }
                )

    def test_004(self, name='write dids which deviate from GB6000'):
        if not len(self.write_dids_deviate_from_ODX) > \
            self.write_dids_deviate_from_ODX.count('THIS IS A PLACEHOLDER'):
            print('Theres no read dids that deviates from GB6000\n',
                    'if any, please specify from %s test script.'%__name__)
            return 0
        for write_dids in self.write_dids_deviate_from_ODX:
                test.preconditions(
                    step_info=info()
                )
                test.step(
                    step_title=write_dids,
                    custom='2E '+ write_dids + '00',
                    expected={
                        'response': 'Negative',
                        'unexpected_response': True,
                        'data': '31'
                    }
                )

