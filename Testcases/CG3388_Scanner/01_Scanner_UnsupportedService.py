
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import supported_services
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Scanner',
            step_delay=0.020
        )

        self.supported_services = tuple(supported_services.keys())

        ##  ========  REQUIRES CUSTOMIZATION  ========  ##
        ##      Please specify below Services which     ##
        ##        deviate from GB6000 if applies.       ##
        self.services_deviate_from_GB6000 = (
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER'
        )
        ## ====== REQUIRES CUSTOMIZATION ====== ##

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def format_hex(self, decimal):
        return hex(decimal).replace('0x','').upper().rjust(2,'0')

    def test_001(self, name='request from 0x00 to 0x39 and 0x80 to 0xBF'):
        test.preconditions(step_info=info())
        for i in range(0, 58): # From 0x00 to 0x39
            supported = True if self.format_hex(i) in self.supported_services else False
            if not supported: # Test only Unsupported Services as per CG3388
                test.step(
                    step_title='{}::{}'.format(name, self.format_hex(i)),
                    custom=self.format_hex(i),
                    expected={
                        'response': 'Negative',
                        'data': '11'
                    }
                )
        for i in range(128, 192): # From 0x80 to 0xBF
            supported = True if self.format_hex(i) in self.supported_services else False
            if not supported: # Test only Unsupported Services as per CG3388
                test.step(
                    step_title='{}::{}'.format(name, self.format_hex(i)),
                    custom=self.format_hex(i),
                    expected={
                        'response': 'Negative',
                        'data': '11'
                    }
                )

    def test_002(self, name='Services which deviate from GB6000'):
        if not len(self.services_deviate_from_GB6000) > \
            self.services_deviate_from_GB6000.count('THIS IS A PLACEHOLDER'):
            print('Theres no Services that deviates from GB6000\n',
                    'if any, please specify from %s test script.'%__name__)
            return 0
        for service in self.services_deviate_from_GB6000:
                test.preconditions(
                    step_info=info()
                )
                test.step(
                    step_title=service,
                    custom=service,
                    expected={
                        'response': 'Negative',
                        'unexpected_response': True,
                        'data': '11'
                    }
                )