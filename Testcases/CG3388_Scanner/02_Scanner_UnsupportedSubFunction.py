
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import supported_services
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Scanner',
            step_delay=0.020
        )
        self.services = [
            s for s in supported_services.keys() if any(supported_services[s])
        ]

        ##  ========  REQUIRES CUSTOMIZATION  ========  ##
        ##      Please specify below Services which     ##
        ##        deviate from GB6000 if applies.       ##
        self.services_deviate_from_GB6000 = (
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER',
            'THIS IS A PLACEHOLDER'
        )
        ## ====== REQUIRES CUSTOMIZATION ====== ##

               

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def format_hex(self, decimal):
        return hex(decimal).replace('0x','').upper().rjust(2,'0')

    def test_001(self, name='request from 0x00 to 0xFF'):
        for service in self.services:
            data = 'FF 01' if service == '31' else ('FF' if service in ['2A', '28'] else '')
            for subfunc in range(256): # From 0x00 to 0xFF
                if not self.format_hex(subfunc) in supported_services[service]:
                    if 'EXTENDED' in supported_services[service] and subfunc==0:
                        test.preconditions(current_step='precondition')
                        test.step(step_title='Extended Session',
                                    extended_session_control=True,
                                    start_tester_present=True)
                    
                    test.preconditions(
                        step_info=info()
                    )
                    test.step(
                        step_title=service + self.format_hex(subfunc),
                        custom=service + self.format_hex(subfunc) + data,
                        expected={
                            'response': 'Negative',
                            'data': '12'
                        }
                    )

    def test_002(self, name='Services which deviate from GB6000'):
        if not len(self.services_deviate_from_GB6000) > \
            self.services_deviate_from_GB6000.count('THIS IS A PLACEHOLDER'):
            print('Theres no Services that deviates from GB6000\n',
                    'if any, please specify from %s test script.'%__name__)
            return 0
        for service in self.services_deviate_from_GB6000:
            for subfunc in range(256): # From 0x00 to 0xFF
                test.preconditions(
                    step_info=info()
                )
                test.step(
                    step_title=service + self.format_hex(subfunc),
                    custom=service + self.format_hex(subfunc),
                    expected={
                        'response': 'Negative',
                        'unexpected_response': True,
                        'data': '12'
                    }
                )

