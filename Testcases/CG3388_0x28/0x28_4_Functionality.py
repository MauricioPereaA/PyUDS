
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import tools, pn_dict,device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x28'
        )
        message = 'This test requires user input to confirm behaviors.'+\
            '\nPlease standby and wait for prompts to popup.'
        print(__name__, message)
        tools.popup.warning(title='User input required',
                                description=message)
                                
        self.protected_message = list(pn_dict[device_under_test]['protected_messages'].keys())[0]                                
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']
        
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_004(self, name='<Disable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_005')

    def test_006(self, name='<Transmit request 5 times for a period of 2 minutes>'):
        test.preconditions(
            step_info=info()
        )
        print('<Verify normal communication disabled during diagnostic session active>')
        for _ in range(5):
            test.step(
                step_title=name,
                custom='28 03 01',
                expected={
                    'response': 'Positive'
                }
            )
            tools.timer.input('Wait for ', timeout=24)
            
        

    def test_007(self, name='<Verify that normal communication message remains disabled for the duration the diagnostic session is kept active>'):
        test.preconditions(
            step_info=info()
        )
        
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_007')

    def test_008(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_009(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_011(self, name='<Disable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_012(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_012')

    def test_013(self, name='<Transmit request 5 times for a period of 2 minutes>'):
        test.preconditions(
            step_info=info()
        )

        print('<Verify normal communication disabled during diagnostic session active>')
        for _ in range(5):
            test.step(
                step_title=name,
                custom='28 03 01',
                expected={
                    'response': 'Positive'
                }
            )
            tools.timer.input('Wait for ', timeout=24)


    def test_014(self, name='<Verify that normal communication message remains disabled for the duration the diagnostic session is kept active>'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_014')

    def test_015(self, name='testerPresent Timeout'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_017(self, name='Stop periodically transmitted TesterPresent and wait'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Wait for ', timeout=6)

    def test_018(self, name='<Verify testerPresent Timeout>'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_018')

    def test_019(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_020(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_022(self, name='<Disable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_023(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info(),   
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_023')

    def test_024(self, name='Disable/Enable normal communications (Physical Addressing) 2Min'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        tools.timer.input('Wait for ', timeout=120)
        test.step(
            step_title=name,
            custom='28 00 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_025(self, name='Observe normal communication message is enabled'):
        test.preconditions(
            step_info=info(),   
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_025')

    def test_026(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_027(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_028_1(self, name='<Clear All DTCs>'):
        test.preconditions(
            step_info=info(),
        #    power_mode='RUN'
            functionalAddr=True          #add

        )
        test.step(
            step_title=name,
            default_session_control=True,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )
        

    def test_028_2(self, name='<ReadDTCInformation>'):
    
        #Set a Loss of Comm DTC:
        test.canoe.set_envVariable(**dict({self.protected_message: 1}))
        time.sleep(6)      

        test.preconditions(
            current_step='ReadDTC - Preconditions'
        )
        
        test.step(
            step_title='ReadDTC - Preconditions',                    
            extended_session_control=True,
            start_tester_present=True
        )
                      
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data_dtc': (test.initial_dtcs, self.DTC)                
            }
        )

    def test_030(self, name='<Disable Normal Communication>'):
    
        #Clear a Loss of Comm DTC:
        test.canoe.set_envVariable(**dict({self.protected_message: 0}))
        time.sleep(6)
        
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_031(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info(),   
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_031')

    def test_032(self, name='<ReadDTCInformation>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialdata': '2E'
            }
        )

    def test_033(self, name='<Enable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        tools.timer.input('Wait for ', timeout=120)
        test.step(
            step_title=name,
            custom='28 00 01',
        )   

        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_033')
#add
    def test_033_2(self, name='Observe normal communication message is enabled'):
        test.preconditions(
            step_info=info(),   
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_033_2')          
#
    def test_034(self, name='<ReadDTCInformation>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialdata': '2E'
            }
        )

    def test_035(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_036(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_038(self, name='<Disable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
            
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_039(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info(),   
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_039')

    def test_040(self, name='<Enable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        tools.timer.input('Wait for ', timeout=120)
        test.step(
            step_title=name,
            custom='28 00 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_041(self, name='Observe normal communication message is enabled'):
        test.preconditions(
            step_info=info(),   
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_041')

    def test_042(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_043(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_044_1(self, name='<Clear All DTCs>'):
        test.preconditions(
            step_info=info(),
        #    power_mode='RUN'
            functionalAddr=True           #add

        )
        test.step(
            step_title=name,
            default_session_control=True, 
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_044_2(self, name='<ReadDTCInformation>'):
    
        #Set a Loss of Comm DTC:
        test.canoe.set_envVariable(**dict({self.protected_message: 1}))
        time.sleep(6) 
               
        test.preconditions(
            current_step='ReadDTC - Preconditions'
        )
        
        test.step(
            step_title='ReadDTC - Preconditions',                    
            extended_session_control=True,
            start_tester_present=True
        )
                      
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data_dtc': (test.initial_dtcs, self.DTC)                 
            }
        )

    def test_046(self, name='<Disable Normal Communication>'):
    
        #Clear a Loss of Comm DTC:
        test.canoe.set_envVariable(**dict({self.protected_message: 0}))
        time.sleep(6) 
        
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_047(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_047')

    def test_048(self, name='<ReadDTCInformation>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialdata': '2E'
            }
        )

    def test_049_1(self, name='<Enable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='28 00 01',
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_049')

    def test_049_2(self, name='Observe normal communication message is enabled'):
        test.preconditions(
            step_info=info(),   
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_049_2')         
         

    def test_050(self, name='<ReadDTCInformation>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialdata': '2E'
            }
        )

    def test_052(self, name='<Disable Normal Communication>'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_053(self, name='Observe normal communication message is disabled'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_053')

    def test_054(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_055(self, name='<Verify that normal communicaton remains disabled during session change from extendedSession to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_055')

    def test_056(self, name='<Transition Server to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_057(self, name='<Verify that normal communicaton is enabled during session change from extendedSession to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        prompt = tools.popup.ask(title=name, description=name)
        test.compare(True, prompt, step='test_057')
