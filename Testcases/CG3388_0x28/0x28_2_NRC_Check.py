
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test, tools  
#           
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x28'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='serviceNotSupportedInActiveSession'):
        test.canoe.set_envVariable(TransmitInOFFInfinite=1)
        time.sleep(2)#set for reminding OFF mode
        test.preconditions(
            step_info=info(),            
        )

        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

# Placeholder for pyrotechnic tests ..
    def test_003(self, name='This test is only applicable to Pyrotechnic ECUs ..'):
        pass

    def test_004(self, name='This test is only applicable to Pyrotechnic ECUs ..'):
        pass
    '''
    def test_005(self, name='serviceNotSupportedInActiveSession'):
        test.preconditions(
            step_info=info(),            
        )

        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    '''
    def test_005(self, name='Transition Server to defaultSession'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='extendedSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_007(self, name='tester present'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
    '''
    def test_008(self, name='incorrectMessageLengthOrInvalidFormat'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='28',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_009(self, name='incorrectMessageLengthOrInvalidFormat_2'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='28 00 01 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_010(self, name='incorrectMessageLengthOrInvalidFormat_3'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            custom='28 03 01 00',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )
    '''#delect in new template
    def test_009(self, name='power_mode Invalid conditions'):
        if device_under_test in ['PTM','MSM']:
            tools.popup.warning(__name__, 'Not applicable')
            return 0
        test.set_dtc_condition(overVoltage=True)
        test.canoe.set_envVariable(overVoltageCondition=1)
        power_mode='RUN'        
        time.sleep(6)        
        test.preconditions(
            step_info=info(),
            power_mode='OFF', 
            functionalAddr=True,                 #this maybe is an software issue, we cannot find any precondition to ran
            signal=[
                'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 20
            ]
        )  
        test.step(
            step_title=name,
            custom='28 00 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )        
#==============ADD
    
    '''       
    def test_012_01(self, name='power_mode Invalid conditions_1'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF', #RUN --> OFF
#             functionalAddr=True  # according CG this step is physical adress
        )  
        test.step(
            step_title=name,
            custom='28 00 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
        
    def test_012_02(self, name='power_mode Invalid conditions_2'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN', 
#             functionalAddr=True  # according CG this step is physical adress
        )  
        test.step(
            step_title=name,
            custom='28 00 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
    def test_012_03(self, name='power_mode Invalid conditions_3'):
        test.preconditions(
            step_info=info(),
            power_mode='ACC', #RUN --> ACC
#             functionalAddr=True  # according CG this step is physical adress
        )  
        test.step(
            step_title=name,
            custom='28 00 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
    '''
#============
    def test_010(self, name='power_mode Invalid conditions_2'):
        if device_under_test in ['PTM','MSM']:
            tools.popup.warning(__name__, 'Not applicable')
            return 0 
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
   
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_012(self, name='power_mode Invalid conditions_3'):
        #Cleanup previous conditions
        test.power_supply_reset_default()
        test.canoe.set_envVariable(overVoltageCondition=0)
        time.sleep(6) 
        
        test.preconditions(
            step_info=info(),
            power_mode='ACC'
        )
        time.sleep(2)
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
    def test_013(self, name='suppressPosRspMsgIndicationBit = TRUE'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        ) 
        time.sleep(2)
        test.step(
            step_title=name,
            custom='28 83 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
    def test_014 (self, name='requestOutOfRange'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='28 00 01',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_015(self, name='requestOutOfRange'):
        test.preconditions(
            step_info=info(),    
            power_mode='OFF'       
        )
        test.step(
            step_title=name,
            custom='28 03 FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )
