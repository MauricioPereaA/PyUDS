
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
        
from framework.shared_functions import device_under_test, keys
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False,
            excel_tab='0x31 Device Limits Exceeded'
        )

        self.RID = {
            'ARB' : {
                'routine1': '04 1A', #Clear WakeUp Detection Recrods
                'control1': '',

                'routine2': '02 72',
                'control2': '',
                
                'routine3': '02 00',
                'control3': '00'
            },
            'PTM' : {
                'routine1': '03 00',
                'control1': '',

                'routine2': '03 3D',
                'control2': 'FF'

            },
            'MSM' : {
                'routine1': '03 00',
                'control1': '',

                'routine2': '02 7C',
                'control2': 'FF'

            },
            'SCL' : {
                'routine1': 'FF 01',
                'control1': '',

                'routine2': 'FF 00',
                'control2': 'FF'
            },
            'TCP' : {
                'routine1': '03 00',
                'control1': '',

                'routine2': '02 C3',
                'control2': ''
            }

        }

        self.dut_rids = self.RID[device_under_test]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_002(self, name='Transition to Extended Diagnostic Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_003(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_005(self, name='Create valid conditions - Request Routine Control RID  0xXXX1'):
        test.preconditions(
            step_info=info()
        )     
        test.step(
            step_title=name,
            custom='31 01 {0} {1}'.format(
                self.dut_rids['routine1'],
                self.dut_rids['control1']
            ),
            expected={
                'response': 'Positive'
            }
        )

    def test_007(self, name='Create invalid conditions - Request Routine Control RID  0xXXX2'):
        if device_under_test in ['ARB', 'SCL']:
            test.preconditions(
                current_step='RID_Preconditions'
                #signal=[
                #    'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                #    'PSP_PrplSysActvAuth', 'PrplStat_Prtctd_PDU', 1
                #]
            )
        if device_under_test in ['MSM', 'PTM']:
            test.preconditions(
                current_step='RID_Preconditions',
                signal=[
                    'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                    'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1
                ]
            )
        test.step(
            step_title='RID_Preconditions',
            request_seed='0D',
            send_key='0D'
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 72 %s'%keys[device_under_test]['provision_key'][0],
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_008(self, name='Verify rejecting the request to start the Routine Control RID 0xXXX2 does not affect the active Routine Control RID 0xXXX1'):
        if device_under_test is ['ARB', 'SCL']:
            test.preconditions(
                step_info=info(),
                signal=[
                    'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                    'PSP_PrplSysActvAuth', 'PrplStat_Prtctd_PDU', 0
                ]
            )
        if device_under_test in ['MSM', 'PTM']:
            test.preconditions(
                step_info=info(),
                signal=[
                    'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                    'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0
                ]
            )
        
        test.step(
            step_title=name,
            custom='31 01 {0} {1}'.format(
                self.dut_rids['routine1'],
                self.dut_rids['control1']
            ),
            expected={
                'response': 'Positive'
            }
        )

    def test_010(self, name='Control value out of range - Request Routine Control RID  0xXXX3'):
        if device_under_test is 'MSM':
            test.preconditions(
                current_step='RID_Preconditions'
            )
            test.step(
                step_title='RID_Preconditions',
                request_seed='09',
                send_key='09'
            )
        if device_under_test is 'SCL':
            # Begin -- Boot Mode preconditions
            test.preconditions(current_step='bootMode_Precondition')
            test.step(
                step_title='bootMode Precondition',
                extended_session_control=True,
                dtc_settings=False,
                communication_control=False,
                request_seed='01',
                send_key='01'
            )
            test.step(
                step_title='enter bootMode',
                programming_session_control=True
            )
            # End -- Boot Mode preconditions
            
        if device_under_test is 'ARB':  
           test.preconditions(
                current_step='RID_Preconditions'
            )
            
           test.step(
                step_title='Return to default session',
                default_session_control=True
            ) 
        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 {0} {1}'.format(
                self.dut_rids['routine3'],
                self.dut_rids['control3']
            ),
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_011(self, name='Verify rejecting the request to start the Routine Control RID 0xXXX3 does not affect the active Routine Control RID 0xXXX1'):
        if device_under_test is 'SCL':
            test.step(
                step_title='enter bootMode',
                default_session_control=True
            )
            time.sleep(1)
            if test.catch_error_frames():
                test.restart_communication()
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 {0} {1}'.format(
                self.dut_rids['routine1'],
                self.dut_rids['control1']
            ),
            expected={
                'response': 'Positive'
            }
        )

