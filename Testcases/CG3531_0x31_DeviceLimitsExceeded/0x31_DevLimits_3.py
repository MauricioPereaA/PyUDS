
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #

from framework.shared_functions import device_under_test, tools      
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        testcase_not_supported_ecus = ['SCL', '..', '#PLACEHOLDER#']
        if device_under_test in testcase_not_supported_ecus:
            raise Warning(__name__, 'is not supported by %s'%device_under_test)
            
        test.begin(
            test_info=info(),
            writeTestResults=False,
            excel_tab='0x31 Device Limits Exceeded'
        )

        self.RID = {
            'ARB' : {
                'routine1': '02 1E',
                'control1': '',

                'routine2': '02 1E',
                'control2': '',
                'code2'   : '04 06'

            },
            'PTM' : {
                'routine1': '02 05',
                'control1': '',

                'routine2': '02 04',
                'control2': '',
                'code2'   : '0A 13'

            },
            'MSM' : {
                'routine1': '02 05',
                'control1': '',

                'routine2': '02 04',
                'control2': '',
                'code2'   : '0A 13'

            },
            'TCP' : {
                'routine1': '02 05',
                'control1': '',

                'routine2': '02 04',
                'control2': '',
                'code2'   : '0A 13'

            }
        }

        self.dut_rids = self.RID[device_under_test]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_034(self, name='Power-up Initialization - Transition to Extended Diagnostic Session'):
        test.restart_communication()
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_035(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_036(self, name='Schedule DID 0xF246 at Medium Rate (200 ms)'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 02 46',
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input(
            'Please make sure service 0x2A has started transmitting 0xF246 periodically', timeout=5
        )

    def test_037(self, name='valid conditions - Request Routine Control RID 0xXXX6'):
        if device_under_test in ['MSM','PTM']:
            test.preconditions(
                current_step='RID Valid Conditions'
            )
            test.step(
                step_title='RID Valid Conditions',
                request_seed='03',
                send_key='03'
            )
            
        if device_under_test in ['ARB']:
            test.preconditions(
                current_step='RID Valid Conditions'
            )
            test.step(
                step_title='RID Valid Conditions',
                request_seed='01',
                send_key='01'
            )            
            
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 {0} {1}'.format(
                self.dut_rids['routine2'], self.dut_rids['control2']
            ),
            expected={
                'response': 'Positive'
            }
        )

    def test_038(self, name='Check Scheduled DID 0xF246 for transiton from a zero value to a non-zero value to determine if the I/O Control has been terminated'):
        tools.timer.input(
            'Please make sure 00 are maintained on 0x2A Transmission', timeout=5
        )

    def test_040(self, name='invalid conditions - Check Scheduled DID 0xF246 for transiton from a zero to a non-zero value'):
        if device_under_test in ['MSM', 'PTM']:
            test.preconditions(
                current_step='RID Invalid Conditions',
                signal=[ # Set invalid conditions
                    'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1
                ]
            )
            test.step(
                step_title='RID Invalid Conditions',
                request_seed='01',
                send_key='01'
            )
        if device_under_test is 'ARB':
            test.preconditions(
                current_step='RID Invalid Conditions', power_mode='RUN'
            )
            test.step(
                step_title='RID Invalid Conditions',
                #request_seed='01',
                #send_key='01'
            )
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 {0} {1}'.format(
                self.dut_rids['routine1'], self.dut_rids['control1']
            ),
            expected={
                'response': 'Negative',
                'data'    : '22'
            }
        )
        tools.timer.input(
            'Please make sure 00 have changed during 0x2A transmission', timeout=5
        )

    def test_041(self, name='Transition to Default Diagnostic Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

