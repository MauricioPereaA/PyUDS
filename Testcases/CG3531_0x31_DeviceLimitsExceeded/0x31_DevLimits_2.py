
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
        
from framework.shared_functions import device_under_test, tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=False,
            excel_tab='0x31 Device Limits Exceeded'
        )

        self.RID = {
            'ARB' : {
                'routine4': '02 1E',
                'control4': '',
                'code4': '04 06',

                'routine5': '04 1A',
                'control5': ''

            },
            'PTM' : {
                'routine1': '02 05',
                'control1': '',

                'routine2': '02 04',
                'control2': '',
                'code2'   : '0A 13'

            },
            'MSM' : {
                'routine1': '02 05',
                'control1': '',

                'routine2': '02 04',
                'control2': '',
                'code2'   : '0A 13'

            },
            'SCL' : {
                'routine1': '02 05',
                'control1': '',

                'routine2': '02 04',
                'control2': '',
                'code2'   : '0A 13'

            },
            'TCP' : {
                'routine1': '02 05',
                'control1': '',

                'routine2': '02 04',
                'control2': '',
                'code2'   : '0A 13'

            }
        }
        self.dut_rids = self.RID[device_under_test]  

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

 
    def test_014(self, name='Verify DID 0xF246 is supported in defaultSession and initialized to 0x00000000 at power-up'):
        test.restart_communication()
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            custom='22 F2 46',
            expected={
                'response': 'Positive',
                'data': '00 00 00 00'
            }
        )

    def test_017(self, name='Power reset & Transition to Extended Diagnostic Session'):
        test.preconditions(
            step_info=info()
        )
        test.restart_communication()
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_018(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_019(self, name='Verify DID 0xF246 is supported in extendedSession and initialized to 0x00000000 at power-up'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 46',
            expected={
                'response': 'Positive',
                'data': '00 00 00 00'
            }
        )

    def test_020(self, name='Transition to Safety Diagnostic Session'):
        if device_under_test in ['ARB','PTM','MSM','SCL','TCP']:
            print('Safety session not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 04',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_021(self, name='Activate TesterPresent - safetySession'):
        if device_under_test in ['ARB','PTM','MSM','SCL','TCP']:
            print('Safety session not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_022(self, name='Verify DID 0xF246 is not supported in safetySession'):
        if device_under_test in ['ARB','PTM','MSM','SCL','TCP']:
            print('Safety session not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 46',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_023(self, name='Transition to Default Diagnostic Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_024(self, name='Transition to Programming Diagnostic Session'):
        # Begin -- Boot Mode preconditions
        test.preconditions(current_step='test_009_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            extended_session_control=True,
            dtc_settings=False,
            communication_control=False,
            request_seed='01',
            send_key='01'
        )
        # End -- Boot Mode preconditions

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 02',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_025(self, name='Verify DID 0xF246 is not supported in programmingSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 46',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_026(self, name='Transition to Default Diagnostic Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_027(self, name='Transition to Default Extended Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
        #prompt = tools.popup.ask(title=name, description='POWER SUPPLY')

    def test_028(self, name='while in extendedSession under valid conditions - Request Routine Control RID 0xXXX4'):
    
        if device_under_test in ['ARB']:
        
            test.preconditions(current_step='Preconditions for Routine',             
                signal=[
                    'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                    'TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 1
                ]
            )
            
            test.step(
                step_title='Preconditions',
                default_session_control=True,
                extended_session_control=True,
                request_seed='01',
                send_key='01'
            )    
            
            # End -- Preconditions
            time.sleep(1)
            test.preconditions(
                step_info=info()
            )
            
            test.step(
                step_title=name,
                custom='31 01 {0} {1}'.format(
                    self.dut_rids['routine4'],
                    self.dut_rids['control4']
                ),
                expected={
                    'response': 'Positive'
                }
            )
            #prompt = tools.popup.ask(title=name, description='debug RID 33E')
            
        else:
            # Begin -- Preconditions
            test.preconditions(current_step='test_011__Precondition')
            test.step(
                step_title='Preconditions',
                default_session_control=True
            )
            test.restart_communication()
            test.step(
                step_title='Preconditions',
                default_session_control=True,
                extended_session_control=True,
                request_seed='03',
                send_key='03'
            )
            # End -- Preconditions
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='31 01 {0} {1}'.format(
                    self.dut_rids['routine2'],
                    self.dut_rids['control2']
                ),
                expected={
                    'response': 'Positive'
                }
            )
        
    
    def test_030(self, name='Create invalid conditions - Request Routine Control RID  0xXXX4'):
    
        if device_under_test in ['ARB']:

            test.preconditions(
                step_title='Preconditions', power_mode='RUN'
            )
            
            test.step(
                step_title=name,
                custom='31 01 {0} {1}'.format(
                    self.dut_rids['routine4'],
                    self.dut_rids['control4']
                ),
                expected={
                    'response': 'Negative',
                    'data'    : '22'                    
                }
            )
            
            test.preconditions(
                step_info=info()
            )  
            
            test.step(
                step_title=name,
                custom='22 F2 46',
                expected={
                    'response': 'Positive',
                    'data'    : self.dut_rids['routine4']+' '+self.dut_rids['code4']
                }
            )            
        
        else: 
            # Begin -- Execute routine
            if device_under_test in ['SCL']:
                test.preconditions(
                    current_step='Execute RID',
                    signal=[ # Set invalid conditions
                        'PSP_PrplSysActvAuth', 'PrplStat_Prtctd_PDU', 1
                    ]
                )
            if device_under_test in ['MSM', 'PTM']:
                test.preconditions(
                    current_step='Execute RID',
                    signal=[ # Set invalid conditions
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1
                    ]
                )
            test.step(
                step_title='Preconditions',
                default_session_control=True,
                extended_session_control=True,
                request_seed='03',
                send_key='03'
            )
            test.step(
                step_title=name,
                custom='31 01 {0} {1}'.format(
                    self.dut_rids['routine2'], self.dut_rids['control2']
                ),
                expected={
                    'response': 'Negative',
                    'data'    : '22'
                }
            )   
            # End -- Execute routine
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='22 F2 46',
                expected={
                    'response': 'Positive',
                    'data'    : self.dut_rids['routine2']+' '+self.dut_rids['code2']
                }
            )

    def test_031(self, name='Request Routine Control RID 0xXXX5'):
        if device_under_test in ['MSM', 'PTM']:
            test.preconditions(
                current_step='RID Valid Conditions',
                signal=[ # Set invalid conditions
                    'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0
                ]
            )
            test.step(
                step_title='RID Invalid Conditions',
                request_seed='01',
                send_key='01'
            )
        if device_under_test in ['SCL']:
            test.preconditions(
                current_step='RID Valid Conditions',
                signal=[ # Set invalid conditions
                    'PSP_PrplSysActvAuth', 'PrplStat_Prtctd_PDU', 0
                ]
            )
            test.step(
                step_title='RID Invalid Conditions',
                request_seed='01',
                send_key='01'
            )
                
        if device_under_test in ['ARB']:
        
            test.preconditions(
                step_info=info()
            )
            
            test.step(
                step_title=name,
                custom='31 01 {0} {1}'.format(
                    self.dut_rids['routine5'],
                    self.dut_rids['control5']
                ),
                expected={
                    'response': 'Positive'
                }
            )
            
        else:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='31 01 {0} {1}'.format(
                    self.dut_rids['routine1'],
                    self.dut_rids['control1']
                ),
                expected={
                    'response': 'Positive'
                }
            )

    def test_032(self, name='Verify contents of DID 0xF246 are reset to 0x00000000 when another I/O Control is requested and accepted'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 F2 46',
            expected={
                'response': 'Positive',
                'data': '00 00 00 00'
            }
        )

