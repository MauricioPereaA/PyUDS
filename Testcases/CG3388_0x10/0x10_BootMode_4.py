
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import time
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x10'
        )

        self.s3_timeout = 5 + 0.1 # S3 timeout + 100 msec

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='<Activate TesterPresent>'):
        # Begin -- Boot Mode preconditions
        test.preconditions(current_step='test_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            extended_session_control=True,
            dtc_settings=False,
            communication_control=False,
            request_seed='01',
            send_key='01'
        )
        test.step(
            step_title=name,
            custom='10 02'
        )
        # End -- Boot Mode preconditions
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_002(self, name='<Verify session remains active>'):
        test.preconditions(
            step_info=info()
        )
        for i in range(5):
            test.step(
                step_title=name+' - Repeating 5 times in 2 minutes - %s time'%i,
                custom='85 02',
                expected={
                    'response': 'Negative',
                    'data': '7F'
                }
            )
            time.sleep(24)

    def test_003(self, name='Activate Tester Present'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_004(self, name='Stop tester present'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )
        print(__name__, 'Waiting for S3 Timeout + 100 msec')
        time.sleep(self.s3_timeout)

    def test_005(self, name='Verify Server has transitioned to Application Mode, defaultSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='2E F1 DB 01 01', # no DID can alternate
            expected={
                'response': 'Positive'
            }
        )