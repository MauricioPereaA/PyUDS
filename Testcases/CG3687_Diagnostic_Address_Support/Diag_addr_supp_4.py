
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import ECU_info
from Testcases.TestClass import TestCase
from inspect import stack as info
from framework.shared_functions import tools, LogsPath
from framework.shared_libs.diagnostic_address_support import DiagAddrResp
import time
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Diagnostic Address Support'
        )
        self.tester = [ECU_info['name']+'_11_bit', ECU_info['name']+'_4']
        self.DiagAddrResp = DiagAddrResp(LogsPath+'\\TraceLog.asc')

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Pre-Programming Sequence'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )

        test.step(
            step_title=name,
            extended_session_control= True,
            start_tester_present= True,
            dtc_settings = False,
            communication_control= False,

            expected={
                'response'   : 'Positive'
            }
        )

    def test_002(self, name='Request Seed'):

        test.preconditions(
            step_info=info(),
            tester_id = self.tester[1]
        )

        test.step(
            step_title=name,
            request_seed='01',

            expected={
                'response'   : 'Positive',
                'dataLength':  31,
                'partialData': '00 '*30
            }
        )

    def test_003(self, name='Send Key'):
        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            send_key='01',

            expected={
                'response': 'Positive'

            }
       )

    def test_004(self, name='Transition to programmingSession'):

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title = name,
            programming_session_control = True,
            
            expected={
                'response'   : 'Positive'
            }
        )

    def test_005(self, name='Send a supported 11 bit Normal fixed addressing'):

        test.preconditions(
            step_info=info(),
            response_from_log = True,
            tester_id = self.tester[0],
            physical_id_rsp = '14DAF4A4x'
        )

        test.step(
            step_title = name,
            custom = '22 F1 B0',
            
            expected={
                'response'   : 'Positive'
            }
        )

    def test_006(self, name='Send a supported 29 bit Normal fixed addressing'):

        test.preconditions(
            step_info=info(),
            response_from_log = False,
            tester_id = self.tester[1]
        )

        test.step(
            step_title = name,
            custom = '22 F1 B0',
            
            expected={
                'response'   : 'Positive'
            }
        )

    def test_007(self, name='Send a supported 11 bit Normal fixed addressing which response requires Flow Control'):

        # *CHECKED* - Check-box
        test.canoe.set_envVariable(DiagnosticAddressSupport1=1)

        # *PUSH* - Run selected test cases
        test.canoe.set_envVariable(RunDiagnosticAddressSupportTC=1)
        time.sleep(0.75)
        test.canoe.set_envVariable(RunDiagnosticAddressSupportTC=0)
        test.canoe.set_envVariable(DiagnosticAddressSupport1=0)

        # Wait for Transport Layer Test Case to be finished
        print('Please wait until TC is completed...')
        time.sleep(15)
        test.compare(self.DiagAddrResp.test_case_flow_control_1(), True, 
                        step='test_007')

    def test_008(self, name='Send a supported 11 bit Normal fixed addressing which response requires Flow Control'):

        # *CHECKED* - Check-box
        test.canoe.set_envVariable(DiagnosticAddressSupport2=1)

        # *PUSH* - Run selected test cases
        test.canoe.set_envVariable(RunDiagnosticAddressSupportTC=1)
        time.sleep(0.75)
        test.canoe.set_envVariable(RunDiagnosticAddressSupportTC=0)
        test.canoe.set_envVariable(DiagnosticAddressSupport2=0)

        # Wait for Transport Layer Test Case to be finished
        print('Please wait until TC is completed...')
        time.sleep(15)
        test.compare(self.DiagAddrResp.test_case_flow_control_2(), True, 
                        step='test_008')

    def test_009(self, name='Transition to defaultSession'):
        test.preconditions(
            step_info=info(),
            response_from_log = False,
            tester_id = self.tester[1],
            functionalAddr=True
        )

        test.step(
            step_title = name,
            custom = '10 01',
            
            expected={
                'response'   : 'Positive'
            }
        )