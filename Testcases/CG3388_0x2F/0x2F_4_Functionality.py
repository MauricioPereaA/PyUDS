
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 5-Nov-20
        
from framework.shared_functions import device_under_test, tools, supported_io_dids        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        if device_under_test is 'SCL':
            tools.popup.warning(__name__, 'SCL does not support service 0x2F')
            raise Warning('SCL does not support Service 0x2F')
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2F'
        )
        '''
        self.io_did = random.choice(
            [
                did for did in supported_io_dids.keys() 
                if 'locked' in supported_io_dids[did][0]
            ]
        )
        '''
        if device_under_test in 'ARB':
            self.io_did = '4B5C' 
        else:
            self.io_did = '445D'
        
        self.supported_dids = supported_io_dids   
        self.io_mask = supported_io_dids[self.io_did][-1]
        self.io_reset_return_mask = '' 
        if device_under_test is 'MSM' and not self.io_did in ['4B52','446E','495F','495E']:
            self.io_reset_return_mask = 'FF' #01 --> FF

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    # returnControlToECU - 0x00
    def test_001(self, name='<Transition Server to extendedSession>'):
        if device_under_test == 'PTM':          
            test.preconditions(                          
                signal=['RCIP_RrClsrMtnCtlParmEnblAuth','SrlDat2_Prtctd_PDU',1],
                envVariable={'TransmitInOFFInfinite':1}
                )
        elif device_under_test in ['MSM','ARB']:
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',1],
                envVariable={'TransmitInOFFInfinite':1}
                )
        
        test.preconditions(
            step_info=info()
            
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_003_2(self, name='returnControlToECU - 0x00'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_004(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='returnControlToECU - 0x00'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 00'+self.io_reset_return_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    # resetToDefault - 0x01
    def test_007(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_007_2(self, name='resetToDefault - 0x01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03 ' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_008(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_009(self, name='resetToDefault - 0x01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 01'+self.io_reset_return_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_010(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    # freezeCurrentState - 0x02
    def test_011(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_011_2(self, name='freezeCurrentState - 0x02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 02'+self.io_reset_return_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_012(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    # shortTermAdjustment - 0x03
    def test_013(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_013_2(self, name='shortTermAdjustment - 0x03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='Precondition - Return control to ECU',
            custom='2F '+self.io_did+' 00'+self.io_reset_return_mask,
            expected={
                'response': 'Positive'
            }
        )
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_015(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    # Enforce Service Programming Control - MEC = 0
    def test_016(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_017(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_019(self, name='<Unlock Security Level 01, ServiceProgramming >'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_020(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_022(self, name='Enforce Service Programming Control MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_023(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_023_2(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_024(self, name='<Verify TesterPresent has stopped>'): #This step is in precondition
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)

        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_026(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    # Enforce Assembly Plant Control - MEC = 0   29
    def test_027(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_028(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_030(self, name='<Unlock Security Level 03, ServiceProgramming >'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_031(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_033(self, name='Enforce Service Programming Control MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_034(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_034_2(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_035(self, name='<Read Current Status>'):#This step is in precondition
        test.preconditions(
            step_info=info()
        )
        #add
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        #
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_037(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    # Enforce Engineering Control - MEC = 0
    def test_038(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_039(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_041(self, name='<Unlock Security Level 09, ServiceProgramming >'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_042(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_044(self, name='Enforce Service Programming Control MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_045(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_045_2(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_046(self, name='<Read Current Status>'):#!!!!!!
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_048(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    # Enforce RemoteDiagnostics Control - MEC = 0
    def test_049(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_050(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_052(self, name='<Unlock Security Level 0B, ServiceProgramming >'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_053(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_055(self, name='Enforce Service Programming Control MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_056(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_056_2(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_057(self, name='<Read Current Status>'):#!!!!!!!
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_059(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    # Enforce SupplierSecurityAccess Control - MEC = 0
    def test_060(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_061(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_063(self, name='<Unlock Security Level 0D, ServiceProgramming >'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_064(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_066(self, name='Enforce Service Programming Control MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_067(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_067_2(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_068(self, name='<Read Current Status>'):#!!!!!
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_070(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    #Enforce  ExtendedReflash Control - MEC = 0
    def test_071(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_072(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_074(self, name='<Unlock Security Level 11, ServiceProgramming >'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_075(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_077(self, name='Enforce Service Programming Control MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_078(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_078_2(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_079(self, name='<Read Current Status>'):#!!!!!!!
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_081(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    # ECU Reset - (ResetToDefault)
    def test_082(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_083(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_085(self, name='ECU Reset (ResetToDefault)'):
        if device_under_test is 'MSM':
            print(name, 'Test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 01'+self.io_reset_return_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_087(self, name='ECU Reset (ResetToDefault)'):
        if device_under_test is 'MSM':
            print('Test step not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_089(self, name='ECU Reset (ResetToDefault)'):
        if device_under_test is 'MSM':
            print(name, 'Test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 01'+self.io_reset_return_mask,
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    # ECU Reset - (FreezeCurrentState)
    def test_090(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_091(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_093(self, name='ECU Reset (FreezeCurrentState)'):
        if device_under_test is 'MSM':
            print(name, 'Test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 02'+self.io_reset_return_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_095(self, name='ECU Reset'):
        if device_under_test is 'MSM':
            print('Test step not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_097(self, name='ECU Reset (FreezeCurrentState)'):
        if device_under_test is 'MSM':
            print(name, 'Test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 02'+self.io_reset_return_mask,
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    # ECU Reset - (ShortTermAdjustment)
    def test_098(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_099(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_101(self, name='ECU Reset (ShortTermAdjustment)'):
        if device_under_test is 'MSM':
            print(name, 'Test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_103(self, name='ECU Reset'):
        if device_under_test is 'MSM':
            print('Test step not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_105(self, name='ECU Reset (ShortTermAdjustment)'):
        if device_under_test is 'MSM':
            print(name, 'Test is not applicable for %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03 ' + self.io_mask,
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    # Enforce OvertheAirReflash - MEC = 0
    def test_110(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_111(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_113(self, name='<Unlock Security Level 05, OvertheAirReflash>'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_114(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_116(self, name='Enforce OvertheAirReflash MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_117(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_118(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_119(self, name='<Read Current Status>'):#ï¼�ï¼�ï¼�ï¼�
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_121(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    #   Enforce ExtendedReflashAssemblyPlantProgrammingConfiguration - MEC = 0
    def test_122(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_123(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_125(self, name='<Unlock Security Level 13, OvertheAirReflash>'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_126(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_128(self, name='EnforceExtendedReflashAssemblyPlantProgrammingConfiguration MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03 ' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_129(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_130(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_131(self, name='<Read Current Status>'):#ï¼�ï¼�ï¼�ï¼�ï¼�
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_133(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #

    # Enforce ExtendedReflashOvertheAirReflash - MEC = 0
    def test_134(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_135(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_137(self, name='<Unlock Security Level 15, OvertheAirReflash>'):
        test.preconditions(
            step_info=info(),
            mec_zero=True
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_138(self, name='<Unlock the Server via security access service>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_140(self, name='Enforce ExtendedReflashOvertheAirReflash MEC = 0'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 03' + self.io_mask,
            expected={
                'response': 'Positive'
            }
        )

    def test_141(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
        tools.timer.input('Wait for 2 minutes...', timeout=120)

    def test_142(self, name='<Read Current Status>'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )

    def test_143(self, name='<Read Current Status>'): #ï¼�ï¼�ï¼�ï¼�ï¼�
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True
        )
        tools.timer.input('Wait for...', timeout=6)
        '''
        test.step(
            step_title=name,
            custom='22 '+self.io_did,
            expected={
                'response': 'Positive'
            }
        )
        '''
    #add
    def test_145(self, name='<Verify that ECU is able to return to defaultSession>'):
        test.preconditions(
            step_info=info(),            
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )        
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    #
    def test_146(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
            
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )
        
    def test_147(self, name='returnControlToECU - 0x00'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2F '+self.io_did+' 00'+self.io_reset_return_mask,
            expected={
                'response': 'Positive'
            }
        )
        
    def test_148(self, name='<returnControlToECU -DID not currently under test>'):
        for did in self.supported_dids.keys():
            print(self.supported_dids[did][0])
            if did in self.io_did:
                # Skip DID under test
                continue        
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name+' '+did,
                custom='2F '+did+' 00'+self.io_reset_return_mask,
                expected={
                    'response': 'Positive'
                }
            )       