''' Changes realized by Mauricio Perea
High Level CG 3531 2019 Complete all test steps
05 March 2020 
28 May 2020 
19 June 2020

Modified by Mauricio Perea
Date: 10-July-2020
It have been updated implemented the validation (00,FF)
Modified by: Mauricio Perea        Date: 5-Nov-20
Modified by: Mauricio Perea        Date: 15-Dec-20
'''
 
from framework.shared_functions import supported_io_dids, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        ECU_without_TrnsEstGr_Prtctd_PDU = [
            'PTM'
        ]
        
        self.rationality_off=0
        if device_under_test in ECU_without_TrnsEstGr_Prtctd_PDU:
            self.rationality_off=1  
        
        
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2F'
        )
        self.return_control_ecu_mask = '01' if device_under_test in ['MSM','PTM'] else ''
        #01 --> FF
        self.supported_dids = supported_io_dids
        self.custom_exclutions = [ # Please add the DIDs you want to exclude below
            'E0 10',
            "49 09",
            'EXAMPLE_1', # This can be replaced
            'EXAMPLE_2'  # This can be replaced
        ]
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='Service 0x2F - Positive Flow'):

        test.preconditions(
            
            step_info=info(),
            mec_zero=True, 
            sbat=False,         # SBAT in 00s
                        
        )

        self.current_step = 0

        
        def step_preconditions_rationality_off():
            test.canoe.set_envVariable(TransmitInOFFInfinite=0)
            time.sleep(2)
            test.canoe.set_signal('TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 0)
        
        def state_power_mode_off():
             test.preconditions(
                power_mode='OFF'
                )
        
        def step_preconditions_rationality_pm_accesory():
            test.preconditions(
                power_mode='ACC'
                )

               
        def step_preconditions_rationality_rcip_off():  
            if device_under_test == 'MSM':        
                test.preconditions(                          
                    signal=['RCIP_RrClsrMtnCtlParmEnblAuth','RrClsrInfo_Prtctd_PDU',0],
                    envVariable={'TransmitInOFFInfinite':1}
                    )
            elif device_under_test == 'PTM':
                test.preconditions(
                    
                    step_info=info(),
                    power_mode='RUN',
                    signal=[
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                        'RCIP_RrClsrMtnCtlParmEnblAuth','SrlDat2_Prtctd_PDU',0
                    ]        
                )     
        
        def step_preconditions_rationality_rcip():
            if device_under_test == 'MSM':          
                test.preconditions(                          
                    signal=['RCIP_RrClsrMtnCtlParmEnblAuth','RrClsrInfo_Prtctd_PDU',1],
                    envVariable={'TransmitInOFFInfinite':1}
                    )
            elif device_under_test == 'PTM':
                test.preconditions(
                    
                    step_info=info(),
                    power_mode='RUN',
                    signal=[
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                        'RCIP_RrClsrMtnCtlParmEnblAuth','SrlDat2_Prtctd_PDU',1
                    ]        
                )

        def step_preconditions_rationality_park():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',1,
                        'PSP_PrplSysActvAuth', 'SrlDat22_Prtctd_PDU', 0,],
                envVariable={'TransmitInOFFInfinite':1}
                )
            
        def step_preconditions_rationality_reverse():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',2],
                envVariable={'TransmitInOFFInfinite':1}
            )
            

        def step_preconditions_rationality_neutral():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',3],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_a():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',4],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_b():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',5],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_c():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',6],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_d():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',7],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_e():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',8],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_f():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',9],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_g():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',10],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_h():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',11],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_i():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',12],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_forward_j():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',13],
                envVariable={'TransmitInOFFInfinite':1}
            )

        def step_preconditions_rationality_unknown():
            test.preconditions(
                signal=['TEGP_TrnsShftLvrPstnAuth','TrnsEstGr_Prtctd_PDU',14],
                envVariable={'TransmitInOFFInfinite':1}
            )
                
        def step_preconditions():
            test.preconditions(
                current_step='test_%s'%str(self.current_step).rjust(3, '0')
            )
        
        
        def step_preconditions_tester_present_functional():
            test.preconditions(
                current_step='test_%s'%str(self.current_step).rjust(3, '0'),
                functionalAddr=True
            )
            
                  
        def extended_session():
            step_preconditions()
            test.step(
                step_title='Transition to Extended Session ',
                custom='10 03',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )

        def default_session():
            step_preconditions()
            test.step(
                step_title='Transition to default Session ',
                custom='10 01',
                expected = {
                    'response': 'Positive',
                    'dataLength': 4
                }
            )
        
        def tester_present():
            test.preconditions(
               step_info=info(),
               functionalAddr = True 
               
            )
            test.step(
                step_title='Start Tester present',
                start_tester_present=True,
                expected = {
                    'response': 'No response'
                }
            )
              
        def enter_security_level(level):
            step_preconditions()
            test.step(
                step_title='Security Level %s - Req Seed'%level,
                request_seed=level,
                expected={
                    'response' : 'Positive',
                    'dataLength'          : 31,
                    'unexpected_response' : True,
                    'partialData'         : ('00', 'FF')
                }
            )

            self.current_step += 1
            step_preconditions()
            test.step(
                step_title='Security Level %s - Send Key'%level,
                send_key=level,
                expected={
                    'response' : 'Positive'
                }
            )
        
        def io_control(did, subfunction, *args):
            step_preconditions()
            test.step(
                step_title='IO Control DID :: %s'%did,
                custom='2F {} {} {}'.format(did, subfunction, ''.join(args)),
                expected={
                    'response': 'Positive',
                    'expected_byte':subfunction,
                    'byte_index': 3
                }
            )
        
        for did in self.supported_dids.keys():
            print(self.supported_dids[did][0])
            if did in self.custom_exclutions:
                # Skip exclutions
                continue

            self.current_step = 0
            #tester_present()
            default_session()
            #extended_session()
            state_power_mode_off()

            return_control_ecu_mask = self.return_control_ecu_mask
            if did in ['4B52','446E','495F','495E','5020','500E']:
                    return_control_ecu_mask = ''
                        # MSM:4B52 446E 495F 495E
                        # PTM:5020 500E
            if 'RATIONALITY' in self.supported_dids[did][0]:
            
                if 'PARK' in self.supported_dids[did][0]:
                    step_preconditions_rationality_park()
                    time.sleep(0.01)# PARK CAUSE NOT STABLE, NEED DELAY HERE
                        
                if 'REVERSE' in self.supported_dids[did][0]:
                    step_preconditions_rationality_reverse()
                
                if 'NEUTRAL' in self.supported_dids[did][0]:
                    step_preconditions_rationality_neutral()
                
                if 'FORWARD_A' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_a()
                
                if 'FORWARD_B' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_b()
                
                if 'FORWARD_C' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_c()
                
                if 'FORWARD_D' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_d()

                if 'FORWARD_E' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_e()

                if 'FORWARD_F' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_f()

                if 'FORWARD_G' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_g()

                if 'FORWARD_H' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_h()

                if 'FORWARD_I' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_i()

                if 'FORWARD_J' in self.supported_dids[did][0]:
                    step_preconditions_rationality_forward_j()

                if 'UNKNOWN' in self.supported_dids[did][0]:
                    step_preconditions_rationality_unknown()
                    
                if 'RCIP' in self.supported_dids[did][0]:
                    step_preconditions_rationality_rcip()

                if 'POWER_MODE_ACCESSORY' in self.supported_dids[did][0]:
                    step_preconditions_rationality_pm_accesory()     
            
            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 3
                extended_session()

                self.current_step = 4
                tester_present()
                
            if 'locked' in self.supported_dids[did][0]:
                self.current_step = 5
                io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                self.current_step = 6
                #add
                '''
                if did in ['446E','495F','495E']:
                    io_control(did, '00')  # resetToDefault
                else:
                    io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                '''    
                io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
                
            if 'DEFAULT' in self.supported_dids[did][0]:          
                self.current_step = 7
                default_session()   #

            if 'EXTENDED' in self.supported_dids[did][0]:   
                self.current_step = 8
                extended_session()

                if '01' in self.supported_dids[did][0]:
                    self.current_step = 9
                    enter_security_level('01')

                    self.current_step = 11
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 12
                    #add
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:          
                self.current_step = 13
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 14
                extended_session()

                if '03' in self.supported_dids[did][0]:
                    self.current_step = 15               
                    enter_security_level('03')

                    self.current_step = 17
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 18
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:             
                self.current_step = 19
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 20
                extended_session()

                if '05' in self.supported_dids[did][0]:
                    self.current_step = 21       
                    enter_security_level('05')

                    self.current_step = 23
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 24
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:            
                self.current_step = 25
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:           
                self.current_step = 26
                extended_session()
                    
                if '09' in self.supported_dids[did][0]:
                    self.current_step = 27     
                    enter_security_level('09')

                    self.current_step = 29
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 30
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:            
                self.current_step = 31
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 32
                extended_session()

                if '0B' in self.supported_dids[did][0]:
                    self.current_step = 33  
                    enter_security_level('0B')

                    self.current_step = 35
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 36
                    #add
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 37    
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 38
                extended_session()

                if '0D' in self.supported_dids[did][0]:
                    self.current_step = 39
                    enter_security_level('0D')

                    self.current_step = 41
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 42
                    #add
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 43
                default_session()
            
            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 44
                extended_session()
                
                if '11' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 45
                    enter_security_level('11')

                    self.current_step = 47
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 48
                    #add
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 49
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 50
                extended_session()

                if '13' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 51
                    enter_security_level('13')

                    self.current_step = 53
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 54
                    #add
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 55
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 56
                extended_session()
                    
                if '15' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 57
                    enter_security_level('15')

                    self.current_step = 59
                    io_control(did, '03', self.supported_dids[did][-1])  # shortTermAdjustment

                    self.current_step = 60
                    #add
                    '''
                    if did in ['446E','495F','495E']:
                        io_control(did, '00')  # resetToDefault
                    else:
                        io_control(did, '00', return_control_ecu_mask)  # resetToDefault 
                #
                    '''    
                    io_control(did, '00', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 61
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 62
                extended_session()

            if 'locked' in self.supported_dids[did][0]:
                self.current_step = 63
                io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
            
            if 'DEFAULT' in self.supported_dids[did][0]:            
                self.current_step = 64
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 65
                extended_session()

                if '01' in self.supported_dids[did][0]:
                    self.current_step = 66
                    enter_security_level('01')

                    self.current_step = 68
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 69
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 70
                extended_session()

                if '03' in self.supported_dids[did][0]:
                    self.current_step = 71
                    enter_security_level('03')

                    self.current_step = 73
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 74
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 75
                extended_session()

                if '05' in self.supported_dids[did][0]:
                    self.current_step = 76
                    enter_security_level('05')

                    self.current_step = 78
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 79
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:      
                self.current_step = 80
                extended_session()

                if '09' in self.supported_dids[did][0]:
                    self.current_step = 81
                    enter_security_level('09')

                    self.current_step = 83
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 84
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:      
                self.current_step = 85
                extended_session()

                if '0B' in self.supported_dids[did][0]:
                    self.current_step = 86
                    enter_security_level('0B')

                    self.current_step = 88
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 89
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 90
                extended_session()

                if '0D' in self.supported_dids[did][0]:
                    self.current_step = 91
                    enter_security_level('0D')

                    self.current_step = 93
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 94
                default_session()
        
            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 95
                extended_session()

                if '11' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 96
                    enter_security_level('11')

                    self.current_step = 98
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 99
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 100
                extended_session()

                if '13' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 101
                    enter_security_level('13')

                    self.current_step = 103
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 104
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 105
                extended_session()

                if '15' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 106
                    enter_security_level('15')

                    self.current_step = 108
                    io_control(did, '01', return_control_ecu_mask)       # returnControlToECU
                
            if 'DEFAULT' in self.supported_dids[did][0]:    
                self.current_step = 109
                default_session()

                
            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 110
                extended_session()

            if 'locked' in self.supported_dids[did][0]:
                self.current_step = 111
                io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
            
            if 'DEFAULT' in self.supported_dids[did][0]:    
                self.current_step = 112
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 113
                extended_session()

                if '01' in self.supported_dids[did][0]:
                    self.current_step = 114
                    enter_security_level('01')

                    self.current_step = 116
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 117
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]: 
                self.current_step = 118
                extended_session()

                if '03' in self.supported_dids[did][0]:
                    self.current_step = 119
                    enter_security_level('03')

                    self.current_step = 121
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 122
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 123
                extended_session()

                if '05' in self.supported_dids[did][0]:
                    self.current_step = 124
                    enter_security_level('05')

                    self.current_step = 126
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 127
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 128
                extended_session()

                if '09' in self.supported_dids[did][0]:
                    self.current_step = 129
                    enter_security_level('09')

                    self.current_step = 131
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]: 
                self.current_step = 132
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 133
                extended_session()

                if '0B' in self.supported_dids[did][0]:
                    self.current_step = 134
                    enter_security_level('0B')

                    self.current_step = 136
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:  
                self.current_step = 137
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 138
                extended_session()

                if '0D' in self.supported_dids[did][0]:
                    self.current_step = 139
                    enter_security_level('0D')

                    self.current_step = 141
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 142
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 143
                extended_session()

                if '11' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 144
                    enter_security_level('11')

                    self.current_step = 146
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 147
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 148
                extended_session()

                if '13' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 149
                    enter_security_level('13')

                    self.current_step = 151
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 152
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:            
                self.current_step = 153
                extended_session()

                if '15' in self.supported_dids[did][0]:
                    state_power_mode_off()
                    self.current_step = 154
                    enter_security_level('15')

                    self.current_step = 156
                    io_control(did, '02', return_control_ecu_mask)  # FreezeCurrentState 
                
            if 'DEFAULT' in self.supported_dids[did][0]:
                self.current_step = 157
                default_session()

            if 'EXTENDED' in self.supported_dids[did][0]:
                self.current_step = 158
                extended_session()
                
                              
            if self.rationality_off==0:
               step_preconditions_rationality_off()    
                