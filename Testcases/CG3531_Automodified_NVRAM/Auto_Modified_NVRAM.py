
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import tools, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Auto Modified NVRAM'   # Specify CG Excel Tab
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_003(self, name='Read DID with most number of payload bytes available for the ECU'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test == 'TCP':
            test.step(
                step_title=name,
                extended_session_control=True,
                read_data_ID='F0F8',

                expected={
                    'response': 'Positive',
                    'dataLength': 1173
                }
            )

        else:
            test.step(
                step_title=name,

                extended_session_control=True,
                start_tester_present=True,
                request_seed='01',
                send_key='01',                      # Sec Level 01 - Pre-condition
                read_data_ID='F0F4',

                expected={
                    'response': 'Positive',
                    'dataLength': 822
                }
            )

    def test_004(self, name='Write a new value to SBAT'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test == 'TCP':
            test.step(
                step_title=name,
                write_data_ID=['F0F8', '01'*1173],
                expected={
                    'response': 'Positive'
                }
            )
            test.power_supply.output(False)
        else:
            test.step(
                step_title=name,
                write_data_ID=['F0F4', '01'*822],
                expected={
                    'response': 'Positive'
                }
            )
            test.power_supply.output(False)
            print('Turning OFF battery power ..')

    def test_004_2(self, name='Write a new value to SBAT - Loss of battery power'):
        print('Restablishing battery power ..')
        test.power_supply.output(True)
        test.compare(True, True, step='test_004_2') # Forcing a "PASS" to fill CG


    def test_006(self, name='Verify that the new data (Write request) was correctly written (Read request)'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test == 'TCP':
            test.step(
                step_title=name,
                extended_session_control=True,

                read_data_ID='F0F8',

                expected={
                    'response': 'Positive',
                    'dataLength': 1173,
                    'data':     '01'*1173
                }
            )

        else:
            test.step(
                step_title=name,
                read_data_ID='F0F4',

                expected={
                    'response': 'Positive',
                    'dataLength': 822,
                    'data':     '01'*822
                }
            )
