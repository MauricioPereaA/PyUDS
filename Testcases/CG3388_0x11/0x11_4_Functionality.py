
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools, no_io_ecus, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import random
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        if device_under_test is 'MSM':
            tools.popup.warning(
                title='Service 0x11',
                description='MSM does not support Service 0x11'
            )
            raise Warning('MSM does not support Service 0x11')
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x11'
        )

        ''' Device Under Test - Settings '''
        self.protected_message = random.choice(     # Pick random message to be tested
            list(pn_dict[device_under_test]['protected_messages'].keys())
        )
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']

        self.secured_DID = {
            'SCL': '55 F5',
            'ARB': '55 F5',
            'PTM': '48 F9',
            'TCP': 'F0 8F'
        }

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_005(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_008(self, name='ECU Reset (Disable Normal Comm)'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='28 03 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_009(self, name='Observe normal communication message is disabled'):
        normal_com = tools.popup.ask(title=name, description=name)
        test.compare(True, normal_com, step='test_009')

    def test_011(self, name='<Activate hardReset>'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_012(self, name='Observe normal communication is re-enabled'):
        normal_com = tools.popup.ask(title=name, description=name)
        test.compare(True, normal_com, step='test_012')

    def test_013(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info()            
        )
        time.sleep(3)
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_014(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,

            expected={
                'response': 'No response'
            }
        )

    def test_015(self, name='ECU Reset(Disable/Enable DTCs) <Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 02',
            expected={
                'response': 'Positive'
            }
        )

    def test_017(self, name='<ReadDTCInformation>'): # Missing fault condition to set a DTC
        test.preconditions(
            step_info=info()           
            #power_mode='RUN'
        )
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )

    def test_019(self, name='<Activate hardReset>'):
        test.preconditions(
            step_info=info(),           
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_021(self, name='<ReadDTCInformation>'): # Missing fault condition to set a DTC
        time.sleep(6)
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False
        time.sleep(6)
        test.preconditions(
            step_info=info()           
        #    power_mode='RUN'
        )
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data_dtc': (test.initial_dtcs, self.DTC)
            }
        )

