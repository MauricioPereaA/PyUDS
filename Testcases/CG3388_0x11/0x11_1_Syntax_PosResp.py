'''
Author: Ricardo Montes

Modified by: Ricardo Montes       Date: 17-Jun-20
Modified by: Mauricio Perea        Date: 30-Sep-20
Modified by: Jose Huerta          Date: 27-Jul-22

This script is intended to validate positive response of service 0x11 which main function is to reset the ECU 

The ECUReset service is used by the client to request a server reset.

The test procedures described in this worksheet have been written against the requirements defined in GB6000 Unified Diagnostic Services Specification as well as ISO 14229-1 and is written for component level testing. All test procedures require the Server to have a valid Application SW and Calibrations to run the Server's sessions in Application Mode and Boot Mode.

With every executed test run the following information needs to be provided (for every ECU within the tested network topology) besides the actual test results.

'''

          # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import device_under_test, tools     
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        if device_under_test is 'MSM':
            tools.popup.warning(
                title=__name__,
                description='MSM does not support Service 0x11'
            )
            raise Warning(__name__, 'MSM does not support Service 0x11')
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x11'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_003(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info(),
            sbat=False, # Clear SBAT
            mec_zero=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_004(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present='true',
            expected={
                'response': 'No response'
            }
        )

    def test_006(self, name='<hardreset -extendedSession Physical Messaging>'):
        if test.canoe.power_mode() == 0: # Reading power mode state
            test.preconditions(
                step_info=info()
            )
        else:                   # If this is executed, means that ignition switch was != OFF ..
            test.preconditions(
                step_info=info(),
                power_mode='OFF'
            )   
            # There is no need to re set ignition switch envVariable, that is static so it remains with the same value which was set
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )
    def test_007(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_008(self, name='Access security Lvl 01 - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_009(self, name='Access security Lvl 01 - send_key'):
        test.preconditions(
            step_info=info(),
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_011(self, name='<hardreset -extendedSession>Preconditions Security Level 01>'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF',
            functionalAddr=True
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_012(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_013(self, name='Access security Lvl 03 - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_014(self, name='Access security Lvl 03 - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_016(self, name='<hardreset -extendedSession>Preconditions Security Level 03>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_017(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_018(self, name='Access security Lvl 05 - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_019(self, name='Access security Lvl 05 - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_021(self, name='<hardreset -extendedSession>Preconditions Security Level 05>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_022(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_023(self, name='Access security Lvl 0B - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_024(self, name='Access security Lvl 0B - send_key Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_026(self, name='<hardreset -extendedSession>Preconditionns - Security Level 09'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_027(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_028(self, name='Access security Lvl 0B - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_029(self, name='Access security Lvl 0B - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_030(self, name='<hardreset -extendedSession>Preconditions Security Level 0B>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_031(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_032(self, name='Access security Lvl 0D - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_033(self, name='Access security Lvl 0D - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_035(self, name='<hardreset -extendedSession>Preconditions Security Level 0D>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_036(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_037(self, name='Access security Lvl 11 - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_038(self, name='Access security Lvl 11 - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_040(self, name='<hardreset -extendedSession>Preconditions Security Level 11>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_041(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_042(self, name='Access security Lvl 13 - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_043(self, name='Access security Lvl 13 - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_045(self, name='<hardreset -extendedSession>Preconditions Security Level 13>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
            
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_046(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_047(self, name='Access security Lvl 15 - request_seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_048(self, name='Access security Lvl 15 - send_key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_050(self, name='<hardreset -extendedSession>Preconditions Security Level 15>'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_051(self, name='<Transition Server to extendedSession> '):
        time.sleep(5)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )
        
    def test_061(self, name='<hardreset -extendedSession>Preconditionns'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='11 01',
            expected={
                'response': 'Positive'
            }
        )

