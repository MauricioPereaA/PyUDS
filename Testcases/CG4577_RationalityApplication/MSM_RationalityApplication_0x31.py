from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Rationality-Application '
        )

        self.RIDs= [
            ('02 00', '05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 88 E0 D0 8B C3 17 36 34 5A 16 78 57 2D F7 1F 22 EC A6 CA 2B BE 12 2D CA 54 BC C2 BB 91 24 BB 70 55 44 EA DA 65 53 51 A4 99 19 61 71 93 8C 62 BE 14'),
            ('02 04', ''),
            ('02 05', ''),
            ('02 72', '04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 77 E0 D0 8B C3 17 36 34 5A 16 78 57 2D F7 1F 22 EC A6 CA 2B BE 12 2D CA 54 BC C2 BB 91 24 BB 70 55 A2 06 D5 69 93 5E 7A 70 02 B2 1D EA 84 10 3D 05')
        ]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='All conditions satisfied RID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0
            ]          
        )

        test.step(
            step_title='Security Level 03',
            extended_session_control=True,
            start_tester_present=True,
            request_seed='03',
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

        for RID in self.RIDs[:-1]:
            test.step(
                step_title=name + RID[0],
                custom='31 01 ' + RID[0] + ' ' + RID[1],
                expected={
                    'response': 'Positive'
                }
            )     
        
    def test_002(self, name='Condition 1 not satisfied RID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0
            ]          
        )

        for RID in self.RIDs[:-1]:
            test.step(
                step_title=name + RID[0],
                custom='31 01 ' + RID[0] + ' ' + RID[1],
                expected={
                    'response': 'Negative',
                    'data': '22'
                }
            )
    
    def test_003(self, name='Condition 2 not satisfied DID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 1000
            ]          
        )

        for RID in self.RIDs[:-1]:
            test.step(
                step_title=name + RID[0],
                custom='31 01 ' + RID[0] + ' ' + RID[1],
                expected={
                    'response': 'Negative',
                    'data': '22'
                }
            )
    
    def test_004(self, name='All conditions satisfied RID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0
            ]          
        )

        test.step(
            step_title='Security Level 0D',
            extended_session_control=True,
            start_tester_present=True,
            request_seed='0D',
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

        test.step(
            step_title=name + self.RIDs[-1][0],
            custom='31 01 ' + self.RIDs[-1][0] + ' ' + self.RIDs[-1][1],
            expected={
                'response': 'Positive'
            }
        )    
        
    def test_005(self, name='Condition 1 not satisfied RID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0
            ]          
        )

        test.step(
            step_title=name + self.RIDs[-1][0],
            custom='31 01 ' + self.RIDs[-1][0] + ' ' + self.RIDs[-1][1],
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
    
    def test_006(self, name='Condition 2 not satisfied DID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 1000
            ]          
        )

        test.step(
            step_title=name + self.RIDs[-1][0],
            custom='31 01 ' + self.RIDs[-1][0] + ' ' + self.RIDs[-1][1],
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )