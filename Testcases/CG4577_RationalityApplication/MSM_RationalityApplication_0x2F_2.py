from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Rationality-Application '
        )

        self.DIDs= [
            ('48 F7', '03 05 01'),
            ('48 FB', '03 01 11 01'),
            ('4B 52', '03 01'),
            ('4B 53', '03 03 03 03 03 01'),
            ('49 09', '03 48 01 01')
        ]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001(self, name='Preconditions'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            start_tester_present=True,
            request_seed='09',
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='All conditions satisfied DID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'SPMP_SysPwrModeAuth', 'SysPwrMode_Prtctd_PDU', 0,
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 100
            ]          
        )

        for DID in self.DIDs:
            test.step(
                step_title=name + DID[0],
                custom='2F ' + DID[0] + ' ' + DID[1],
                expected={
                    'response': 'Positive'
                }
            )
    
    def test_003(self, name='Condition 1 not satisfied DID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'SPMP_SysPwrModeAuth', 'SysPwrMode_Prtctd_PDU', 3,
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 100
            ]          
        )

        for DID in self.DIDs:
            test.step(
                step_title=name + DID[0],
                custom='2F ' + DID[0] + ' ' + DID[1],
                expected={
                    'response': 'Negative',
                    'data': '22'
                }
            )
    
    def test_004(self, name='Condition 2 not satisfied DID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'SPMP_SysPwrModeAuth', 'SysPwrMode_Prtctd_PDU', 0,
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 100
            ]          
        )

        for DID in self.DIDs:
            test.step(
                step_title=name + DID[0],
                custom='2F ' + DID[0] + ' ' + DID[1],
                expected={
                    'response': 'Negative',
                    'data': '22'
                }
            )
    
    def test_005(self, name='Condition 3 not satisfied DID '):
        test.preconditions(
            step_info=info(),
            signal = [
                        'SPMP_SysPwrModeAuth', 'SysPwrMode_Prtctd_PDU', 0,
                        'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 0,
                        'VSADP_VehSpdAvgDrvnAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 1000
            ]          
        )

        for DID in self.DIDs:
            test.step(
                step_title=name + DID[0],
                custom='2F ' + DID[0] + ' ' + DID[1],
                expected={
                    'response': 'Negative',
                    'data': '22'
                }
            )