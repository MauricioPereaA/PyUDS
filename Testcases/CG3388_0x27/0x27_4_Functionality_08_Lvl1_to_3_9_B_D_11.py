            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_340(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=False
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_341(self, name='send key -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_342(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_343(self, name='request seed -- Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_344(self, name='<Verify Server is still unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_345(self, name='<Verify Server is locked for Security Level 03>'):
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='31 01 02 04',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_346(self, name='<Unlock the Server via security access service for Level 03>'):
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_347(self, name='<Verify Server is unlocked for Security Level 03>'):
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            
            test.preconditions(
                step_info=info()
            )

            test.step(
                step_title='Preconditions',       
                communication_control= False,
                expected={
                    'response'            : 'Positive'
                }
            )        
        
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='31 01 02 04',
                expected={
                    'response': 'Positive'
                }
            )

    def test_348(self, name='<Verify Server is locked for Security Level 01>'):
        unsupported_ecu = ['MSM', 'SCL', 'PTM', 'ARB']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='# PLACEHOLDER #',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_349(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=False
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_350(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_351(self, name='request seed -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_352(self, name='send key -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_353(self, name='<Verify Server is unlocked for Security Level 01>'):
            
        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title='Preconditions',       
            communication_control= False,
            expected={
                'response'            : 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 05',
            expected={
                'response': 'Positive'
            }
        )

    def test_354(self, name='request seed -- Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_355(self, name='<Verify Server is still unlocked for Security Level 01>'):
            
        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title='Preconditions',       
            communication_control= False,
            expected={
                'response'            : 'Positive'
            }
        )    
    
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 05',
            expected={
                'response': 'Positive'
            }
        )

    def test_356(self, name='<Verify Server is locked for Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='22 4B 4E',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_357(self, name='<Unlock the Server via security access service for Level 09>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_358(self, name='<Verify Server is unlocked for Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='22 4B 4E',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_359(self, name='<Verify Server is locked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 05',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_360(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_361(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_362(self, name='request seed -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_363(self, name='send key -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_364(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_365(self, name='request seed -- Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_366(self, name='<Verify Server is still unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_367(self, name='<Verify Server is locked for Security Level 0B>'):
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_368(self, name='<Unlock the Server via security access service for Level 0B>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_369(self, name='<Verify Server is unlocked for Security Level 0B>'):
        unsupported_ecu = ['MSM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        test.preconditions(
            step_info=info()
        )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_370(self, name='<Verify Server is locked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_371(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_372(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_373(self, name='request seed -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_374(self, name='send key -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_375(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_376(self, name='request seed -- Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_377(self, name='<Verify Server is still unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_378(self, name='<Verify Server is locked for Security Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='22 4B 4E',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_379(self, name='<Unlock the Server via security access service for Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_380(self, name='<Verify Server is unlocked for Security Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='22 4B 4E',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_381(self, name='<Verify Server is locked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_382(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_383(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )

        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_384(self, name='request seed -- Security Level 11'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0

        else:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                request_seed='01',
                expected={
                    'response'            : 'Positive',
                    'dataLength'          : 31,
                    'unexpected_response' : True,
                    'partialData'         : ('00', 'FF')
                }
            )

    def test_385(self, name='send key -- Security Level 01'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0

        else:
            test.preconditions(
                step_info=info()
            )

            test.step(
                step_title=name,
                send_key='01',
                expected={
                    'response': 'Positive'
                }
            )

    def test_386(self, name='<Verify Server is unlocked for Security Level 01>'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0

        elif device_under_test == 'TCP':
            test.preconditions(
                step_info=info()
            )

            test.step(
                step_title=name,
                custom='31 01 02 1E',
                expected={
                    'response': 'Positive'
                }
            )

    def test_387(self, name='request seed -- Security Level 11'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0

        else:
            test.preconditions(
                step_info=info()
            )

            test.step(
                step_title=name,
                request_seed='11',
                expected={
                    'response'            : 'Positive',
                    'dataLength'          : 31,
                    'unexpected_response' : True,
                    'partialData'         : ('00', 'FF')
                }
            )

    def test_388(self, name='<Verify Server is still unlocked for Security Level 11>'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        elif device_under_test == 'TCP':
            test.preconditions(
                step_info=info()
            )

            test.step(
                step_title=name,
                custom='31 01 02 1E',
                expected={
                    'response': 'Positive'
                }
            )

    def test_389(self, name='<Verify Server is locked for Security Level 11>'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        elif device_under_test == 'TCP':
            test.preconditions(
                step_info=info()
            )

            test.step(
                step_title=name,
                custom='22 45 DA',
                expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_390(self, name='<Unlock the Server via security access service for Level 11>'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        else:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                send_key='11',
                expected={
                    'response': 'Positive'
                }
            )

    def test_391(self, name='<Verify Server is unlocked for Security Level 11>'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        elif device_under_test == 'TCP':
            test.preconditions(
                step_info=info()
            )

            test.step(
                step_title=name,
                custom='22 45 DA',
            expected={
                'response': 'Positive'
            }
        )

    def test_392(self, name='<Verify Server is locked for Security Level 01>'):
        unsupported_ecu = ['MSM', 'SCL', 'ARB', 'PTM']
        if device_under_test in unsupported_ecu:
            print('Test step from {} is not supported by {}'.format(
                    __name__, ','.join(unsupported_ecu)))
            return 0
        else:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title=name,
                custom='31 01 02 1E',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_393(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_394(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )