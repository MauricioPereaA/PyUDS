
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )
        precondition_set = tools.popup.ask(
            title='MEC > 0',
            description='* Attention! This Test case requires a MEC > 0. *\n Do you want to proceed??'
        )
        if not precondition_set:
            raise Warning('MEC > 0 should be satisfied before you perform this test.')
			
        self.all_FFs_byte_seed = ' '.join(('FF '*31).split())
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_046(self, name='<Transition Server to extendedSession> -- Sec Lvl 01 TC'):
        test.preconditions(
            step_info=info(),
            mec_zero=False,
            sbat=False
        )
        test.step(
            step_title=name,
            extended_session_control = True,
            request_seed='01',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_047(self, name='send Key - Sec Lvl 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_048(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_049(self, name='<Transition Server to extendedSession> -- Sec Lvl 03 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_050(self, name='<Activate TesterPresent> -- Sec Lvl 03 TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_052(self, name='request Seed - Sec Lvl 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_053(self, name='send Key - Sec Lvl 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_054(self, name='<Verify Server is unlocked for Security Level 03>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_055(self, name='<Transition Server to extendedSession> -- Sec Lvl 09 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_056(self, name='<Activate TesterPresent> -- Sec Lvl 09 TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_058(self, name='request Seed - Sec Lvl 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_059(self, name='send Key - Sec Lvl 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_060(self, name='<Verify Server is unlocked for Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_061(self, name='<Transition Server to extendedSession> -- Sec Lvl 0B TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_062(self, name='<Activate TesterPresent> -- Sec Lvl 0B TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_064(self, name='request Seed - Sec Lvl 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_065(self, name='send Key - Sec Lvl 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_066(self, name='<Verify Server is unlocked for Security Level 0B>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_067(self, name='<Transition Server to extendedSession> -- Sec Lvl 0D TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_068(self, name='<Activate TesterPresent> -- Sec Lvl 0D TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_070(self, name='request Seed - Sec Lvl 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_071(self, name='send Key - Sec Lvl 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_072(self, name='<Verify Server is unlocked for Security Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_073(self, name='<Transition Server to extendedSession> -- Sec Lvl 11 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_074(self, name='<Activate TesterPresent> -- Sec Lvl 11 TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_076(self, name='request Seed - Sec Lvl 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_077(self, name='send Key - Sec Lvl 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_078(self, name='<Verify Server is unlocked for Security Level 11>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_079(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_080(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        ## THIS IS A PLACE HOLDER TEST STEP ##
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_082(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        ## THIS IS A PLACE HOLDER TEST STEP ##

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_083(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        ## THIS IS A PLACE HOLDER TEST STEP ##
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_084(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        ## THIS IS A PLACE HOLDER TEST STEP ##
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_085(self, name='<Transition Server to extendedSession> -- Sec Lvl 11 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_086(self, name='<Activate TesterPresent> -- Sec Lvl 11 TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )