
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )
        self.s3_timeout = 5 + 0.1 # S3 timeout + 100 msec
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_159(self, name='request seed -- Security Level 01'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=False
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_160(self, name='send key -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_161(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_162(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )

    def test_163(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_164(self, name='<Transition Server to extendedSession> -- Sec Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_165(self, name='<Activate TesterPresent> -- Sec Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_167(self, name='request seed -- Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_168(self, name='send key -- Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_169(self, name='<Verify Server is unlocked for Security Level 03>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_170(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )

    def test_171(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 03',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_172(self, name='<Transition Server to extendedSession> -- Sec Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_173(self, name='<Activate TesterPresent> -- Sec Level 09'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_175(self, name='request seed -- Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_176(self, name='send key -- Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_177(self, name='<Verify Server is unlocked for Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )
    def test_178(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )

    def test_179(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 09',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_180(self, name='<Transition Server to extendedSession> -- Sec Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_181(self, name='<Activate TesterPresent> -- Sec Level 0B'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_183(self, name='request seed -- Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_184(self, name='send key -- Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_185(self, name='<Verify Server is unlocked for Security Level 0B>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_186(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )

    def test_187(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0B',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_188(self, name='<Transition Server to extendedSession> -- Sec Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_189(self, name='<Activate TesterPresent> -- Sec Level 0D'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_191(self, name='request seed -- Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_192(self, name='send key -- Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_193(self, name='<Verify Server is unlocked for Security Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_194(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )

    def test_195(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0D',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_196(self, name='<Transition Server to extendedSession> -- Sec Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_197(self, name='<Activate TesterPresent> -- Sec Level 11'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_199(self, name='request seed -- Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_200(self, name='send key -- Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_201(self, name='<Verify Server is unlocked for Security Level 11>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_202(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )

    def test_203(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 11',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_204(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_205(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_207(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_208(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_209(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_210(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_211(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_212(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_213(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )