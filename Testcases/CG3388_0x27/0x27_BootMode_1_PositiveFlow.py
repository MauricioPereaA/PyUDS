
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )
        self.all_00s_byte_seed = ' '.join(('00 '*31).split())
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='requestSeed_serviceProgrammingandConfiguration - 0x01'):
        # Begin -- Boot Mode preconditions
        test.preconditions(current_step='test_bootMode_Precondition')
        test.step(
            step_title='bootMode Precondition',
            extended_session_control=True,
            dtc_settings=False,
            communication_control=False,
            request_seed='01',
            send_key='01'
        )
        test.step(
            step_title=name,
            custom='10 02'
        )
        # End -- Boot Mode preconditions
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            custom='27 01',
            expected={
                'response': 'Positive',
                'data': self.all_00s_byte_seed
            }
        )

    def test_002(self, name='requestSeed_assemblyPlantProgrammingandConfiguration - 0x03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 03',
            expected={
                'response': 'Positive',
                'data': self.all_00s_byte_seed
            }
        )

    def test_003(self, name='requestSeed_assemblyPlantProgrammingandConfiguration - 0x05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 05',
            expected={
                'response': 'Positive',
                'data': self.all_00s_byte_seed
            }
        )



