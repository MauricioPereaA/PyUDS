'''
    TestScript intended to perform CG3388 Tab 0x27 -- 1. Positive Flow
'''
'''
Author: Manuel Medina

Modified by: Ricardo Montes       Date: 17-Jun-20
Modified by: Mauricio Perea        Date: 30-Sep-20

This script is intended to validate positive response of service 0x27 which main function is provide a means to access data and/or diagnostic services, which have restricted access for security, emissions or safety reasons.



'''

            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time
from framework.shared_functions import device_under_test, tools

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )
        self.all_00s_byte_seed = ' '.join(('00 '*31).split())
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_003(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_004(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_006(self, name='Security Level 01 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_007(self, name='<Unlock the Server via security access service> - Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )
    def test_008(self, name='Verify Server is unlocked for Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response'            : 'Positive'
            }
        )

    def test_009(self, name='Security Level 01 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )
    
    def test_010(self, name='<Transition Server to extendedSession>  - Sec Lvl 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_011(self, name='Security Level 01 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_012(self, name='Verify Server is unlocked for Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )
    def test_013(self, name='Security Level 01 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_014(self, name='<Unlock the Server via security access service> - Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )
    def test_015(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    def test_016(self, name='Security Level 03 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_017(self, name='<Unlock the Server via security access service> - Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response'  : 'Positive'
            }
        )
    def test_018(self, name='Verify Server is unlocked for Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 1E',
            expected={
                'response'            : 'Positive'
            }
        )

    def test_019(self, name='Security Level 03 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )
    def test_020(self, name='<Transition Server to extendedSession>  - Sec Lvl 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_021(self, name='Security Level 03 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_022(self, name='Verify Server is unlocked for Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 1E',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )
    def test_023(self, name='Security Level 03 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_024(self, name='<Unlock the Server via security access service> - Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response'  : 'Positive'
            }
        ) 

    def test_025(self, name='<Transition Server to extendedSession>  - Sec Lvl 5'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )

    def test_026(self, name='Security Level 05 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_027(self, name='<Unlock the Server via security access service> - Security Level 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response'  : 'Positive'
            }
        )
    def test_028(self, name='Verify Server is unlocked for Security Level 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 1E',
            expected={
                'response'            : 'Positive'
            }
        )

    def test_029(self, name='Security Level 05 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )

    def test_030(self, name='<Transition Server to extendedSession>  - Sec Lvl 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    def test_031(self, name='Security Level 05 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_032(self, name='Verify Server is unlocked for Security Level 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 1E',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )
     
    def test_033(self, name='Security Level 05 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_034(self, name='<Unlock the Server via security access service> - Security Level 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_035(self, name='<Transition Server to extendedSession>  - Sec Lvl 05'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        ) 
    def test_036(self, name='Security Level 09 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_037(self, name='<Unlock the Server via security access service> - Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )
    def test_038(self, name='Verify Server is unlocked for Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        
        if device_under_test in 'ARB':
            test.step(
                step_title=name,
                custom ='22 F0 A7',
                expected={
                    'response'            : 'Positive'
                }
            )
        else:
            test.step(
                step_title=name,
                custom ='31 01 02 C0',   
                expected={
                    'response'            : 'Positive'
                }
            )

    def test_039(self, name='Security Level 09 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )
    def test_040(self, name='<Transition Server to extendedSession>  - Sec Lvl 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )        
    def test_041(self, name='Security Level 09 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )        
    def test_042(self, name='Verify Server is unlocked for Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 C0',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )
    def test_043(self, name='Security Level 09 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_044(self, name='<Unlock the Server via security access service> - Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_045(self, name='<Transition Server to extendedSession>  - Sec Lvl 09'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )


    def test_046(self, name='Security Level 0B - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_047(self, name='<Unlock the Server via security access service> - Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_048(self, name='Verify Server is unlocked for Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test in 'ARB':
            test.step(
                step_title=name,
                custom ='22 F0 A7',
                expected={
                    'response'            : 'Positive'
                }
            )
        else:
            test.step(
                step_title=name,
                custom ='31 01 02 C0',
                expected={
                    'response'            : 'Positive'
                }
            )

    def test_049(self, name='Security Level 0B - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )
    def test_050(self, name='<Transition Server to extendedSession>  - Sec Lvl 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_051(self, name='Security Level 0B - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )        
    def test_052(self, name='Verify Server is unlocked for Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 C0',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )
    def test_053(self, name='Security Level 0B - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_054(self, name='<Unlock the Server via security access service> - Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_055(self, name='<Transition Server to extendedSession>  - Sec Lvl 0B'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )

    def test_056(self, name='Security Level 0D - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_057(self, name='<Unlock the Server via security access service> - Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response'  : 'Positive'
            }
        )        
    def test_058(self, name='Verify Server is unlocked for Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test in 'ARB':
            test.step(
                step_title=name,
                custom ='22 F0 A7',
                expected={
                    'response'            : 'Positive'
                }
            )
        else:
            test.step(
                step_title=name,
                custom ='31 01 02 C0',
                expected={
                    'response'            : 'Positive'
                }
            )

    def test_059(self, name='Security Level 0D - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )
    def test_060(self, name='<Transition Server to extendedSession>  - Sec Lvl 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_061(self, name='Security Level 0D - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_062(self, name='Verify Server is unlocked for Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 C0',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )

    def test_063(self, name='Security Level 0D - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_064(self, name='<Unlock the Server via security access service> - Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_065(self, name='<Transition Server to extendedSession>  - Sec Lvl 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )

    def test_066(self, name='Security Level 11 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_067(self, name='<Unlock the Server via security access service> - Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response'  : 'Positive'
            }
        )        
    def test_068(self, name='Verify Server is unlocked for Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 1E',
            expected={
                'response'            : 'Positive'
            }
        )

    def test_069(self, name='Security Level 11 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )
    def test_070(self, name='<Transition Server to extendedSession>  - Sec Lvl 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_071(self, name='Security Level 11 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_072(self, name='Verify Server is unlocked for Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 C0',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )
    def test_073(self, name='Security Level 11 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_074(self, name='<Unlock the Server via security access service> - Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_075(self, name='<Transition Server to extendedSession>  - Sec Lvl 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )

    def test_076(self, name='Security Level 13 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_077(self, name='<Unlock the Server via security access service> - Security Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response'  : 'Positive'
            }
        )
    def test_078(self, name='Verify Server is unlocked for Security Level 13'):
        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title='Preconditions',       
            communication_control= False,
            expected={
                'response'            : 'Positive'
            }
        )
        
        test.preconditions(
            step_info=info()
        )
        
        test.step(
            step_title=name,
            custom ='31 01 02 05',
            expected={
                'response'            : 'Positive'
            }
        )

    def test_079(self, name='Security Level 13 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )
        
    def test_080(self, name='<Transition Server to extendedSession>  - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_081(self, name='Security Level 13 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )        
    def test_082(self, name='Verify Server is unlocked for Security Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom ='31 01 02 05',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )
    def test_083(self, name='Security Level 13 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_084(self, name='<Unlock the Server via security access service> - Security Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response'  : 'Positive'
            }
        )


    def test_085(self, name='<Transition Server to extendedSession>  - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )


    def test_086(self, name='Security Level 15 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_087(self, name='<Unlock the Server via security access service> - Security Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response'  : 'Positive'
            }
        )
    def test_088(self, name='Verify Server is unlocked for Security Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 90 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31',
            expected={
                'response'            : 'Positive'
            }
        )

    def test_089(self, name='Security Level 15 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response'            : 'Positive',
                'data': self.all_00s_byte_seed
            }
        )      
    def test_090(self, name='<Transition Server to extendedSession>  - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )        
    def test_091(self, name='Security Level 15 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    def test_092(self, name='Verify Server is unlocked for Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 90 00',
            expected={
                'response'            : 'Negative',
                'data'                : '33'
            }
        )

    def test_093(self, name='Security Level 15 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_094(self, name='<Unlock the Server via security access service> - Security Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_095(self, name='<Transition Server to extendedSession>  - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )

    def test_097(self, name='Pyrotechnic ECUs - Place holder'):
        return 0

    def test_098(self, name='Pyrotechnic ECUs - Place holder'):
        return 0

    def test_099(self, name='Pyrotechnic ECUs - Place holder'):
        return 0

    def test_100(self, name='Pyrotechnic ECUs - Place holder'):
        return 0

    def test_101(self, name='Pyrotechnic ECUs - Place holder'):
        return 0
    def test_102(self, name='Pyrotechnic ECUs - Place holder'):
        return 0  
    def test_103(self, name='Pyrotechnic ECUs - Place holder'):
        return 0   
    def test_104(self, name='Pyrotechnic ECUs - Place holder'):
        return 0
    def test_105(self, name='Pyrotechnic ECUs - Place holder'):
        return 0
    def test_106(self, name='Pyrotechnic ECUs - Place holder'):
        return 0
    def test_107(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    def test_108(self, name='Security Level 01 - Req Seed - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True #add
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_109(self, name='<Unlock the Server via security access service> - Security Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr=False #add
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_110(self, name='<Transition Server to extendedSession>  - Functional Positive Flow'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_111(self, name='Security Level 03 - Req Seed - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True #add
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_112(self, name='<Unlock the Server via security access service> - Security Level 03'):
        test.preconditions(
            step_info=info(),
            functionalAddr=False #add
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_113(self, name='<Transition Server to extendedSession>  - Sec Lvl 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )

    def test_114(self, name='Security Level 05 - Req Seed - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True #add
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_115(self, name='<Unlock the Server via security access service> - Security Level 05'):
        test.preconditions(
            step_info=info(),
            functionalAddr=False #add
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_116(self, name='<Transition Server to extendedSession>  - Sec Lvl 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_117(self, name='Security Level 09 - Req Seed - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True #add
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_118(self, name='<Unlock the Server via security access service> - Security Level 09'):
        test.preconditions(
            step_info=info(),
            functionalAddr=False #add
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_119(self, name='<Transition Server to extendedSession>  - Sec Lvl 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response'  : 'Positive',
                'dataLength': '4'
            }
        )
    def test_120(self, name='Security Level 0B - Req Seed - Functional'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True #add
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_121(self, name='<Unlock the Server via security access service> - Security Level 0B'):
        test.preconditions(
            step_info=info(),
            functionalAddr=False#add
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response'  : 'Positive'
            }
        )

    def test_122(self, name='defaultSession in defaultSession'):

        test.preconditions(
            step_info=info(),
        )

        test.step(
            step_title=name,
            default_session_control=True,

            expected={
                'response'   : 'Positive',
                'dataLength':  4
            }
        )