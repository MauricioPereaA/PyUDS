
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )

        precondition_set = tools.popup.ask(
            title='MEC > 0',
            description='* Attention! This Test case requires a MEC > 0. *\n Do you want to proceed??'
        )
        if not precondition_set:
            raise Warning('MEC > 0 should be satisfied before you perform this test.')
        
        self.all_FFs_byte_seed = ' '.join(('FF '*31).split())

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_414(self, name='request Seed - Sec Lvl 05'):
        test.preconditions(
            step_info=info(),
            mec_zero=False,
            sbat=False
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            request_seed='05',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_415(self, name='send Key - Sec Lvl 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_416(self, name='<Verify Server is unlocked for Security Level 05>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_417(self, name='<Transition Server to extendedSession> -- Sec Lvl 13 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_418(self, name='<Activate TesterPresent> -- Sec Lvl 13 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_420(self, name='request Seed - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_421(self, name='send Key - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_422(self, name='<Verify Server is unlocked for Security Level 13>'):
    
        test.preconditions(
            step_info=info()
        )    
        
        test.step(
            step_title='Preconditions',       
            communication_control= False,
            expected={
                'response'            : 'Positive'
            }
        )
        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 05',
            expected={
                'response': 'Positive'
            }
        )

    def test_423(self, name='<Transition Server to extendedSession> -- Sec Lvl 15 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_424(self, name='<Activate TesterPresent> -- Sec Lvl 15 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_426(self, name='request Seed - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_427(self, name='send Key - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_428(self, name='<Verify Server is unlocked for Security Level 15>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_429(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_430(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )