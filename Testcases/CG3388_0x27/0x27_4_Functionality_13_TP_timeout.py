
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )
        self.s3_timeout = 5 + 0.1 # S3 timeout + 100 msec
		
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_462(self, name='<Transition Server to extendedSession> -- Sec Level 05'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=False
        )
        test.step(
            step_title=name,
            custom='10 03',
            request_seed='05',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_463(self, name='send key -- Security Level 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_464(self, name='<Verify Server is unlocked for Security Level 05>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_465(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 05'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)

    def test_466(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 05',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_467(self, name='<Transition Server to extendedSession> -- Sec Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_468(self, name='<Activate TesterPresent> -- Sec Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_470(self, name='request seed -- Security Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_471(self, name='send key -- Security Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_472(self, name='<Verify Server is unlocked for Security Level 13>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 90'+'01'*17,
            expected={
                'response': 'Positive'
            }
        )

    def test_473(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 13'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)

    def test_474(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 13',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_475(self, name='<Transition Server to extendedSession> -- Sec Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_476(self, name='<Activate TesterPresent> -- Sec Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_478(self, name='request seed -- Security Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_479(self, name='send key -- Security Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_480(self, name='<Verify Server is unlocked for Security Level 15>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2E F1 90'+'01'*17,
            expected={
                'response': 'Positive'
            }
        )

    def test_481(self, name='Stop periodically transmitted Tester Present + wait for S3 Tiemout + 100 msc-- Sec Level 15'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            stop_tester_present=True,
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Wait for S3 Timeout + 100ms...', timeout=self.s3_timeout)
    def test_482(self, name='<Verify testerPresent Timeout enables security, the Server is locked>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 15',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_483(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_484(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )
