
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import tools, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )
		
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_215(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=False
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_216(self, name='send key -- Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_217(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_218(self, name='Lock server - <Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_219(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_220(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_221(self, name='<Transition Server to extendedSession> -- Sec Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_222(self, name='<Activate TesterPresent> -- Sec Level 03'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_224(self, name='request seed -- Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_225(self, name='send key -- Security Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_226(self, name='<Verify Server is unlocked for Security Level 03>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_227(self, name='Lock server - <Transition Server to extendedSession> -- Sec Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_228(self, name='<Activate TesterPresent> -- Sec Level 03'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_229(self, name='<Verify Server is unlocked for Security Level 03>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_230(self, name='<Transition Server to extendedSession> -- Sec Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_231(self, name='<Activate TesterPresent> -- Sec Level 09'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_233(self, name='request seed -- Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_234(self, name='send key -- Security Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_235(self, name='<Verify Server is unlocked for Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',   #02 7A is not ok    
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_236(self, name='Lock server - <Transition Server to extendedSession> -- Sec Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_237(self, name='<Activate TesterPresent> -- Sec Level 09'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_238(self, name='<Verify Server is unlocked for Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',       #31 01 02 3A-->31 01 02 7A ($023A not exist in odx) choose rid which is supported under level 09 but not locked state
                expected={                  ##02 7A is not ok 
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_239(self, name='<Transition Server to extendedSession> -- Sec Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_240(self, name='<Activate TesterPresent> -- Sec Level 0B'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_242(self, name='request seed -- Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_243(self, name='send key -- Security Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_244(self, name='<Verify Server is unlocked for Security Level 0B>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 C0 00',       #31 01 02 3A-->31 01 02 C0
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_245(self, name='Lock server - <Transition Server to extendedSession> -- Sec Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_246(self, name='<Activate TesterPresent> -- Sec Level 0B'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_247(self, name='<Verify Server is unlocked for Security Level 0B>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 C0 00',#31 01 02 3A-->31 01 02 C0 00($023A not exist in odx) choose rid which is supported under level 0B but not locked state
                expected={              #but in the original json file, 02 C0 is also not exsit
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_248(self, name='<Transition Server to extendedSession> -- Sec Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_249(self, name='<Activate TesterPresent> -- Sec Level 0D'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_251(self, name='request seed -- Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_252(self, name='send key -- Security Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_253(self, name='<Verify Server is unlocked for Security Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A', #31 01 02 3A-->31 01 02 7A 00
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_254(self, name='Lock server - <Transition Server to extendedSession> -- Sec Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_255(self, name='<Activate TesterPresent> -- Sec Level 0D'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_256(self, name='<Verify Server is unlocked for Security Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',#31 01 02 3A-->31 01 02 7A 00($023A not exist in odx) choose rid which is supported under level 0D but not locked state
                expected={           #Its not work
                    'response': 'Negative',
                    'data': '33'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Negative',
                    'data': '33'
                }
            )

    def test_257(self, name='<Transition Server to extendedSession> -- Sec Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_258(self, name='<Activate TesterPresent> -- Sec Level 11'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_260(self, name='request seed -- Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_261(self, name='send key -- Security Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_262(self, name='<Verify Server is unlocked for Security Level 11>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_263(self, name='Lock server - <Transition Server to extendedSession> -- Sec Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_264(self, name='<Activate TesterPresent> -- Sec Level 11'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_265(self, name='<Verify Server is unlocked for Security Level 11>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E', #choose rid which is supported under level 11 but not locked state
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_266(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_267(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_269(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_270(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_271(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_272(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_273(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_274(self, name='pyrotechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_275(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_276(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )