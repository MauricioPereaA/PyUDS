
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )

        self.all_00s_byte_seed = ' '.join(('00 '*31).split())
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_449(self, name='while server is Unlocked 05 Request Seed -- Sec Level 05'):
        # == Unlock server ==
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=False
        )
        test.step(step_title='unlock server', extended_session_control = True,
                    request_seed='05', send_key='05')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 05',
            expected={
                'response': 'Positive',
                'data': self.all_00s_byte_seed
            }
        )

    def test_450(self, name='<Verify Server is unlocked for Security Level 05>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_451(self, name='<Transition Server to extendedSession> -- Sec Level 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_452(self, name='<Activate TesterPresent> -- Sec Level 13'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_453(self, name='while server is Unlocked 13 Request Seed -- Sec Level 13'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server',
                    request_seed='13', send_key='13')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 13',
            expected={
                'response': 'Positive',
                'data': self.all_00s_byte_seed
            }
        )

    def test_454(self, name='<Verify Server is unlocked for Security Level 13>'):
    
        test.preconditions(
            step_info=info()
        )    
        
        test.step(
            step_title='Preconditions',       
            communication_control= False,
            expected={
                'response'            : 'Positive'
            }
        ) 
        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 05',
            expected={
                'response': 'Positive'
            }
        )

    def test_455(self, name='<Transition Server to extendedSession> -- Sec Level 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_456(self, name='<Activate TesterPresent> -- Sec Level 15'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_457(self, name='while server is Unlocked 15 Request Seed -- Sec Level 15'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server',
                    request_seed='15', send_key='15')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 15',
            expected={
                'response': 'Positive',
                'data': self.all_00s_byte_seed
            }
        )

    def test_458(self, name='<Verify Server is unlocked for Security Level 15>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_459(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_460(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )