
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test, tools     
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()



    def test_001(self, name='<Transition Server to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_002(self, name='serviceNotSupportedInActiveSession - 7F'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 01',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )

    def test_003(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    #add  
    def test_003_2(self, name='testerPresent defaultSession Physical Messaging'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )
    '''
    def test_004(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- min'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_005(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 01 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_006(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 1'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            custom='27 02 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_007(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 03 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_008(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 3'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            custom='27 04 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_009(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 05 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_010(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 5'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            custom='27 06 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_011(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 9'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 09 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_012(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 9'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            custom='27 0A FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_013(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0B FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_014(self, name='while Seed is active for the requested securityAccessType - Sec Lvl B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            custom='27 0C FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_015(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0D FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_016(self, name='while Seed is active for the requested securityAccessType - Sec Lvl D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            custom='27 0E FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_018(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 11'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='27 11 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_019(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            custom='27 12 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_020(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 13 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_021(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            custom='27 14 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_022(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- max - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 15 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_023(self, name='while Seed is active for the requested securityAccessType - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            custom='27 16 FF',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_024(self, name='<Transition Server to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
        time.sleep(2.5)
    '''
    def test_004(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_005(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_006(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_007(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_008(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_009(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_010(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_011(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_012(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_013(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_014(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_015(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    

    def test_016(self, name='<Transition Server to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_017(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_019(self, name='conditionsNotCorrect - 0x22 - Power Mode != OFF - Sec Lvl 11'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'      
        )
        tools.timer.input('Waiting 8 seconds', timeout=8) #time delay
        test.step(
            step_title=name,
            extended_session_control=True, #add this can pass
            start_tester_present=True,      #add
            custom='27 11',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_020(self, name='conditionsNotCorrect - 0x22 - Power Mode != OFF - Sec Lvl 13'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        )
        test.step(
            step_title=name,
            custom='27 13',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )

    def test_021(self, name='conditionsNotCorrect - 0x22 - Power Mode != OFF - Sec Lvl 15'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'
        )
        test.step(
            step_title=name,
            custom='27 15',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
#add
    '''
    def test_047_2(self, name='requestSequenceError - 0x24 -- SF 02'): #without this step, test48 will get NRC35
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='27 02 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )
#
    '''
    def test_022(self, name='requestSequenceError - 0x24 -- SF 02'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='27 02 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )
    
    def test_022_2(self, name='Pre-condition for next steps of NRC0x24 test - create inactive seed  for the requested securityAccessType except for leve1 01 '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )
    
    def test_023(self, name='requestSequenceError - 0x24 -- SF 04'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 04 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_024(self, name='requestSequenceError - 0x24 -- SF 06'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 06 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_025(self, name='requestSequenceError - 0x24 -- SF 0A'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0A FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_026(self, name='requestSequenceError - 0x24 -- SF 0C'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0C FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_027(self, name='requestSequenceError - 0x24 -- SF 0E'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0E FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_029(self, name='requestSequenceError - 0x24 -- SF 12'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF'
        )
        test.step(
            step_title=name,
            custom='27 12 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_030(self, name='requestSequenceError - 0x24 -- SF 14'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 14 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_031(self, name='requestSequenceError - 0x24 -- SF 16'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 16 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )
    '''
    def test_058(self, name='Unlock server -- Sec Lvl 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_059(self, name='NRC 0x24 - Send SF 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_060(self, name='Unlock server -- Sec Lvl 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            send_key='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_061(self, name='NRC 0x24 - Send SF 04'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='03',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_062(self, name='Unlock server -- Sec Lvl 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            send_key='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_063(self, name='NRC 0x24 - Send SF 06'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_064(self, name='Unlock server -- Sec Lvl 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            send_key='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_065(self, name='NRC 0x24 - Send SF 0A'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='09',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_066(self, name='Unlock server -- Sec Lvl 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            send_key='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_067(self, name='NRC 0x24 - Send SF 0C'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0B',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_068(self, name='Unlock server -- Sec Lvl 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            send_key='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_069(self, name='NRC 0x24 - Send SF 0E'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='0D',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_071(self, name='Unlock server -- Sec Lvl 11'):
        test.preconditions(
            step_info=info(),
            power_mode='OFF' 
        )
        test.step(
            step_title=name,
            request_seed='11',
            send_key='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_072(self, name='NRC 0x24 - Send SF 12'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='11',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_073(self, name='Unlock server -- Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            send_key='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_074(self, name='NRC 0x24 - Send SF 14'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )

    def test_075(self, name='Unlock server -- Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            send_key='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_076(self, name='NRC 0x24 - Send SF 16'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response': 'Negative',
                'data': '24'
            }
        )
    
    def test_078(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_079(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_080(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_081(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass
    '''
    def test_032(self, name='<Transition Server to defaultSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_033(self, name='<Transition Server to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_035(self, name='invalidKey - 0x35 -- Sec Lvl 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response': 'Positive'
            }
        )

    def test_036(self, name='invalidKey - 0x35 -- Sec Lvl 01 - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 02 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_038(self, name='invalidKey - 0x35 -- Sec Lvl 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='03',
            expected={
                'response': 'Positive'
            }
        )

    def test_039(self, name='invalidKey - 0x35 -- Sec Lvl 03 - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 04 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_041(self, name='invalidKey - 0x35 -- Sec Lvl 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_042(self, name='invalidKey - 0x35 -- Sec Lvl 05 - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 06 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_044(self, name='invalidKey - 0x35 -- Sec Lvl 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='09',
            expected={
                'response': 'Positive'
            }
        )

    def test_045(self, name='invalidKey - 0x35 -- Sec Lvl 09 - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0A FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_047(self, name='invalidKey - 0x35 -- Sec Lvl 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0B',
            expected={
                'response': 'Positive'
            }
        )

    def test_048(self, name='invalidKey - 0x35 -- Sec Lvl 0B - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0C FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_050(self, name='invalidKey - 0x35 -- Sec Lvl 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='0D',
            expected={
                'response': 'Positive'
            }
        )

    def test_051(self, name='invalidKey - 0x35 -- Sec Lvl 0D - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0E FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_054(self, name='invalidKey - 0x35 -- Sec Lvl 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='11',
            expected={
                'response': 'Positive'
            }
        )

    def test_055(self, name='invalidKey - 0x35 -- Sec Lvl 11 - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 12 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_057(self, name='invalidKey - 0x35 -- Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_058(self, name='invalidKey - 0x35 -- Sec Lvl 13 - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 14 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_060(self, name='invalidKey - 0x35 -- Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_061(self, name='invalidKey - 0x35 -- Sec Lvl 15 - Send Invalid Key'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 16 FF FF FF FF FF FF FF FF FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '35'
            }
        )

    def test_063(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_065(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

    def test_066(self, name='PYROTECHNIC ECU TEST - PLACE HOLDER'):
        pass

