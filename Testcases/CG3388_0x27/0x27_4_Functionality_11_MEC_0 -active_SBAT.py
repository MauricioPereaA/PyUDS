# This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )
        self.all_FFs_byte_seed = ' '.join(('FF '*31).split())


    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_432(self, name='<Transition Server to extendedSession> -- Sec Lvl 05 TC'):
        test.preconditions(
            step_info=info(),
            mec_zero=True,
            sbat=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            request_seed='05',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_433(self, name='send Key - Sec Lvl 05'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='05',
            expected={
                'response': 'Positive'
            }
        )

    def test_434(self, name='<Verify Server is unlocked for Security Level 05>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_435(self, name='<Transition Server to extendedSession> -- Sec Lvl 13 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_436(self, name='<Activate TesterPresent> -- Sec Lvl 13 TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_438(self, name='request Seed - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='13',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_439(self, name='send Key - Sec Lvl 13'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='13',
            expected={
                'response': 'Positive'
            }
        )

    def test_440(self, name='<Verify Server is unlocked for Security Level 13>'):
    
        test.preconditions(
            step_info=info()
        )    
        
        test.step(
            step_title='Preconditions',       
            communication_control= False,
            expected={
                'response'            : 'Positive'
            }
        )  
        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 05',
            expected={
                'response': 'Positive'
            }
        )

    def test_441(self, name='<Transition Server to extendedSession> -- Sec Lvl 15 TC'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_442(self, name='<Activate TesterPresent> -- Sec Lvl 15 TC'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_444(self, name='request Seed - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='15',
            expected={
                'response': 'Positive',
                'data': self.all_FFs_byte_seed
            }
        )

    def test_445(self, name='send Key - Sec Lvl 15'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='15',
            expected={
                'response': 'Positive'
            }
        )

    def test_446(self, name='<Verify Server is unlocked for Security Level 15>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_447(self, name='<Transition Server to extendedSession> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_448(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )