
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x27'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_129(self, name='while server is Unlocked 01 Request Seed -- Sec Level 01'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server', extended_session_control = True,
                    request_seed='01', send_key='01')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 01',
            expected={
                'response': 'Positive',
                'data': '00000000000000000000000000000000000000000000000000000000000000'
            }
        )

    def test_130(self, name='<Verify Server is unlocked for Security Level 01>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_131(self, name='<Transition Server to extendedSession> -- Sec Level 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_132(self, name='<Activate TesterPresent> -- Sec Level 03'):
        test.preconditions(
            step_info=info(), functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_133(self, name='while server is Unlocked 03 Request Seed -- Sec Level 03'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server',
                    request_seed='03', send_key='03')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 03',
            expected={
                'response': 'Positive',
                'data': '00000000000000000000000000000000000000000000000000000000000000'
            }
        )

    def test_134(self, name='<Verify Server is unlocked for Security Level 03>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_135(self, name='<Transition Server to extendedSession> -- Sec Level 09'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_136(self, name='<Activate TesterPresent> -- Sec Level 09'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_137(self, name='while server is Unlocked 09 Request Seed -- Sec Level 09'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server',
                    request_seed='09', send_key='09')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 09',
            expected={
                'response': 'Positive',
                'data': '00000000000000000000000000000000000000000000000000000000000000'
            }
        )

    def test_138(self, name='<Verify Server is unlocked for Security Level 09>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_139(self, name='<Transition Server to extendedSession> -- Sec Level 0B'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_140(self, name='<Activate TesterPresent> -- Sec Level 0B'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_141(self, name='while server is Unlocked 0B Request Seed -- Sec Level 0B'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server',
                    request_seed='0B', send_key='0B')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0B',
            expected={
                'response': 'Positive',
                'data': '00000000000000000000000000000000000000000000000000000000000000'
            }
        )

    def test_142(self, name='<Verify Server is unlocked for Security Level 0B>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_143(self, name='<Transition Server to extendedSession> -- Sec Level 0D'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_144(self, name='<Activate TesterPresent> -- Sec Level 0D'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_145(self, name='while server is Unlocked 0D Request Seed -- Sec Level 0D'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server',
                    request_seed='0D', send_key='0D')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 0D',
            expected={
                'response': 'Positive',
                'data': '00000000000000000000000000000000000000000000000000000000000000'
            }
        )

    def test_146(self, name='<Verify Server is unlocked for Security Level 0D>'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'MSM':
            test.step(
                step_title=name,
                custom='31 01 02 3A',
                expected={
                    'response': 'Positive'
                }
            )
        if device_under_test in ['ARB', 'PTM', 'SCL', 'TCP']:
            test.step(
                step_title=name,
                custom='22 F0 A7',
                expected={
                    'response': 'Positive'
                }
            )

    def test_147(self, name='<Transition Server to extendedSession> -- Sec Level 11'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_148(self, name='<Activate TesterPresent> -- Sec Level 11'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_149(self, name='while server is Unlocked 11 Request Seed -- Sec Level 11'):
        # == Unlock server ==
        test.preconditions(current_step='unlock Server')
        test.step(step_title='unlock server',
                    request_seed='11', send_key='11')
        # == Unlock server ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='27 11',
            expected={
                'response': 'Positive',
                'data': '00000000000000000000000000000000000000000000000000000000000000'
            }
        )

    def test_150(self, name='<Verify Server is unlocked for Security Level 11>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 02 1E',
            expected={
                'response': 'Positive'
            }
        )

    def test_151(self, name='protechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_152(self, name='protechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        ## THIS IS A PLACE HOLDER TEST STEP ##
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_153(self, name='protechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        ## THIS IS A PLACE HOLDER TEST STEP ##
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_154(self, name='protechnic ECU Test'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0
        ## THIS IS A PLACE HOLDER TEST STEP ##
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )


    def test_155(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            default_session_control=True,
            expected={
                'response': 'Positive',      #No response-->Positive
                'dataLength': '4'                
            }
        )

    def test_156(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            extended_session_control=True,
            expected={
                'response': 'Positive',     #No response-->Positive
                'dataLength': '4'
            }
        )

    def test_157(self, name='<Activate TesterPresent> -- Sec Level 01'):
        test.preconditions(
            step_info=info(),
            functionalAddr = True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

