
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import device_under_test, tools, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase() 
class PyUDS_TestCase(unittest.TestCase):

    #== CG3531 - Network Supervision - TC11 ==# 
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Network Supervision'
        )

        ''' Device Under Test - Settings '''
        self.protected_message = random.choice(     # Pick random message to be tested from supporteds
            tuple(pn_dict[device_under_test]['protected_messages'].keys())
        )
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']
        self.CGM_message = {
            "PTM" : "CGM_CAN4_PDU09",
            "ARB" : "PDU_1026",
            "TCP" : "Placeholder"   # Pending to know which MSGS contains LogisticModeStatus to set Transport Mode on the TCP
        }
    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    def test_001_1(self, name='%s :: start message transmission + 5s delay + Clear DTC | '%device_under_test):
        
        test.preconditions(
            step_info=info()
        )
        time.sleep(5)
        test.step(
            step_title='{0} - {1}'.format(name, device_under_test),
            custom='14 FF FF FF',
            expected={
                'response':     'Positive'
            }
        )  

    def test_001_2(self, name='%s :: No DTCs Set | '%device_under_test):
        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='{0} - {1}'.format(name, device_under_test),
            custom='19 02 09',
            expected={
                'response':     'Positive',                
                'data'    :     'FF'
            }
        )  

    def test_002(self, name='Transport Mode Enabled + Bus Off Condition :: %s :: No DTC Set | '%device_under_test):
        
        test.preconditions(
            step_info=info(),
            signal = [
                'LogisticModeStatus', self.CGM_message[device_under_test], 2
            ]
        )
        time.sleep(5)
        
        test.canoe.set_envVariable(envBusOff=1)
        time.sleep(0.2)
        test.canoe.set_envVariable(envBusOff=0)
        time.sleep(1)
        
        #Remove BusOff condition:
        test.canoe.set_envVariable(envVNMFStop=1)
        test.canoe.set_envVariable(envVNMFSend=0)
        time.sleep(0.5)
        test.canoe.set_envVariable(envVNMFStop=0)
        test.canoe.set_envVariable(envVNMFSend=1)
        
        time.sleep(7)
        test.step(
            step_title='{0} - {1}'.format(name, device_under_test),
            custom='19 02 09',
            expected={
                'response':     'Positive',                
                'data':  'FF'
            }
        )