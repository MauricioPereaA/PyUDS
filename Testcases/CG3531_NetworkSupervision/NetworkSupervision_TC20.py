
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
from framework.shared_functions import device_under_test, ARC_sys_vars, sleep_timeout, tools        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            step_delay=0.001,
            writeTestResults=False,
            excel_tab='Network Supervision'
        )
        self.signals_Inv={
                "ARB":{
                    "1":["BatVlt_Inv","PDU_1027"],
                    "2":["BGI3P_BrkPedInitTrvlAchAuth_Inv", "BdyGenInfo3_Prtctd_PDU"],
                    "3":["BGI3P_BrkPedModrTrvlAchAuth_Inv", "BdyGenInfo3_Prtctd_PDU"],
                    "4":["BGI3P_BrkPedPstnAuth_Inv", "BdyGenInfo3_Prtctd_PDU"],
                    "5":["BSPMP_BkupSysPwrModeAuth_Inv", "BkupSysPwrMode_Prtctd_PDU"],
                    "6":["BSPMP_SecPwrModePBActvAuth_Inv", "BkupSysPwrMode_Prtctd_PDU"],
                    "7":["BSPMP_SecRunCrnkCmdActvAuth_Inv", "BkupSysPwrMode_Prtctd_PDU"],
                    "8":["CoDrvDrAjrStat_Inv", "PDU_1021"],
                    "9":["DrvDrAjrStat_Inv", "PDU_1022"],
                    "10":["LRDrAjrStat_Inv", "PDU_1022"],
                    "11":["OATP_OtsAirTmpCrValAuth_Inv", "PDU_1021"],
                    "12":["PSP_ClchBtmTrvlAchvdAuth_Inv","SrlDat22_Prtctd_PDU"],
                    "13":["PSP_PrkNeutSwStatAuth_Inv","SrlDat22_Prtctd_PDU"],
                    "14":["RIP_StrtStopIgnSwPrssdAuth_Inv", "SysPwrMode_Prtctd_PDU"],
                    "15":["RRDrAjrStat_Inv", "PDU_1022"],
                    "16":["SPMP_PriRunCrnkCmdActvAuth_Inv", "SysPwrMode_Prtctd_PDU"],
                    "17":["SPMP_SysPwrModeAuth_Inv", "SysPwrMode_Prtctd_PDU"],
                    "18":["TEGP_TrnsEngdStAuth_Inv", "TrnsEstGr_Prtctd_PDU"],
                    "19":["TEGP_TrnsEstGrAuth_Inv", "TrnsEstGr_Prtctd_PDU"],
                    "20":["TEGP_TrnsShftLvrPstnAuth_Inv", "TrnsEstGr_Prtctd_PDU"],
                    "21":["TGPSDSP_UTCDyAuth_Inv", "PDU_1028"],
                    "22":["TGPSDSP_UTCMonthAuth_Inv", "PDU_1029"],
                    "23":["TGPSDSP_UTCYrAuth_Inv", "PDU_1027"],
                    "24":["TGPSTSP_UTCHrsAuth_Inv", "PDU_1018"],
                    "25":["TGPSTSP_UTCMinsAuth_Inv", "PDU_1018"],
                    "26":["VSADP_VehSpdAvgDrvnAuth_Inv", "VehSpdAvgDrvn_Prtctd_PDU"]   
                }
        }

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001_1(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )
        time.sleep(5)
        test.step(
            step_title=name,
            read_data_ID='F1 A0',
            expected={
                'response': 'Positive',
                'data': '00',
                'dataLength': '1'
            }
        )
        
    def test_001_2(self, name='Read MEC'):
        test.preconditions(
            step_info=info()
        )    
        
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )    
        
    def test_001_3(self, name='wait + 5 and read DTCs 1 - NO DTCs SET'):
        test.preconditions(
            step_info=info()
        )
        time.sleep(5)

        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )

    def test_004(self, name='Set Received serial data validity signal to invalid - Read No DTCs set'):
        test.preconditions(
            step_info=info()

        )
     
        #Step 3
        for s in self.signals_Inv[device_under_test].keys():
            test.canoe.set_signal(self.signals_Inv[device_under_test][s][0],self.signals_Inv[device_under_test][s][1],1)
            time.sleep(0.5)
            
        time.sleep(6)
        #Step 4
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )
        
  