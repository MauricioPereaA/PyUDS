
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
from framework.shared_functions import device_under_test, ARC_sys_vars, sleep_timeout, tools        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            step_delay=0.001,
            writeTestResults=False,
            excel_tab='Network Supervision'
        )
        self.invalid_signal_DTCs = {
            "ARB":{
                "VehSpdAvgDrvn_Prtcd_MSG":{
                    "ID":"614","ARC":1,"PV":0,"CS":0,
                    "DTC":{
                        "C40100":{"x":8,"y":1000,"cal":0}
                    }
                },
                "TrnsEstGr_Prtcd_MSG":{
                    "ID":"50","ARC":1,"PV":0,"CS":0,
                    "DTC":{
                        "C40100":{"x":16,"y":720,"cal":0},
                        "C41100":{"x":1,"y":1000,"cal":0},
                        "C40200":{"x":1,"y":1000,"cal":1},
                    }
                },
                "SysPwrMode_Prtcd_MSG":{
                    "ID":"878","ARC":1,"PV":1,"CS":0,
                    "DTC":{
                        "C42200":{"x":8,"y":2500,"cal":0}
                    }
                },
                "BkupSysPwrMode_Prtctd_MSG":{
                    "ID":"880","ARC":1,"PV":1,"CS":0,
                    "DTC":{
                        "C44700":{"x":8,"y":2500,"cal":0}
                    }
                }
            }
        }

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
        
    def current_step(self):
        return str(self.test_step_counter).rjust(3,'0')

    def count_step(self):
        self.test_step_counter+=1
        
    def test_001(self, name='Invalid Data PN'):
        for msg in self.invalid_signal_DTCs[device_under_test].keys():
            print(msg)
            self.Msg_ID=self.invalid_signal_DTCs[device_under_test][msg]['ID']
        #def test_002(self, name='wait +5 seconds and Clear DTCs'):
            test.preconditions(
                step_info=info()
            )
            time.sleep(5)
            test.step(
                step_title=name,
                custom='14 FF FF FF',
                expected={
                    'response': 'Positive'
                }
            )
        #def test_004(self, name='wait + 5 and read DTCs 1 - NO DTCs SET'):
            test.preconditions(
                step_info=info()
            )
            #Step 3
            time.sleep(5)
            #Step 4 Read DTCs
            test.step(
                step_title=name,
                custom='19 02 09',
                expected={
                    'response': 'Positive',
                    'data': 'FF'
                }
            )

        #def test_011(self, name='Sleep-Cause ARC failure-WakeUp'):
            test.preconditions(
                step_info=info()
            )
            
            #Step 6 Allow the ECU to transition to sleep state     
            test.canoe.set_envVariable(envVNMFSend=0)
            test.canoe.set_envVariable(envVNMFStop=1)
            
            #Step 7 Wait the time required for ECU to reach Sleep State.
            for s in reversed(range(50)): #sleep time
                # Wait for 'n' seconds until the module goes to sleep
                #  - Where 'n' = sleep_timeout integer value specified in config file
                print(s, end='  ', flush=True)
                time.sleep(1)
                
            #step 8 Configure RBS to block the update of ARC in the identified message
            test.canoe.set_envVariable(Env_MsgID = self.Msg_ID)
            test.canoe.set_system_variable('SysVarSecMsg','SysInValidDataCount','1')
            test.canoe.set_system_variable('SysVarSecMsg','SysInvalidARC','1')
            test.canoe.set_envVariable(Env_MsgStartStop='INVALIDARC')
            
            #Step 9 Perform server WakeUp
            test.canoe.set_envVariable(envVNMFStop=0)
            test.canoe.set_envVariable(envVNMFSend=1)
            
            #step 10 and 11 Read DTCs every 1 second for 10 seconds
            test.canoe.set_envVariable(envReadingPeriod=1000)
            time.sleep(0.1)
            test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','1')
            time.sleep(11)
            test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','0')
            
            prompt = tools.popup.ask(title=name, description='Please check replies to 19 02 09 show Invalid Data DTC after 5 seconds of PN activation')
            test.compare(True, prompt, step='test_011')
            
            #Clear for next iteration
            test.canoe.set_envVariable(Env_MsgID = self.Msg_ID)
            test.canoe.set_system_variable('SysVarSecMsg','SysInValidDataCount','0')
            test.canoe.set_system_variable('SysVarSecMsg','SysInvalidARC','0')
            test.canoe.set_envVariable(Env_MsgStartStop='INVALIDARC')
        
  