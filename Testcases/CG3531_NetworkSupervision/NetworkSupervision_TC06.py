
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
        
from framework.shared_functions import device_under_test, tools, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase() 
class PyUDS_TestCase(unittest.TestCase):

    #== CG3531 - Network Supervision ==# 
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='Network Supervision'
        )

        ''' Device Under Test - Settings '''
        self.protected_message = list(pn_dict[device_under_test]['protected_messages'].keys())[0]
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']
        self.msgSupTimeout=pn_dict[device_under_test]['protected_messages'][self.protected_message]['SupervisionTimeout']        
        self.CGM_message = {
            "PTM" : "CGM_CAN4_PDU09",
            "ARB" : "PDU_1026",
            "TCP" : "Placeholder"       # Pending to see if there is a message containing LogisticModeStatus for the TCP module.
        }

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    
    def test_001_1(self, name='%s :: 5s delay + Clear DTCs'%device_under_test):
        #test.canoe.power_panel('RUN')
        time.sleep(5)
        test.preconditions(step_info=info())
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_001_2(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )

    def test_002_1(self, name='%s :: stop message transmission + read DTC - DTC is not Set | '%device_under_test):
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        
        test.preconditions(
            step_info=info()
        )
        #Read DTCs before supervision timeout
        test.canoe.set_envVariable(envReadingPeriod=self.msgSupTimeout/2)

        test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','1')
        time.sleep(self.msgSupTimeout/2000)
        test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','0')  

    def test_002_2(self, name='%s :: stop message transmission + 5s delay + read DTC - DTC is Set | '%device_under_test):
        
        test.preconditions(
            step_info=info()
        )
        time.sleep(7)
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 09',
            expected={
                'response':     'Positive',                
                'partialData':  '%s 2F'%self.DTC
            }
        )  
        
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_003_1(self, name='%s :: start message transmission + 5s delay + Clear DTC | '%device_under_test):
        
        test.preconditions(
            step_info=info()
        )
        time.sleep(5)
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='14 FF FF FF',
            expected={
                'response':     'Positive'
            }
        )  

    def test_003_2(self, name='%s :: No DTCs Set | '%device_under_test):
        
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 09',
            expected={
                'response':     'Positive',                
                'data'    :     'FF'
            }
        )  

    def test_004(self, name='Transport Mode Enabled :: %s :: No DTC Set | '%device_under_test):
        
        test.preconditions(
            step_info=info(),
            signal = [
                'LogisticModeStatus', self.CGM_message[device_under_test], 2
            ]
        )
        test.canoe.set_envVariable(**dict({self.protected_message:1}))
        time.sleep(15)
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 09',
            expected={
                'response':     'Positive',                
                'data':  'FF'
            }
        )

    def test_005(self, name='Transport Mode Disabled :: %s :: Lost of comm DTC Set | '%device_under_test):
        
        test.preconditions(
            step_info=info(),
            signal = [
                'LogisticModeStatus', self.CGM_message[device_under_test], 0
            ]
        )
        time.sleep(15)
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 02 09',
            expected={
                'response':     'Positive',                
                'partialData':  '%s 2F'%self.DTC
            }
        )
        test.canoe.set_envVariable(**dict({self.protected_message:0}))