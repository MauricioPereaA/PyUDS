
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
from framework.shared_functions import device_under_test, ARC_sys_vars, sleep_timeout, tools        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            step_delay=0.001,
            writeTestResults=False,
            excel_tab='Network Supervision'
        )
        self.invalid_signal_DTCs = {
            "ARB":{
                "Cal_ECM_ECP":{			
                    "C40100": {
                        "Messages": { 
                            "VehSpdAvgDrvn_Prtcd_MSG":{"ID":"614","x":8,"y":1000},
                            "TrnsEstGr_Prtcd_MSG": {"ID":"50","x":16,"y":720}
                        }
                    },
                    "C41100": {				
                        "Messages": {
                            "TrnsEstGr_Prtcd_MSG": {"ID":"50","x":1,"y":1000}
                        }
                    },

                    "C42200": {
                        "Messages": {
                            "SysPwrMode_Prtcd_MSG": {"ID":"878","x":8,"y":2500}
                        }
                    },
                    "C44700": {
                        "Messages": {
                            "BkupSysPwrMode_Prtctd_MSG": {"ID":"880","x":8,"y":2500}
                        }
                    }
                },
                "Cal_TCM":{
                    "C4 02 00": {
                        "Messages": {
                            "TrnsEstGr_Prtcd_MSG": {"ID":"50","x":16,"y":720}
                        }
                    }
                }
            }
		}
        self.calibration_config=list(self.invalid_signal_DTCs[device_under_test])[0]
        self.invalidData_DTC=list(self.invalid_signal_DTCs[device_under_test][self.calibration_config])[0]
        self.invalidData_Msg=list(self.invalid_signal_DTCs[device_under_test][self.calibration_config][self.invalidData_DTC]['Messages'])[0]
        self.Msg_ID=self.invalid_signal_DTCs[device_under_test][self.calibration_config][self.invalidData_DTC]['Messages'][self.invalidData_Msg]['ID']
        print(self.Msg_ID)        

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_002(self, name='wait +5 seconds and Clear DTCs'):
        test.preconditions(
            step_info=info()
        )
        time.sleep(5)
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )
    def test_003(self, name='wait + 5 and read DTCs 1 - NO DTCs SET'):
        test.preconditions(
            step_info=info()
        )
        time.sleep(5)
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )

    def test_005(self, name='Transmit Invalid ARC,CS or PV + read DTCs every 1s'):
        test.preconditions(
            step_info=info()
        )
        
        #step 4 Transmit safety security protection is failed/Invalid:
        test.canoe.set_envVariable(Env_MsgID = self.Msg_ID)
        test.canoe.set_system_variable('SysVarSecMsg','SysInValidDataCount','1')
        test.canoe.set_system_variable('SysVarSecMsg','SysInvalidARC','1')
        test.canoe.set_envVariable(Env_MsgStartStop='INVALIDARC')
        
        #step 5 Read DTCs every 1 second for 10 seconds
        test.canoe.set_envVariable(envReadingPeriod=1000)
        test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','1')
        time.sleep(11)
        test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','0')
        
        prompt = tools.popup.ask(title=name, description='Please check replies to 19 02 09 show Invalid Data DTC C4 11 00 2F - record time')
        test.compare(True, prompt, step='test_005')
        
    def test_007(self, name='wait + 5 - Remove Invalid condition and Clear DTCs'):
        test.preconditions(
            step_info=info()
        )
        
        #Step 6 Transmit safety security protection Invalid:
        test.canoe.set_envVariable(Env_MsgID = self.Msg_ID)
        test.canoe.set_system_variable('SysVarSecMsg','SysInValidDataCount','0')
        test.canoe.set_system_variable('SysVarSecMsg','SysInvalidARC','0')
        test.canoe.set_envVariable(Env_MsgStartStop='INVALIDARC')
        
        #Step 7 Wait > 5 seconds
        time.sleep(6)
        
        #Clear DTCs                                         
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )        

    def test_008(self, name='wait + 5 + Read DTCs - No DTCs set'):
        test.preconditions(
            step_info=info()
        )
        #Wait > 5 seconds
        time.sleep(6)
 
        #step Read DTCs
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }

        )         
        
    def test_011(self, name='Read DTCs'):
        test.preconditions(
            step_info=info()
        )
        
        #Step 9 Change supply voltage to > calibrated low voltage
        test.set_dtc_condition(overVoltage=True)
        
        #Wait > 500ms 
        time.sleep(0.6)

        #Step 10 Transmit safety security protection Invalid:
        test.canoe.set_envVariable(Env_MsgID = self.Msg_ID)
        test.canoe.set_system_variable('SysVarSecMsg','SysInValidDataCount','1')
        test.canoe.set_system_variable('SysVarSecMsg','SysInvalidARC','1')
        test.canoe.set_envVariable(Env_MsgStartStop='INVALIDARC')
        time.sleep(2)
        
        #Step 11 Read DTCs
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data': 'FF'
            }
        )
        
    def test_013(self, name='Return voltage to normal - Read DTCs (not set yet)'):
        test.preconditions(
            step_info=info()
        )
        #Step 12 Power supply - Return voltage to normal
        test.power_supply_reset_default()
        test.canoe.set_envVariable(overVoltageCondition=0)
        
        #Wait 4 seconds - removing some time to allow for processing overhead
        time.sleep(4)
        
        #Step 13 Read DTCs every 200ms for 10 times (2seconds)
        test.canoe.set_envVariable(envReadingPeriod=200)
        time.sleep(0.1)
        test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','1')
        time.sleep(2.2)
        test.canoe.set_system_variable('Generic_Functional','TriggerDTCRead','0')

    def test_014(self, name='wait +4 seconds and read DTCs - InvalidData DTC is set'):
        test.preconditions(
            step_info=info()
        )
        #Step 14 Wait 4+ seconds - Read DTCs
        time.sleep(5)
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive'
            }
        )
        prompt = tools.popup.ask(title=name, description='Please check No InvalidSignal DTC are set within 5 seconds from low voltage recovery')
        test.compare(True, prompt, step='test_014') 