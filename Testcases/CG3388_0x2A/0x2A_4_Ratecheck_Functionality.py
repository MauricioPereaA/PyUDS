'''
    TestScript intended to perform CG3388 Tab 0x2A -- 4. Functionality
'''
''' High Level Script CG2019
Author: Manuel Medina
Modified by : Mauricio Perea
Modified by : Ricardo Montes  Date: 17-Jun-20
Modified by: Mauricio Perea        Date: 30-Sep-20

This script is intended to validate Functionality of service 0x2A which main function is to request the periodic transmission of data record values from the server by one or more periodicDataIdentifiers (PDID).


'''
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #

from framework.shared_functions import tools, device_under_test
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        if device_under_test is 'SCL':
            tools.popup.warning(
                title='Service 0x2A not supported',
                description='SCL does not support service 0x2A'
            )
            raise Warning('SCL does not support service 0x2A')
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2A'
        )

        self.s3_timeout = 0.1

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Transition Server to ExtendedSession'):
        test.preconditions(
            step_info=info(),
            sbat=False, # Clear SBAT
            mec_zero=True
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='Activate tester present'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='DynamicallyDefineDataIdentifier  2C - F0-FF'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FF F0 80 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 FE F0 81 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 FD F0 84 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 FC F0 89 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 FB F0 8D 01 01', # change The 2C 01 F2 FB F0 8E 01 01 ->2C 01 F2 FB F0 8D 01 01
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 FA F0 8F 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F9 F0 90 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 01 F2 F8 F0 91 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F7 F0 92 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F6 F0 94 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F5 F0 95 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F4 F0 A7 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F3 F0 84 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F2 F0 AB 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F1 F0 B3 01 01',
            expected={
                'response': 'Positive'
            }
        )

        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 01 F2 F0 F0 B4 01 01',
            expected={
                'response': 'Positive'
            }
        )


    # Validate transmission timing of each mode Fast / medium / slow rate
    def test_022(self, name='While Server is in extendedSession, Send a valid 29 bit Normal fixed addressing, N_TAtype=physical address request'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FF', rate='01', timeout=10),

            expected={
                'response'      : 'Positive',
                'periodic_rate' : '01' # # CHECK the time is 1000 ms
            }
        )
    def test_023(self, name='While Server is in extendedSession Send a valid 29 bit Normal fixed addresing,N_TAtype=physical address request-FE'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FE', rate='02', timeout=10),  #BUG

            expected={
                'response'      : 'Positive',
                'periodic_rate' : '02' ## CHECK the time is 1200 ms
            }
        )

    def test_024(self, name='While Server is in extendedSession Send a valid 29 bit Normal fixed addresing,N_TAtype=physical address request-FD'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FD', rate='03', timeout=10),# 2A 03 FD

            expected={
                'response'      : 'Positive',
                'periodic_rate' : '03' # CHECK the time is 1225 ms
            }
        )

    def test_025(self, name='Keep periodic scheduler active for 2 minutes'):
        test.preconditions(
            step_info=info()
        )
        tools.timer.input('<Keep periodic scheduler active for 30 seconds>', timeout=30)
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='\n ** Please verify that the PDIDs of the previous steps (DID FF FE FD) are \
                    still being transmitted at their corresponding rate **\n'),
                step='test_025'
        )

    def test_026(self, name='Stop Transmission of Periodic Data Identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 04',
            expected={
                'response': 'Positive'
            }
        )
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Verify that the periodic response is not longer transmitted on the bus'),
                step='test_026'
        )

    def test_027(self, name='read PDID mode 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FF', rate='01', timeout=10),

            expected={
                'response': 'Positive',
                'periodic_rate' : '01'
            }
        )

    def test_028(self, name='read PDID mode 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FF', rate='02', timeout=10),

            expected={
                'response': 'Positive',
                'periodic_rate' : '02'
            }
        )

    def test_029(self, name='Verify changed response timing between periodic transmission'):
        test.preconditions(
            step_info=info()
        )
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Verify changed response timing between periodic transmission'),
                step='test_029'
        )
		
    def test_030(self, name='While Server is in extendedSession Send a valid29 bit Normal fixed addressing, N_TAtype=physical address request with the periodicDataIdentifier previously requested with the transmissionMode=02 - ADD DELAY 120s'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FF', rate='03', timeout=120),

            expected={
                'response'      : 'Positive',
                'periodic_rate' : '03'
            }
        )

    """	
    def test_031(self, name='stop transmission of all PDIDs'):
        test.preconditions(
            step_info=info()
        )
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Verify that periodic response is no longer transmitted on the bus'),
                step='test_031'
        )
    """
    def test_031(self, name='Verify changed response timing between periodic transmission'):
        test.preconditions(
            step_info=info()
        )
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Verify changed response timing between periodic transmission'),
                step='test_031'
        )

    # Purpose of the following tests is the use of subfunction 04 of service 2A
    def test_032(self, name='Stop Transmission of Periodic Data Identifier'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 04',

            expected={
                'response': 'Positive'
            }
        )
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Verify that the periodic response is not longer transmitted on the bus'),
                step='test_032'
        )

    def test_033(self, name='While Server is in extendedSession and multiple DDIDS are defined Send a valid 29 bit Normal fixed addressing, N_TAtype=physical address request with two valid periodicDataIdentifiers'):
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FF FE', rate='01', timeout=10),

            expected={
                'response': 'Positive',
                'periodic_rate' : '01'
            }
        )

    def test_034(self, name='stop transmission of PDID FF'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_periodic_data='FF',
            expected={
                'response': 'Positive'
            }
        )
		
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Verify that requested periodicDataIdentifier stopped and that the periodicDataIdentifier which was not requested continued to be sent.(FF stop FE continue)'),
                step='test_034'
        )

    def test_036(self, name='stop transmission of PDID FE'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_periodic_data='FE',
            expected={
                'response': 'Positive'
            }
        )
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Please verify that the PDID FF and FE are not being transmitted'),
                step='test_036'
        )

    def test_038(self, name='read PDID mode 01'):
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            read_periodic_data_id=dict(
                DDDID='FF', rate='01', timeout=10),

            custom='10 03',

            expected={
                'response': 'Positive',
                'periodic_rate': '01'
            }
        )
    
        test.compare(True, 
            tools.popup.ask(title=__name__,
                description='Verify proper responses and response timing between periodic transmission is around 1 second'),
                step='test_038'
        )
    def test_040(self, name='Transition to extended Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive'
            }
        )
        test.compare(True, 
            tools.popup.ask(title='Verify periodicDataID sent',
                description='Please Verify that requested periodicDataIdentifier continues to be sent'),
            step='test_040'
        )