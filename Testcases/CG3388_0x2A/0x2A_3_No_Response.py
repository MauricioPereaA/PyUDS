
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        if device_under_test is 'SCL':
            tools.popup.warning(
                title='Service 0x2A not supported',
                description='SCL does not support service 0x2A'
            )
            raise Warning('SCL does not support service 0x2A')
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2A'
        )

        self.DID = 'F0 80'
        self.secured_DID = {
            'MSM' : '4B 51', # Requires Sec Lvl 09 
            'ARB' : '',
            'PTM' : ''
        }

        self.supported_range = {
            'MSM' : (240, 256), #192
            'ARB' : (240, 256),
            'PTM' : (240, 256),
            'TCP' : (240, 256)
        }

        self.supported_DDDDI = [
            'F2 %s'%n for n in map(self.format_hex, range(
                self.supported_range[device_under_test][0],
                self.supported_range[device_under_test][1]
            )) # F2 XX -> F2 FF                                                     
        ]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()

    @classmethod
    def format_hex(cls, decimal):
        return hex(decimal).replace('0x','').upper()

    def test_001(self, name='<Transition Server to extendedSession> '):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_002(self, name='<Activate TesterPresent>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='<Clear DynamicallyDefineDataIdentifier>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_004(self, name='requestOutOfRange - No Response -- functionalAddr invalid PDID'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='2A 01 00',
            expected={
                'response': 'No response'
            }
        )

    def test_005(self, name='requestOutOfRange - No Response -- functionalAddr undefined PDID'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='2A 01 FF',
            expected={
                'response': 'No response'
            }
        )

    def test_006(self, name='<DynamicallyDefineDataIdentifier, defineByIdentifier>'):
        # Define all Periodic Identifiers
        for DDDDI in self.supported_DDDDI:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title='Define DDDDI {0} by srcIdentifier {1}'.format(DDDDI, self.DID),
                custom='2C 01 {0} {1} 01 01'.format(DDDDI, self.DID),
                expected = {
                    'response': 'Positive'
                }
            )

    def test_007(self, name='unsupported in current Session'):
        
        if device_under_test is 'MSM':
            print(__name__, 'This test is not supported by MSM')
            return None

        # No way to test service 2A in other session than extended
        raise Warning('This has not been implemented for %s'%device_under_test)

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='PLACE_HOLDER',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_008(self, name='unsupported transmission Mode'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='2A 00 FF',
            expected={
                'response': 'No response'
            }
        )

    def test_009(self, name='<Exceed the maximum number of periodicDataIdentifiers allowed to be scheduled concurrently>'):
        for _ in range(5):
            test.preconditions(current_step='set 0x2A - NRC 0x31 preconditions', 
                                functionalAddr=True)
            test.step(step_title='periodicDataIdentifiers - Transmission Mode 01',
                        custom='2A 01 F0 F1 F2 F3 F4')

            tools.timer.input('wait for 5 seconds',timeout=5),#add

            test.step(step_title='periodicDataIdentifiers - Transmission Mode 02',
                        custom='2A 02 F5 F6 F7 F8 F9')

            tools.timer.input('wait for 2 seconds',timeout=2),#add

            test.step(step_title='periodicDataIdentifiers - Transmission Mode 03',
                        custom='2A 03 FA FB FC FD FE')
            tools.timer.input('wait for 1 seconds',timeout=1)#add
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='2A 01 FB FC FD FE FF',
            expected={
                'response': 'No response'
            }
        )


