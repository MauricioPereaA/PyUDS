
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        if device_under_test is 'SCL':
            tools.popup.warning(
                title='Service 0x2A not supported',
                description='SCL does not support service 0x2A'
            )
            raise Warning('SCL does not support service 0x2A')
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2A'
        )

        self.DID = 'F0 80'
        self.secured_DID = {
            'MSM' : '4B 51', # Requires Sec Lvl 09 
            'ARB' : '',
            'PTM' : '',
            'TCP': 'F0 8F'
        }

        self.supported_range = {
            'MSM' : (240, 256), #192
            'ARB' : (240, 256),
            'PTM' : (240, 256),
            'TCP' : (240, 256)
        }

        self.supported_DDDDI = [
            'F2 %s'%n for n in map(self.format_hex, range(
                self.supported_range[device_under_test][0],
                self.supported_range[device_under_test][1]
            )) # F2 XX -> F2 FF                                                     
        ]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    
    @classmethod
    def format_hex(cls, decimal):
        return hex(decimal).replace('0x','').upper()

    def test_001(self, name='<DynamicallyDefineDataIdentifier, defineByIdentifier>'):
        # Define all Periodic Identifiers
        for DDDDI in self.supported_DDDDI:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title='Define DDDDI {0} by srcIdentifier {1}'.format(DDDDI, self.DID),
                custom='2C 01 {0} {1} 01 01'.format(DDDDI, self.DID),
                expected = {
                    'response': 'Positive'
                }
            )
    def test_002(self, name='serviceNotSupportedInActiveSession - 0x7F (defaultSession)'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 FF',
            expected={
                'response': 'Negative',
                'data': '7F'
            }
        )
    def test_003(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    def test_003_2(self, name='<Transition to extendedSession>'):#add
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True
        )
    def test_005(self, name='safetySession Test'):
        pass

    def test_006(self, name='safetySession Test'):
        pass

    def test_007(self, name='<Transition Server to defaultSession> NRC 0x13 Tests'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_008(self, name='<Transition to extendedSession> NRC 0x13 Tests'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_009(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- Min'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_010(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- Min SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_011(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- Min SF 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 02',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_012(self, name='incorrectMessageLengthOrInvalidFormat - 0x13 -- Min SF 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 03',
            expected={
                'response': 'Negative',
                'data': '13'
            }
        )

    def test_013(self, name='NRC 0x13 - 17 periodicDataIdentifiers -- SF 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF FF',
            expected={
                'response': 'Negative',
                'data'    : '13',
                'data_2'  : '31'
            }
        )

    def test_014(self, name='NRC 0x13 - 17 periodicDataIdentifiers -- SF 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 02 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF FF',
            expected={
                'response': 'Negative',
                'data'    : '13',
                'data_2'  : '31'
            }
        )

    def test_015(self, name='NRC 0x13 - 17 periodicDataIdentifiers -- SF 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 03 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF FF',
            expected={
                'response': 'Negative',
                'data'    : '13',
                'data_2'  : '31'
            }
        )

    def test_016(self, name='NRC 0x13 - 17 periodicDataIdentifiers -- SF 04'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 04 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF FF',
            expected={
                'response': 'Negative',
                'data'    : '13',
                'data_2'  : '31'
            }
        )

    def test_017(self, name='NRC 0x22 - Clear DynamicallyDefineDataIdentifier'):
        test.preconditions(
            step_info=info()
        )

        test.step(
            step_title=name,
            custom='2C 03',

            expected={
                'response' : 'Positive'
            }
        )

    def test_018(self, name='NRC 0x22 - DynamicallyDataIdentifier - DefinebyID - XX'):
        test.preconditions(
            step_info=info()
        )
        DDDDI = 'F2 FF'
        test.step(
            step_title='Define DDDDI {0} by srcIdentifier {1}'.format(DDDDI, self.DID),
            custom='2C 01 {0} {1} 01 01'.format(DDDDI, self.DID),
            expected = {
                'response': 'Positive'
            }
        )

    def test_019(self, name='NRC 0x22 - DynamicallyDataIdentifier - DefinebyID - YY'):
        test.preconditions(
            step_info=info()
        )
        DDDDI = 'F2 FE'
        test.step(
            step_title='Define DDDDI {0} by srcIdentifier {1}'.format(DDDDI, self.DID),
            custom='2C 01 {0} {1} 01 01'.format(DDDDI, self.DID),
            expected = {
                'response': 'Positive'
            }
        )

    def test_021(self, name='NRC 0x22 - Invalid conditions test'):
        if device_under_test is 'MSM':
            tools.popup.warning(__name__, 'MSM does not support NRC 0x22 for Service 0x2A')
        return 0
        test.preconditions(
            step_info=info()
        )
        test.set_dtc_condition(overVoltage=True)
        test.step(
            step_title=name + ' F2 FF',
            custom='2A 01 FF',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
        test.step(
            step_title=name+ ' F2 FE',
            custom='2A 02 FE',
            expected={
                'response': 'Negative',
                'data': '22'
            }
        )
        test.power_supply_reset_default()

    def test_022(self, name='<Clear DynamicallyDefineDataIdentifier>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_023(self, name='requestOutOfRange - 0x31 -- invalid PDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_024(self, name='requestOutOfRange - 0x31 -- undefined PDID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_025(self, name='<DynamicallyDefineDataIdentifier, defineByIdentifier> -- NRC 0x31'):
        # Define all Periodic Identifiers
        for DDDDI in self.supported_DDDDI:
            test.preconditions(
                step_info=info()
            )
            test.step(
                step_title='Define DDDDI {0} by srcIdentifier {1}'.format(DDDDI, self.DID),
                custom='2C 01 {0} {1} 01 01'.format(DDDDI, self.DID),
                expected = {
                    'response': 'Positive'
                }
            )


    def test_026(self, name='unsupported Transmission Mode'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 00 FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_027(self, name='<Exceed the maximum number of periodicDataIdentifiers allowed to be scheduled concurrently>'):
        for _ in range(5):
            test.preconditions(current_step='set 0x2A - NRC 0x31 preconditions')
            test.step(step_title='periodicDataIdentifiers - Transmission Mode 01',
                        custom='2A 01 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF')
            test.step(step_title='periodicDataIdentifiers - Transmission Mode 02',
                        custom='2A 02 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF')
            test.step(step_title='periodicDataIdentifiers - Transmission Mode 03',
                        custom='2A 03 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF')
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 F0 F1 F2 F3 F4 F5 F6 F7 F8 F9 FA FB FC FD FE FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_028(self, name='<Clear DynamicallyDefineDataIdentifier> -- nrc 0x33'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2C 03',
            expected={
                'response': 'Positive'
            }
        )
    def test_029(self, name='Security Level 01 - Req Seed'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            request_seed='01',
            expected={
                'response'            : 'Positive',
                'dataLength'          : 31,
                'unexpected_response' : True,
                'partialData'         : ('00', 'FF')
            }
        )

    def test_030(self, name='<Unlock the Server via security access service> - Security Level 01'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            send_key='01',
            expected={
                'response': 'Positive'
            }
        )
    def test_031(self, name='<DynamicallyDefineDataIdentifier, defineByIdentifier> -- nrc 0x33'):
        # Pre-condition step
        if device_under_test in ['MSM', 'TCP']:
            # For DID '4B 51', Sec Lvl 09 is required
            test.preconditions(current_step='sec lvl precondition')
            test.step(step_title='sec lvl 09 precondition',
                        request_seed='09', send_key='09')
        else:
            raise Warning('This has not been implemented yet for %s'%device_under_test)
        # Pre-condition step

        test.preconditions(
            step_info=info()
        )
        secured_did = self.secured_DID[device_under_test]
        test.step(
            step_title='Define DDDDI F2 FF by srcIdentifier {}'.format(secured_did),
            custom='2C 01 F2 FF {} 01 01'.format(secured_did),
            expected = {
                'response': 'Positive'
            }
        )
    def test_032(self, name='<Transition to extendedSession>'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )
    def test_033(self, name='<Lock Server if unlocked>+ secured PDID SF 01'):
        # Pre-condition step
        test.preconditions(current_step='Lock server')
        test.step(step_title='Lock server',
                    custom='10 03')
        # Pre-condition step
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 01 FF',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_034(self, name='Secured PDID SF 02'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 02 FF',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

    def test_035(self, name='Secured PDID SF 03'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 03 FF',
            expected={
                'response': 'Negative',
                'data': '33'
            }
        )

