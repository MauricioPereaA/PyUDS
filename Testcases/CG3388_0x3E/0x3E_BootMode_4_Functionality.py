
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import tools, device_under_test        
from Testcases.TestClass import TestCase
from inspect import stack as info
import time
import unittest

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x3E'
        )

        self.s3_timeout = 5 + 0.1 #  100 msec

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='extended'):
        # Begin -- Boot Mode preconditions
        test.preconditions(current_step='BootMode_Precondition')
        test.step(
            step_title='BootMode Precondition',
            extended_session_control=True,
            dtc_settings=False,
            communication_control=False,
            request_seed='01',
            send_key='01'
        )
        
        test.step(
            step_title = 'Boot_Mode',
            custom = '10 02'
        )
        # End -- Boot Mode preconditions.
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='enter bootMode',
            programming_session_control=True,
            custom='3E 80',
            expected={
                'response': 'No response'
            }
        )

    def test_002(self, name='Address request with a valid RID'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='31 01 FF 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_003(self, name='Verify programming session remains active by transmitting valid RID request for 2 minutes'):
        test.preconditions(
            step_info=info()
        )
        for i in range(5):
            test.step(
                step_title=name+' - Repeating 5 times in 2 minutes - %s time'%i,
                custom='31 01 FF 01',
                expected={
                    'response': 'Positive'
            }
            )
            tools.timer.input('Wait for ', timeout=24)

    def test_005(self, name='Stop tester present'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            stop_tester_present = True,
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input('Waiting for S3 Timeout + 100 msec', timeout=self.s3_timeout)

    def test_006(self, name='Verify Server has transitioned to Application Mode, defaultSession'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test in 'ARB':
        
            test.step(
                step_title=name,
                custom ='2E F1 DB 01 01',
                expected={
                    'response': 'Positive'
                }
            )        
        
        else: #each project add its DID
            test.step(
                step_title=name,
                custom ='2E F0 80 00',
                expected={
                    'response': 'Positive'
                }
            )