
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #

from framework.shared_functions import device_under_test        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest
import time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Diagnostic Trouble Codes Shall be Automatically Inhibited ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        testcase_not_supported_ecus = [
            'PTM', 'SCL', '..'
        ]

        if device_under_test in testcase_not_supported_ecus:
            raise Warning(__name__, 'is not supported by %s'%device_under_test)

        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2F Device Limits Exceeded'
        )

        self.DIDs = {
            'ARB' : {
                'DID' : '4B 5C',
                'mask': '06'
            },
            'MSM' : {
                'DID' : '44 5D',
                'mask': '00 00',
                'data': '0A'
            }
        }

        self.dut_dids = self.DIDs[device_under_test]  

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Transition to Extended Diagnostic Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_002(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='Read a supported DID that can be controlled by Service 2F, shortTermAdjustment'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 %s'%self.dut_dids['DID'],
            expected={
                'response': 'Positive'
            }
        )

    def test_004(self, name='Request I/O Control Short Term Adjustment'):
        # Pre conditions
        # - Vehicle Speed = 0
        # - Transmission = PARK

        test.preconditions(
            step_info=info(),
            mec_zero=True,
            signal=[
                'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                'TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 1
            ]
        )
        time.sleep(0.5)
        test.step(
            step_title=name,
            custom='2F {0} 03 {1}'.format(self.dut_dids['DID'], self.dut_dids['mask']),
            
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='Read DID - Verify the Short Term Adjustment (I/O Control) has successfully started or has reached its desired state (Read request)'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'ARB':
            expected_data = self.dut_dids['mask']
        elif device_under_test is 'MSM':
            expected_data = self.dut_dids['data']
        test.step(
            step_title=name,
            custom='22 %s'%self.dut_dids['DID'],

            expected={
                'response': 'Positive',
                'data': expected_data
            }
        )

    def test_006(self, name='Verify Automatic Disabling of DTCs - Read DTCs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data'    : 'FF'
            }
        )

    def test_007(self, name='Control DTC Setting On'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='85 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_008(self, name='Read DTCs - Verify DTC Setting is Re-enabled'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data'    : 'FF'
            }
        )

    def test_009(self, name='Request I/O Control Return Control To ECU'):
        test.preconditions(
            step_info=info()            
        )
        test.step(
            step_title=name,
            custom='2F %s 00'%self.dut_dids['DID'],
            expected={
                'response': 'Positive'
            }
        )

