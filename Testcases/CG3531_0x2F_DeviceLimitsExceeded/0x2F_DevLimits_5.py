
            # This is and autogenerated test case using PyUDS Test Builder v0.2 #

from framework.shared_functions import tools, device_under_test       
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        testcase_not_supported_ecus = [
            'PTM', 'SCL', '..'
        ]

        if device_under_test in testcase_not_supported_ecus:
            raise Warning(__name__, 'is not supported by %s'%device_under_test)

        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x2F Device Limits Exceeded'
        )
        self.DIDs = {
            'ARB' : {
                'DID1' : '43 14',
                'mask1': '02'
            },
            'MSM' : {
                'DID1' : '4B 53',
                'mask1': '01 01 01 01 F0',
                'data1': '00 00 00 00'
            }
        }

        self.dut_dids = self.DIDs[device_under_test]

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Transition to Extended Diagnostic Session'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_002(self, name='Activate TesterPresent'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            start_tester_present=True,
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='Schedule DID 0xF245 at Medium Rate (200 ms) - Verify starts in 00s'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='2A 02 45',
            expected={
                'response': 'Positive'
            }
        )
        tools.timer.input(
            'Please make sure 00s are gettings transmitted for service 0x2A', timeout=5
        )
        

    def test_004(self, name='Read DID 0xXXX7'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 %s'%self.dut_dids['DID1'],
            expected={
                'response': 'Positive'
            }
        )

    def test_005(self, name='Valid controlState parameter(s) - Request I/O Control Short Term Adjustment DID 0xXXX7'):
        test.preconditions(
            step_info=info(),
            signal=[
                'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                'TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 1
            ]
        )
        test.step(
            step_title=name,
            custom='2F {0} 03 {1}'.format(self.dut_dids['DID1'], self.dut_dids['mask1']),
            expected={
                'response': 'Positive'
            }
        )

    def test_006(self, name='Read DID 0xXXX7 - CG Step 85'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='22 %s'%self.dut_dids['DID1'],
            expected={
                'response': 'Positive'
            }
        )

    def test_007(self, name='Verify I/O Control DID 0xXXX7 has successfully started or has reached its desired state'):
        test.preconditions(
            step_info=info()
        )
        if device_under_test is 'ARB':
            expected_data = self.dut_dids['mask1']
        elif device_under_test is 'MSM':
            expected_data = self.dut_dids['data1']
            
        test.step(
            step_title=name,
            custom='22 %s'%self.dut_dids['DID1'],
            expected={
                'response': 'Positive',
                'data'    : expected_data
            }
        )

    def test_008(self, name='Check Scheduled DID 0xF245 for transiton from a zero value to a non-zero value to determine if the I/O Control has been terminated'):
        tools.timer.input(
            'Please make sure 00 are maintained on 0x2A Transmission', timeout=5
        )

    def test_009(self, name='Create invalid conditions - Check Scheduled DID 0xF245 for transiton from a zero value to a non-zero'):
        if device_under_test is 'ARB':
            test.preconditions( # ShftLvr = NEUTRAL
                step_info=info(),
                signal=[
                    'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                    'TEGP_TrnsShftLvrPstnAuth', 'TrnsEstGr_Prtctd_PDU', 2
                ]
            )
        if device_under_test is 'MSM':
            test.preconditions( # PrplSysActive = TRUE
                step_info=info(),
                signal=[
                    'VSADP_VehSpdAvgDrvnSrcAuth', 'VehSpdAvgDrvn_Prtctd_PDU', 0,
                    'PSP_PrplSysActvAuth', 'CGM_CAN4_PDU11', 1
                ]
            )
        test.step(
            step_title=name,
            custom='2F {0} 03 {1}'.format(
                self.dut_dids['DID1'], self.dut_dids['mask1']
            ),
            expected={
                'response': 'Negative',
                'data'    : '22'
            }
        )
        tools.timer.input(
            'Please make sure 00 have changed during 0x2A transmission', timeout=5
        )

    def test_010(self, name='Transition to Default Diagnostic Session Application Mode'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

