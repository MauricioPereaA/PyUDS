
            # This is and autogenerated test case using PyUDS Test Builder v0.3 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test        
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== PyUDS - Autogenerated Test Case Template ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x19'
        )

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_002(self, name='serviceNotSupportedInActiveSession - 0x7F'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0

        # == THIS IS - PLACE HOLDER - ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_003(self, name='pyrotechnic ECU only'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0

        # == THIS IS - PLACE HOLDER - ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_004(self, name='pyrotechnic ECU only'):
        print('%s is not a Pyrotechnic ECU'%device_under_test)
        return 0

        # == THIS IS - PLACE HOLDER - ==
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='NOT APPLICABLE'
        )

    def test_005(self, name='requestOutOfRange - 0x31 -- SF 04 - invalidMask'):
        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 04 FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_006(self, name='requestOutOfRange - 0x31 -- SF 06 - invalidMask'):
        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 06 FF FF FF FF',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_007(self, name='requestOutOfRange - 0x31 -- SF 04 - invalidSnapshot'):
        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 04 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_008(self, name='requestOutOfRange - 0x31 -- SF 06 - invalidDataRecord'):
        if device_under_test == 'MSM':
            print('Test step from {} is not supported by {} (subfunction not supported)'.format(
                    __name__, device_under_test))
            return 0


        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 06 00 00 00 00',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

