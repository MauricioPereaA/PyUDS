
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20
        
from framework.shared_functions import device_under_test, tools, pn_dict, sleep_timeout
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest, time, os, random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== CG3531 - Network Supervision ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x19'
        )

        ''' Device Under Test - Settings '''
        self.protected_message = random.choice(     # Pick random message to be tested
            list(pn_dict[device_under_test]['protected_messages'].keys())
        )
        self.DTC = pn_dict[device_under_test]['protected_messages'][self.protected_message]['DTC']


    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()
    
 # reportNumberOfDTCByStatusMask - 0x02
    def test_001(self, name='Transition to default session'):
        test.preconditions(
            step_info=info(),
            power_mode='RUN'#?power mode = run
        )
        time.sleep(5)
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True,#add
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )
#test3
    def test_004(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 01 09',
            expected={
                'response': 'Positive',
                # according to the 2020 CG DTCFormatIdentifier is 01
                'partialData': '59 01 FF 01 00 00'  #59 01 FF 00 00 00 -->59 01 FF 01 00 00
            }
        )

    def test_006(self, name='%s :: stop message transmission + 6s delay + read DTC snapshot | '%device_under_test):
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 01 09',
            expected={
                'response': 'Positive',
                'partialData': '59 01 FF 01 00 01'   # 59 01 FF 00 00 01 ---> 59 01 FF 01 00 01
            }
        )

        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_007(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_009(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 01 09',
            expected={
                'response': 'Positive',
                'partialData': '59 01 FF 01 00 00'  # 59 01 FF 00 00 00 -->59 01 FF 01 00 00
            }
        )

    def test_011(self, name='%s :: stop message transmission + 6s delay + read DTC snapshot | '%device_under_test):
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 01 09',
            expected={
                'response': 'Positive',
                'partialData': '59 01 FF 01 00 01'   # 59 01 FF 00 00 01 ---> 59 01 FF 01 00 01
            }
        )

        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False


    def test_012(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_013(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),         
            functionalAddr=True  #add  
        )   
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

 # reportDTCByStatusMask - 0x02
    def test_015(self, name='%s :: read DTCs - Status Byte $50'%device_under_test):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive'
            }
        )
        # I think should deleted this verify
        
        #verify = tools.popup.ask(
        #    title=name,
        #    description='Please, verify that all the DTCs reported have Status byte equal to $50'
        #)
        # change the step_name
        #test.compare(True, verify, step = 'test_012' )

    def test_017(self, name='%s :: read DTCs '%device_under_test):
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialData':  '%s'%self.DTC
            }
        )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False
        time.sleep(1)

    def test_018(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),         
            functionalAddr=True  #add    
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_020(self, name='%s :: read DTCs '%device_under_test):
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'data':  'FF'
            }
        )

    def test_022(self, name='%s :: read DTCs '%device_under_test):
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='19 02 09',
            expected={
                'response': 'Positive',
                'partialData':  '%s'%self.DTC
            }
        )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False
        time.sleep(1)

    def test_023(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_024(self, name='Clear DTCs'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True#add
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

 # reportDTCSnapshotIdentification - 0x03
    def test_026(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $03 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_028(self, name='%s :: stop message transmission + 6s delay + read DTC | '%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $03 of service $19)'%device_under_test)
            return 0
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_029(self, name='Clear DTCs'):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $03 of service $19)'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_031(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $03 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 03',
            expected={
                'response': 'Positive'
            }
        )

    def test_033(self, name='%s :: stop message transmission + 6s delay + read DTC | '%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $03 of service $19)'%device_under_test)
            return 0
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_034(self, name='Clear DTCs (functional address request)'):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s '%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_035(self, name='Clear DTCs'):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s '%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

 # reportDTCSnapshotRecordByDTCNumber - 0x04
 #  MSM not supported the subfunction 0x04----just skip
    def test_037(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 04 ' + '%s '%self.DTC + '01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_039(self, name='%s :: stop message transmission + 6s delay + read DTC | '%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $03 of service $19)'%device_under_test)
            return 0
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_040(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(step_info=info())
        if device_under_test in 'ARB':
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 04 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'dataLength': '20'
                }
            )        
        else:
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 04 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'dataLength': '9'
                }
            )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_042(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 04 ' + 'CF FF FF ' + '01',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_043(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 04 ' + '%s '%self.DTC + 'AA',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_044(self, name='Clear DTCs'):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s '%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_046(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 04 ' + '%s '%self.DTC + '01',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_048(self, name='%s :: stop message transmission + 6s delay + read DTC | '%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $03 of service $19)'%device_under_test)
            return 0
        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 03',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_049(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        if device_under_test in 'ARB':
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 04 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'dataLength': '20'
                }
            )        
        else:
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 04 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'dataLength': '9'
                }
            )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_051(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 04 ' + 'CF FF FF ' + '01',
            expected={
                'response': 'No response'
            }
        )

    def test_052(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $04 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 04 ' + '%s '%self.DTC + 'AA',
            expected={
                'response': 'No response'
            }
        )

    def test_053(self, name='Clear DTCs (functional address request)'):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s '%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_054(self, name='Clear DTCs'):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s '%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

 # reportDTCExtendedDataRecordByDTCNumber - 0x06
    def test_056(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 06 ' + '%s '%self.DTC + '01',
            expected={
                'response': 'Positive',
                'partialData':  '%s '%self.DTC,
                'dataLength': '4'
            }
        )

    def test_058(self, name='%s :: stop message transmission + 6s delay + read DTC | '%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info()
        )
        if device_under_test in 'ARB':
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 06 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'partialData':  '%s '%self.DTC,
                    'dataLength': '10'
                }
            )
        
        else:
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 06 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'partialData':  '%s '%self.DTC,
                    'dataLength': '6'
                }
            )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_060(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 06 ' + 'CF FF FF ' + '01',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )

    def test_061(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        time.sleep(1)
        test.preconditions(step_info=info())
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 06 ' + '%s '%self.DTC + 'AA',
            expected={
                'response': 'Negative',
                'data': '31'
            }
        )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_062(self, name='Clear DTCs'):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_064(self, name='%s :: read DTCs - No DTCs set'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0
        
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        if device_under_test in 'ARB':
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 06 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'partialData':  '%s '%self.DTC,
                    'dataLength': '10'
                }
            )
        
        else:
            test.step(
                step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
                custom='19 06 ' + '%s '%self.DTC + '01',
                expected={
                    'response': 'Positive',
                    'partialData':  '%s '%self.DTC,
                    'dataLength': '6'
                }
            )

    def test_066(self, name='%s :: stop message transmission + 6s delay + read DTC | '%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        # CAPL implementation stops message from being transmitted
        test.canoe.set_envVariable(**dict({self.protected_message:1})) # Set to 1 - True
        time.sleep(6)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 06 ' + '%s '%self.DTC + '01',
            expected={
                'response': 'Positive',
                'partialData':  '%s '%self.DTC,
                'dataLength': '6'
            }
        )
        test.canoe.set_envVariable(**dict({self.protected_message:0})) # Set to 0 - False

    def test_068(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 06 ' + 'CF FF FF ' + '01',
            expected={
                'response': 'No response'
            }
        )

    def test_069(self, name='%s :: read DTCs'%device_under_test):
        if device_under_test == 'MSM':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0

        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title='{0} - {1}::{2}'.format(name, device_under_test, self.protected_message),
            custom='19 06 ' + '%s '%self.DTC + 'AA',
            expected={
                'response': 'No response'
            }
        )

    def test_070(self, name='Clear DTCs (functional address request)'):
        if device_under_test == 'MSM':#add
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_072(self, name='%s :: read DTCs '%device_under_test):
        time.sleep(1)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 0A',
            expected={
                'response': 'Positive'
            }
        )
        verify = tools.popup.ask(
            title=name,
            description='Verify that all the supported DTCs are reported.'
        ) 
        # change the test_name_number
        test.compare(True, verify, step = 'test_072' )#test_069-->test_072

    def test_073(self, name='%s :: read DTCs '%device_under_test):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='19 0A',
            expected={
                'response': 'Positive'
            }
        )
        verify = tools.popup.ask(
            title=name,
            description='Please, verify that all the supported DTCs are reported'
        )
        test.compare(True, verify, step = 'test_073' )#test_070-->test_073

    def test_074(self, name='Clear DTCs (functional address request)'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

    def test_076(self, name='Step to test subfunction 13 of service 19'):
        pass

    def test_078(self, name='Step to test subfunction 13 of service 19'):
        pass

    def test_079(self, name='Step to test subfunction 13 of service 19'):
        pass

    def test_081(self, name='Step to test subfunction 13 of service 19'):
        pass

    def test_083(self, name='Step to test subfunction 13 of service 19'):
        pass

    def test_084(self, name='Step to test subfunction 13 of service 19'):
        pass

    def test_085(self, name='Step to test subfunction 13 of service 19'):
        pass

 # reportDTCFaultDetectionCounter - 0x14
    def test_087(self, name='%s :: read DTCs '%device_under_test):
        if device_under_test == 'TCP':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='19 14',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_088(self, name='%s :: read DTCs '%device_under_test):
        if device_under_test == 'TCP':
            print(name, 'Test is not supported by %s (sub function $14 of service $19)'%device_under_test)
            return 0
        time.sleep(1)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='19 14',
            expected={
                'response': 'Positive',
                'dataLength': '4'
            }
        )

    def test_089(self, name='Clear DTCs'):
        if device_under_test == 'TCP':
            print(name, 'Test is not supported by %s'%device_under_test)
            return 0
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='14 FF FF FF',
            expected={
                'response': 'Positive'
            }
        )

 # reportDTCWithPermanentStatus - 0x15
    def test_091(self, name='Step to test subfunction 15 of service 19'):
        pass

    def test_093(self, name='Step to test subfunction 15 of service 19'):
        pass

    def test_096(self, name='Step to test subfunction 15 of service 19'):
        pass

    def test_098(self, name='Step to test subfunction 15 of service 19'):
        pass

    def test_100(self, name='Step to test subfunction 15 of service 19'):
        pass

    def test_101(self, name='Step to test subfunction 15 of service 19'):
        pass

    def test_104(self, name='Step to test subfunction 15 of service 19'):
        pass




