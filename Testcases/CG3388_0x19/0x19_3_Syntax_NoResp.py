
            # This is and autogenerated test case using PyUDS Test Builder v0.1 #
#Modified by: Mauricio Perea        Date: 30-Sep-20

from framework.shared_functions import device_under_test, tools, pn_dict
from Testcases.TestClass import TestCase
from inspect import stack as info
import unittest
import random

test = TestCase()
class PyUDS_TestCase(unittest.TestCase):

    #== Positive Flow Diagnostic Session Control Session and Security Tests ==#
    @classmethod
    def setUpClass(self):
        #== Initialize test case ==#
        test.begin(
            test_info=info(),
            writeTestResults=True,
            excel_tab='0x19'
        )
        self.protected_message_1 = random.choice(
            list(pn_dict[device_under_test]['protected_messages'].keys()))

        self.DTC_1 = pn_dict[device_under_test]['protected_messages'][self.protected_message_1]['DTC']

    @classmethod
    def tearDownClass(self):
        #== End Test Case ==#
        test.end()


    def test_001(self, name='Transition to defaultSession'):
        test.preconditions(
            step_info=info()
        )
        test.step(
            step_title=name,
            custom='10 01',
            expected={
                'response': 'Positive'
            }
        )

    def test_002(self, name='subFunctionNotSupported - No Response'):
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='19 FF',
            expected={
                'response': 'No response'
            }
        )

    def test_003(self, name='NRC subFunctionNotSupported No Response  in extendedSession'):
        # Extended session transition        
        test.preconditions('Transition to extended session')        
        test.step(step_title='Transition to extended session',                
                    extended_session_control=True)
        test.preconditions(
            step_info=info(),
            functionalAddr=True
        )
        test.step(
            step_title=name,
            custom='19 FF',
            expected={
                'response': 'No response'
            }
        )